{"version":3,"file":"index.cjs.js","sources":["../src/contexts/CartContext.tsx","../src/contexts/ThemeContext.tsx","../src/layouts/AuthLayoutContent.tsx","../src/components/banner/BannerVOne.tsx","../src/components/buttons/MyButton.tsx","../src/utils/theme.tsx","../src/hooks/convertToCurrency.ts","../src/utils/constants.tsx","../src/components/card/order/OrderCrudCard.tsx","../src/utils/api.tsx","../src/utils/createFetchClient.tsx","../src/utils/getAuthToken.tsx","../src/api/authentication.tsx","../src/contexts/AuthContext.tsx","../src/api/ordersApi.tsx","../src/contexts/ClientOrderContext.tsx","../src/pages/tabs/client-order/ClientOrderCard.tsx","../src/utils/createFetchClientForItems.tsx","../src/api/productApi.tsx","../src/contexts/ClientProductContext.tsx","../src/components/card/product/ProductCardV2.tsx","../src/components/card/product/ProductGridCardVOne.tsx","../src/components/card/product/ProductHScrollCardVOne.tsx","../src/components/card/product/ProductCrudCard.tsx","../src/components/delete/DeleteSectionView.tsx","../src/components/divider/Divider.tsx","../src/components/ExternalLink.tsx","../src/components/Themed.tsx","../src/components/StyledText.tsx","../src/components/EditScreenInfo.tsx","../src/components/products/ProductListItem.tsx","../src/components/other/general/Styles.tsx","../src/hooks/stripeConverter.tsx","../src/api/paymentApi.tsx","../src/api/storeApi.tsx","../src/contexts/ClientStoreContext.tsx","../src/pages/tabs/cart/PaymentPayScreen.tsx","../src/components/card/cart/CartCard.tsx","../src/api/collectionApi.tsx","../src/contexts/ClientCollectionContext.tsx","../src/pages/tabs/collections/CollectionPageVTwo.tsx","../src/hooks/generateUUID.tsx","../src/components/views/UserLoginTextFields.tsx","../src/components/views/UserRegisterTextFields.tsx","../src/pages/auth/login/LoginComponentTwo.tsx","../src/contexts/FavoriteContext.tsx","../src/pages/tabs/product-details/ProductDetailsPageVThree.tsx","../src/pages/tabs/product-details/ProductDetailsPageVFour.tsx","../src/pages/auth/register/RegisterComponentTwo.tsx","../src/pages/(settings)/settings/SettingsPage.tsx","../src/pages/auth/login/LoginComponentOne.tsx","../src/pages/auth/welcome/WelcomePageTwo.tsx","../src/pages/aux/terms-of-use/TermsOfUsePage.tsx","../src/pages/aux/privacy-policy/PrivacyPolicyPage.tsx","../src/pages/aux/cookies/CookiesPage.tsx","../src/pages/(settings)/appearance/AppearanceSelection.tsx","../src/pages/(settings)/faq/FAQPage.tsx","../src/components/card/fovorite/FavoritrCard.tsx","../src/pages/(settings)/favorites/FavoritesPageVOne.tsx","../src/components/products/CollectionProductSearchScreen.tsx","../src/components/products/ProductSearchScreen.tsx","../src/pages/tabs/home/TopSectionHeader.tsx","../src/pages/tabs/home/Carousel.tsx","../src/utils/Routes.tsx","../src/pages/tabs/home/Headings.tsx","../src/components/search/SearchBarVOne.tsx","../src/components/card/product/ProductRow.tsx","../src/components/home/HomeDesignOne.tsx","../src/components/search/SearchBarVOneButton.tsx","../src/components/home/TopHomeSeaction.tsx","../src/components/home/HomeDesignTwo.tsx","../src/api/mankindProductApi.tsx","../src/contexts/MankindProductContext.tsx","../src/api/mankindStoreApi.tsx","../src/contexts/MankindStoreContext.tsx","../src/api/couponApi.tsx","../src/api/inboxApi.tsx","../src/model-sample-data/sample-order.tsx","../src/pages/tabs/cart/CartPageVOne.tsx","../src/hooks/ExternalLink.tsx","../src/layouts/HomeLayoutContent.tsx","../src/utils/pages.tsx","../src/model-sample-data/sample-product.tsx","../src/components/textfield/TextFieldVOne.tsx","../src/hooks/formatPhoneNumber.ts","../src/utils/storage.tsx","../src/hooks/useClientOnlyValue.ts"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\nimport { ProductModelProps } from \"@/models/ProductModelProps\";\n\n// Define the context type\ninterface CartContextType {\n  carts: Partial<ProductModelProps>[];\n  addToCart: (item: Partial<ProductModelProps>) => Promise<void>;\n  decreaseFromCart: (item: Partial<ProductModelProps>) => void;\n  deleteItemFromCart: (item: Partial<ProductModelProps>) => void;\n  totalSum: number;\n  totalTax: number;\n  totalShipping: number;\n  grandTotal: number;\n  quantity: number;\n  clearData: () => void;\n}\n\nexport const CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport const useCart = (): CartContextType => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n};\n\n// Updated CartProvider to accept storage and storageKey as props\ninterface CartProviderProps {\n  children: ReactNode;\n  storage: {\n    getItem: (key: string) => Promise<string | null>;\n    setItem: (key: string, value: string) => Promise<void>;\n    removeItem: (key: string) => Promise<void>;\n  };\n  storageKey: string;\n}\n\nexport const CartProvider: React.FC<CartProviderProps> = ({ children, storage, storageKey }) => {\n  const [carts, setCarts] = useState<Partial<ProductModelProps>[]>([]);\n  const [totalSum, setTotalSum] = useState<number>(0);\n  const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n  const [quantity, setQuantity] = useState<number>(0);\n\n  const totalTax = totalSum * 0.08875; // Tax calculation\n  const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n  // Load carts from provided storage when the component mounts\n  useEffect(() => {\n    const loadCarts = async () => {\n      try {\n        const storedCarts = await storage.getItem(storageKey);\n        if (storedCarts) {\n          const parsedCarts = JSON.parse(storedCarts);\n          setCarts(parsedCarts);\n          calculateTotalSum(parsedCarts);\n          setQuantity(parsedCarts.reduce((sum: number, item: Partial<ProductModelProps>) => sum + (item.quantity || 0), 0));\n        }\n      } catch (error) {\n        console.error(\"Failed to load carts from storage:\", error);\n      }\n    };\n    loadCarts();\n  }, [storage, storageKey]);\n\n  // Save carts to provided storage whenever they are updated\n  useEffect(() => {\n    const saveCarts = async () => {\n      try {\n        if (carts.length > 0) {\n          await storage.setItem(storageKey, JSON.stringify(carts));\n        }\n      } catch (error) {\n        console.error(\"Failed to save carts to storage:\", error);\n      }\n    };\n    saveCarts();\n  }, [carts, storage, storageKey]);\n\n  const addToCart = async (item: Partial<ProductModelProps>) => {\n    let updatedCarts = [...carts];\n    const itemExistIndex = updatedCarts.findIndex((cart) => cart.id === item.id);\n\n    if (itemExistIndex !== -1) {\n      updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) + 1;\n    } else {\n      updatedCarts = [...updatedCarts, { ...item, quantity: 1 }];\n    }\n\n    setCarts(updatedCarts);\n    calculateTotalSum(updatedCarts);\n    setQuantity((prev) => prev + 1);\n  };\n\n  const decreaseFromCart = (item: Partial<ProductModelProps>) => {\n    const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n    if (itemExistIndex !== -1) {\n      const updatedCarts = [...carts];\n      if ((updatedCarts[itemExistIndex].quantity || 0) > 1) {\n        updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) - 1;\n      } else {\n        updatedCarts.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n      }\n\n      setCarts(updatedCarts);\n      calculateTotalSum(updatedCarts);\n      setQuantity((prev) => prev - 1);\n    }\n  };\n\n  const deleteItemFromCart = (item: Partial<ProductModelProps>) => {\n    const updatedCarts = carts.filter((cart) => cart.id !== item.id);\n    setCarts(updatedCarts);\n    calculateTotalSum(updatedCarts);\n    setQuantity((prev) => prev - (item.quantity || 0));\n  };\n\n  const clearData = () => {\n    setCarts([]);\n    setTotalSum(0);\n    setQuantity(0);\n    storage.removeItem(storageKey); // Clear from storage as well\n  };\n\n  const calculateTotalSum = (carts: Partial<ProductModelProps>[]) => {\n    const total = carts.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n    setTotalSum(total);\n  };\n\n  const value: CartContextType = {\n    carts,\n    addToCart,\n    decreaseFromCart,\n    quantity,\n    totalSum,\n    totalTax,\n    totalShipping,\n    grandTotal,\n    deleteItemFromCart,\n    clearData,\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\n// import AsyncStorage from \"@react-native-async-storage/async-storage\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\"; \n\n// // Define the context type\n// interface CartContextType {\n//   carts: Partial<ProductModelProps>[];\n//   addToCart: (item: Partial<ProductModelProps>) => Promise<void>;\n//   decreaseFromCart: (item: Partial<ProductModelProps>) => void;\n//   deleteItemFromCart: (item: Partial<ProductModelProps>) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   clearData: () => void;\n// }\n\n// export const CartContext = createContext<CartContextType | undefined>(undefined);\n\n// export const useCart = (): CartContextType => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error(\"useCart must be used within a CartProvider\");\n//   }\n//   return context;\n// };\n\n// // Update CartProvider to accept CARTS_KEY as a prop\n// export const CartProvider = ({ children, storageKey }: { children: ReactNode; storageKey: string }) => {\n//   const [carts, setCarts] = useState<Partial<ProductModelProps>[]>([]);\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n//   const [quantity, setQuantity] = useState<number>(0);\n  \n//   const totalTax = totalSum * 0.08875; // Tax calculation\n//   const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n//   // Load carts from AsyncStorage when the component mounts\n//   useEffect(() => {\n//     const loadCarts = async () => {\n//       try {\n//         const storedCarts = await AsyncStorage.getItem(storageKey); // Use passed storage key\n//         if (storedCarts) {\n//           const parsedCarts = JSON.parse(storedCarts);\n//           setCarts(parsedCarts);\n//           calculateTotalSum(parsedCarts);\n//           setQuantity(parsedCarts.reduce((sum: number, item: Partial<ProductModelProps>) => sum + (item.quantity || 0), 0));\n//         }\n//       } catch (error) {\n//         console.error(\"Failed to load carts from storage:\", error);\n//       }\n//     };\n//     loadCarts();\n//   }, [storageKey]);\n\n//   // Save carts to AsyncStorage whenever they are updated\n//   useEffect(() => {\n//     const saveCarts = async () => {\n//       try {\n//         await AsyncStorage.setItem(storageKey, JSON.stringify(carts)); // Use passed storage key\n//       } catch (error) {\n//         console.error(\"Failed to save carts to storage:\", error);\n//       }\n//     };\n//     if (carts.length > 0) {\n//       saveCarts();\n//     }\n//   }, [carts, storageKey]);\n\n//   const addToCart = async (item: Partial<ProductModelProps>) => {\n//     let updatedCarts = [...carts];\n//     const itemExistIndex = updatedCarts.findIndex((cart) => cart.id === item.id);\n\n//     if (itemExistIndex !== -1) {\n//       updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) + 1;\n//     } else {\n//       updatedCarts = [...updatedCarts, { ...item, quantity: 1 }];\n//     }\n\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev + 1);\n//   };\n\n//   const decreaseFromCart = (item: Partial<ProductModelProps>) => {\n//     const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//     if (itemExistIndex !== -1) {\n//       const updatedCarts = [...carts];\n//       if ((updatedCarts[itemExistIndex].quantity || 0) > 1) {\n//         updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) - 1;\n//       } else {\n//         updatedCarts.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//       }\n\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev - 1);\n//     }\n//   };\n\n//   const deleteItemFromCart = (item: Partial<ProductModelProps>) => {\n//     const updatedCarts = carts.filter((cart) => cart.id !== item.id);\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev - (item.quantity || 0));\n//   };\n\n//   const clearData = () => {\n//     setCarts([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//     AsyncStorage.removeItem(storageKey); // Clear from storage as well\n//   };\n\n//   const calculateTotalSum = (carts: Partial<ProductModelProps>[]) => {\n//     const total = carts.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n//     setTotalSum(total);\n//   };\n\n//   const value: CartContextType = {\n//     carts,\n//     addToCart,\n//     decreaseFromCart,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromCart,\n//     clearData,\n//   };\n\n//   return (\n//     <CartContext.Provider value={value}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\n// import AsyncStorage from \"@react-native-async-storage/async-storage\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\"; \n\n// // Define the context type\n// interface CartContextType {\n//   carts: Partial<ProductModelProps>[];\n//   addToCart: (item: Partial<ProductModelProps>) => Promise<void>;\n//   decreaseFromCart: (item: Partial<ProductModelProps>) => void;\n//   deleteItemFromCart: (item: Partial<ProductModelProps>) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   clearData: () => void;\n// }\n\n// export const CartContext = createContext<CartContextType | undefined>(undefined);\n// // const CARTS_KEY = 'user_carts'; // Key for storing carts in AsyncStorage\n\n// export const useCart = (): CartContextType => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error(\"useCart must be used within a CartProvider\");\n//   }\n//   return context;\n// };\n\n// export const CartProvider = ({ children }: { children: ReactNode }) => {\n//   const [carts, setCarts] = useState<Partial<ProductModelProps>[]>([]);\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n//   const [quantity, setQuantity] = useState<number>(0);\n  \n//   // Calculating total tax and grand total\n//   const totalTax = totalSum * 0.08875; \n//   const grandTotal = totalSum + totalTax + totalShipping; \n\n//   // Load carts from AsyncStorage when the component mounts\n//   useEffect(() => {\n//     const loadCarts = async () => {\n//       try {\n//         const storedCarts = await AsyncStorage.getItem(CARTS_KEY);\n//         if (storedCarts) {\n//           const parsedCarts = JSON.parse(storedCarts);\n//           setCarts(parsedCarts);\n//           calculateTotalSum(parsedCarts);\n//           setQuantity(parsedCarts.reduce((sum: number, item: Partial<ProductModelProps>) => sum + (item.quantity || 0), 0));\n//         }\n//       } catch (error) {\n//         console.error(\"Failed to load carts from storage:\", error);\n//       }\n//     };\n//     loadCarts();\n//   }, []);\n\n//   // Save carts to AsyncStorage whenever they are updated\n//   useEffect(() => {\n//     const saveCarts = async () => {\n//       try {\n//         await AsyncStorage.setItem(CARTS_KEY, JSON.stringify(carts));\n//       } catch (error) {\n//         console.error(\"Failed to save carts to storage:\", error);\n//       }\n//     };\n//     if (carts.length > 0) {\n//       saveCarts();\n//     }\n//   }, [carts]);\n\n//   const addToCart = async (item: Partial<ProductModelProps>) => {\n//     let updatedCarts = [...carts];\n//     const itemExistIndex = updatedCarts.findIndex((cart) => cart.id === item.id);\n\n//     if (itemExistIndex !== -1) {\n//       updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) + 1;\n//     } else {\n//       updatedCarts = [...updatedCarts, { ...item, quantity: 1 }];\n//     }\n\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev + 1);\n//   };\n\n//   const decreaseFromCart = (item: Partial<ProductModelProps>) => {\n//     const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//     if (itemExistIndex !== -1) {\n//       const updatedCarts = [...carts];\n//       if ((updatedCarts[itemExistIndex].quantity || 0) > 1) {\n//         updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) - 1;\n//       } else {\n//         updatedCarts.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//       }\n\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev - 1);\n//     }\n//   };\n\n//   const deleteItemFromCart = (item: Partial<ProductModelProps>) => {\n//     const updatedCarts = carts.filter((cart) => cart.id !== item.id);\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev - (item.quantity || 0));\n//   };\n\n//   const clearData = () => {\n//     setCarts([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//     AsyncStorage.removeItem(CARTS_KEY); // Clear from storage as well\n//   };\n\n//   const calculateTotalSum = (carts: Partial<ProductModelProps>[]) => {\n//     const total = carts.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n//     setTotalSum(total);\n//   };\n\n//   const value: CartContextType = {\n//     carts,\n//     addToCart,\n//     decreaseFromCart,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromCart,\n//     clearData,\n//   };\n\n//   return (\n//     <CartContext.Provider value={value}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\n// import { useFocusEffect } from \"@react-navigation/native\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\"; \n// import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\n// // Define the context type\n// interface CartContextType {\n//   carts: Partial<ProductModelProps>[];\n//   addToCart: (item: Partial<ProductModelProps>) => Promise<void>;\n//   decreaseFromCart: (item: Partial<ProductModelProps>) => void;\n//   deleteItemFromCart: (item: Partial<ProductModelProps>) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   clearData: (authUser: any) => void;\n// }\n\n// export const CartContext = createContext<CartContextType | undefined>(undefined);\n// const CARTS_KEY = 'user_carts'; // Key for storing carts in AsyncStorage\n\n// export const useCart = (): CartContextType => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error(\"useCart must be used within a CartProvider\");\n//   }\n//   return context;\n// };\n\n\n// export const CartProvider = ({ children }: { children: ReactNode }) => {\n//   const [carts, setCarts] = useState<Partial<ProductModelProps>[]>([]);\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10);\n//   const [quantity, setQuantity] = useState<number>(0);\n//   const totalTax = totalSum * 0.08875; // Tax calculation\n//   const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n//   // Load carts from AsyncStorage when the component mounts\n//   useEffect(() => {\n//     const loadCarts = async () => {\n//       try {\n//         const storedCarts = await AsyncStorage.getItem(CARTS_KEY);\n//         if (storedCarts) {\n//           setCarts(JSON.parse(storedCarts));\n//         }\n//       } catch (error) {\n//         console.error(\"Failed to load carts from storage:\", error);\n//       }\n//     };\n//     loadCarts();\n//   }, []);\n\n//   // Save carts to AsyncStorage whenever they are updated\n//   useEffect(() => {\n//     const saveCarts = async () => {\n//       try {\n//         await AsyncStorage.setItem(CARTS_KEY, JSON.stringify(carts));\n//       } catch (error) {\n//         console.error(\"Failed to save carts to storage:\", error);\n//       }\n//     };\n//     saveCarts();\n//   }, [carts]);\n\n//   const addToCart = async (item: Partial<ProductModelProps>) => {\n//     let updatedCarts = [...carts];\n//     const itemExistIndex = updatedCarts.findIndex((cart) => cart.id === item.id);\n\n//     if (itemExistIndex !== -1) {\n//       updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) + 1;\n//     } else {\n//       updatedCarts = [...updatedCarts, { ...item, quantity: 1 }];\n//     }\n\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev + 1);\n//   };\n\n//   const decreaseFromCart = (item: Partial<ProductModelProps>) => {\n//     const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//     if (itemExistIndex !== -1) {\n//       const updatedCarts = [...carts];\n//       if ((updatedCarts[itemExistIndex].quantity || 0) > 1) {\n//         updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) - 1;\n//       } else {\n//         updatedCarts.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//       }\n\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev - 1);\n//     }\n//   };\n\n//   const deleteItemFromCart = (item: Partial<ProductModelProps>) => {\n//     const updatedCarts = carts.filter((cart) => cart.id !== item.id);\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev - (item.quantity || 0));\n//   };\n\n//   const clearData = () => {\n//     setCarts([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//     AsyncStorage.removeItem(CARTS_KEY); // Clear from storage as well\n//   };\n\n//   const calculateTotalSum = (carts: Partial<ProductModelProps>[]) => {\n//     const total = carts.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n//     setTotalSum(total);\n//   };\n\n\n//   const value: CartContextType = {\n//     carts,\n//     addToCart,\n//     decreaseFromCart,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromCart,\n//     clearData,\n//   };\n\n//   return (\n//     <CartContext.Provider value={value}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode } from \"react\";\n// import { useFocusEffect } from \"@react-navigation/native\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\"; \n\n// // Define the context type\n// interface CartContextType {\n//   carts: Partial<ProductModelProps>[];\n//   addToCart: (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => void;\n//   decreaseFromCart: (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => void;\n//   deleteItemFromCart: (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   clearData: (authUser: any, updateSingleUserItem: any) => void;\n// }\n\n// export const CartContext = createContext<CartContextType | undefined>(undefined);\n\n// export const useCart = (): CartContextType => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error(\"useCart must be used within a CartProvider\");\n//   }\n//   return context;\n// };\n\n// export const CartProvider = ({ children }: { children: ReactNode }) => {\n//   const [carts, setCarts] = useState<Partial<ProductModelProps>[]>([]); // Initialize state with an empty cart\n\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n//   const [quantity, setQuantity] = useState<number>(0);\n\n//   const totalTax = totalSum * 0.08875; // Tax calculation\n//   const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n//   useFocusEffect(\n//     React.useCallback(() => {\n//       // Load or calculate initial values when the cart context is first used\n//       calculateTotalSum(carts);\n//       setQuantity(carts.reduce((sum, item) => sum + (item.quantity || 0), 0));\n//     }, [carts]) // Runs when the cart is updated\n//   );\n\n//   const addToCart = (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => {\n//     let updatedCarts = [...carts];\n//     const itemExistIndex = updatedCarts.findIndex((cart) => cart.id === item.id);\n\n//     if (itemExistIndex !== -1) {\n//       updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) + 1; // Increment quantity\n//     } else {\n//       updatedCarts = [...updatedCarts, { ...item, quantity: 1 }];\n//     }\n\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev + 1);\n//     updateSingleUserItem({ cart: updatedCarts, user: authUser }); // Update user profile with cart changes\n//   };\n\n//   const decreaseFromCart = (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => {\n//     const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//     if (itemExistIndex !== -1) {\n//       const updatedCarts = [...carts];\n//       if ((updatedCarts[itemExistIndex].quantity || 0) > 1) {\n//         updatedCarts[itemExistIndex].quantity = (updatedCarts[itemExistIndex].quantity || 0) - 1;\n//       } else {\n//         updatedCarts.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//       }\n\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev - 1);\n//       updateSingleUserItem({ cart: updatedCarts, user: authUser }); // Update user profile cart\n//     }\n//   };\n\n//   const deleteItemFromCart = (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => {\n//     const updatedCarts = carts.filter((cart) => cart.id !== item.id);\n//     setCarts(updatedCarts);\n//     calculateTotalSum(updatedCarts);\n//     setQuantity((prev) => prev - (item.quantity || 0));\n//     updateSingleUserItem({ cart: updatedCarts, user: authUser }); // Update user profile cart\n//   };\n\n//   const clearData = (authUser: any, updateSingleUserItem: any) => {\n//     setCarts([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//     updateSingleUserItem({ cart: [], user: authUser }); // Clear cart in user profile\n//   };\n\n//   // Calculate total sum\n//   const calculateTotalSum = (carts: Partial<ProductModelProps>[]) => {\n//     const total = carts.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n//     setTotalSum(total);\n//   };\n\n//   const value: CartContextType = {\n//     carts,\n//     addToCart,\n//     decreaseFromCart,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromCart,\n//     clearData,\n//   };\n  \n\n//   return (\n//     <CartContext.Provider value={value}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n\n// import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n// import { MMKV } from \"react-native-mmkv\";\n// import { useFocusEffect } from \"@react-navigation/native\";\n// import { CartItem } from \"@/models/UserProps\";\n\n// // Initialize MMKV storage\n// const storage = new MMKV();\n\n\n\n// // Define the context type\n// interface CartContextType {\n//   carts: CartItem[];\n//   addToCart: (item: CartItem) => void;\n//   decreaseFromCart: (item: CartItem) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   deleteItemFromCart: (item: CartItem) => void;\n//   clearData: () => void;\n// }\n\n// const CartContext = createContext<CartContextType | undefined>(undefined);\n\n// export const useCart = (): CartContextType => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// };\n\n// export const CartProvider = ({ children }: { children: ReactNode }) => {\n//   const [carts, setCarts] = useState<CartItem[]>([]);\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n//   const [quantity, setQuantity] = useState<number>(0);\n\n//   const totalTax = (totalSum * 0.08875); // Tax calculation based on totalSum\n//   const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n//   useFocusEffect(\n//     React.useCallback(() => {\n//       loadCartItems();\n//     }, [])\n//   );\n\n//   // Load cart items from MMKV\n//   const loadCartItems = () => {\n//     try {\n//       const storedCarts = storage.getString(\"carts\");\n//       if (storedCarts) {\n//         const parsedCarts: CartItem[] = JSON.parse(storedCarts);\n//         setCarts(parsedCarts);\n//         calculateTotalSum(parsedCarts);\n//         setQuantity(parsedCarts.reduce((sum, item) => sum + item.quantity, 0)); // Update quantity\n//       } else {\n//         resetCart();\n//       }\n//     } catch (error) {\n//       console.error(\"Error loading cart items:\", error);\n//     }\n//   };\n\n//   const addToCart = (item: CartItem) => {\n//     try {\n//       const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//       let updatedCarts = [...carts];\n\n//       if (itemExistIndex !== -1) {\n//         updatedCarts[itemExistIndex].quantity += 1; // Increment quantity\n//       } else {\n//         updatedCarts = [...carts, { ...item, quantity: 1 }];\n//       }\n\n//       storage.set(\"carts\", JSON.stringify(updatedCarts));\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev + 1);\n//     } catch (error) {\n//       console.error(\"Error adding item to cart:\", error);\n//     }\n//   };\n\n//   const decreaseFromCart = (item: CartItem) => {\n//     try {\n//       const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//       if (itemExistIndex !== -1) {\n//         const updatedCarts = [...carts];\n//         if (updatedCarts[itemExistIndex].quantity > 1) {\n//           updatedCarts[itemExistIndex].quantity -= 1;\n//         } else {\n//           updatedCarts.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//         }\n//         storage.set(\"carts\", JSON.stringify(updatedCarts));\n//         setCarts(updatedCarts);\n//         calculateTotalSum(updatedCarts);\n//         setQuantity((prev) => prev - 1);\n//       }\n//     } catch (error) {\n//       console.error(\"Error decreasing item from cart:\", error);\n//     }\n//   };\n\n//   const deleteItemFromCart = (item: CartItem) => {\n//     try {\n//       const updatedCarts = carts.filter((cart) => cart.id !== item.id);\n//       storage.set(\"carts\", JSON.stringify(updatedCarts));\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev - item.quantity);\n//     } catch (error) {\n//       console.error(\"Error deleting item from cart:\", error);\n//     }\n//   };\n\n//   const clearData = () => {\n//     try {\n//       storage.delete(\"carts\");\n//       resetCart();\n//     } catch (error) {\n//       console.error(\"Error clearing cart data:\", error);\n//     }\n//   };\n\n//   // Calculate total sum\n//   const calculateTotalSum = (carts: CartItem[]) => {\n//     const total = carts.reduce((sum, item) => sum + item.price * item.quantity, 0);\n//     setTotalSum(total);\n//   };\n\n//   // Reset cart state\n//   const resetCart = () => {\n//     setCarts([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//   };\n\n//   const value: CartContextType = {\n//     carts,\n//     addToCart,\n//     decreaseFromCart,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromCart,\n//     clearData,\n//   };\n\n//   return (\n//     <CartContext.Provider value={value}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n// import AsyncStorage from '@react-native-async-storage/async-storage';\n// import { useFocusEffect } from \"@react-navigation/native\";\n\n// // Define the interface for cart items\n// interface CartItem {\n//   id: string;\n//   price: number;\n//   quantity: number;\n// }\n\n// // Define the context type\n// interface CartContextType {\n//   carts: CartItem[];\n//   addToCart: (item: CartItem) => void;\n//   decreaseFromCart: (item: CartItem) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   deleteItemFromCart: (item: CartItem) => void;\n//   clearData: () => void;\n// }\n\n// const CartContext = createContext<CartContextType | undefined>(undefined);\n\n// export const useCart = (): CartContextType => {\n//   const context = useContext(CartContext);\n//   if (!context) {\n//     throw new Error('useCart must be used within a CartProvider');\n//   }\n//   return context;\n// };\n\n// export const CartProvider = ({ children }: { children: ReactNode }) => {\n//   const [carts, setCarts] = useState<CartItem[]>([]);\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n//   const [quantity, setQuantity] = useState<number>(0);\n\n//   const totalTax = (totalSum * 0.08875); // Tax calculation based on totalSum\n//   const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n//   useFocusEffect(\n//     React.useCallback(() => {\n//       console.log('Loading cart items...');\n//       loadCartItems();\n//     }, [])\n//   );\n\n//   useEffect(() => {\n//     // Test AsyncStorage to ensure it's working\n//     (async () => {\n//       try {\n//         await AsyncStorage.setItem('test_key', 'test_value');\n//         const value = await AsyncStorage.getItem('test_key');\n//         console.log('Test AsyncStorage Value:', value);\n//       } catch (error) {\n//         console.error('Error testing AsyncStorage:', error);\n//       }\n//     })();\n//   }, []);\n\n//   // Load cart items from AsyncStorage\n//   const loadCartItems = async () => {\n//     try {\n//       console.log('Trying to get carts from AsyncStorage...');\n//       const storedCarts = await AsyncStorage.getItem(\"carts\");\n//       console.log('Stored carts:', storedCarts);\n      \n//       if (storedCarts) {\n//         const parsedCarts: CartItem[] = JSON.parse(storedCarts);\n//         setCarts(parsedCarts);\n//         calculateTotalSum(parsedCarts);\n//         setQuantity(parsedCarts.reduce((sum, item) => sum + item.quantity, 0)); // Update quantity\n//       } else {\n//         resetCart();\n//       }\n//     } catch (error) {\n//       console.error(\"Error loading cart items:\", error);\n//     }\n//   };\n\n//   const addToCart = async (item: CartItem) => {\n//     try {\n//       const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//       let updatedCarts = [...carts];\n\n//       if (itemExistIndex !== -1) {\n//         updatedCarts[itemExistIndex].quantity += 1; // Increment quantity\n//       } else {\n//         updatedCarts = [...carts, { ...item, quantity: 1 }];\n//       }\n\n//       await AsyncStorage.setItem(\"carts\", JSON.stringify(updatedCarts));\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev + 1);\n//     } catch (error) {\n//       console.error(\"Error adding item to cart:\", error);\n//     }\n//   };\n\n//   const decreaseFromCart = async (item: CartItem) => {\n//     try {\n//       const itemExistIndex = carts.findIndex((cart) => cart.id === item.id);\n//       if (itemExistIndex !== -1) {\n//         const updatedCarts = [...carts];\n//         if (updatedCarts[itemExistIndex].quantity > 1) {\n//           updatedCarts[itemExistIndex].quantity -= 1;\n//         } else {\n//           updatedCarts.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//         }\n//         await AsyncStorage.setItem(\"carts\", JSON.stringify(updatedCarts));\n//         setCarts(updatedCarts);\n//         calculateTotalSum(updatedCarts);\n//         setQuantity((prev) => prev - 1);\n//       }\n//     } catch (error) {\n//       console.error(\"Error decreasing item from cart:\", error);\n//     }\n//   };\n\n//   const deleteItemFromCart = async (item: CartItem) => {\n//     try {\n//       const updatedCarts = carts.filter((cart) => cart.id !== item.id);\n//       await AsyncStorage.setItem(\"carts\", JSON.stringify(updatedCarts));\n//       setCarts(updatedCarts);\n//       calculateTotalSum(updatedCarts);\n//       setQuantity((prev) => prev - item.quantity);\n//     } catch (error) {\n//       console.error(\"Error deleting item from cart:\", error);\n//     }\n//   };\n\n//   const clearData = async () => {\n//     try {\n//       console.log('Clearing cart data from AsyncStorage...');\n//       await AsyncStorage.removeItem(\"carts\");\n//       resetCart();\n//     } catch (error) {\n//       console.error(\"Error clearing cart data:\", error);\n//     }\n//   };\n\n//   // Calculate total sum\n//   const calculateTotalSum = (carts: CartItem[]) => {\n//     const total = carts.reduce((sum, item) => sum + item.price * item.quantity, 0);\n//     setTotalSum(total);\n//   };\n\n//   // Reset cart state\n//   const resetCart = () => {\n//     console.log(\"Cart reset\");\n//     setCarts([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//   };\n\n//   const value: CartContextType = {\n//     carts,\n//     addToCart,\n//     decreaseFromCart,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromCart,\n//     clearData,\n//   };\n\n//   return (\n//     <CartContext.Provider value={value}>\n//       {children}\n//     </CartContext.Provider>\n//   );\n// };\n\n\n","import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useColorScheme } from 'react-native';\nimport { DarkTheme, DefaultTheme, ThemeProvider as NavigationThemeProvider } from '@react-navigation/native';\n\n// Define the Theme Mode types\ntype ThemeMode = 'light' | 'dark' | 'system';\n\nexport interface StoreTheme {\n  light: {\n    pageBackground: string;\n    pageText: string;\n    buttonBackground: string;\n    buttonText: string;\n    buttonShadow: string;\n    tint: string;\n    tabIconDefault: string;\n    tabIconSelected: string;\n    cardBackground: string;\n    cardText: string;\n    cardSecondaryText: string;\n    cardPrice: string;\n    cardBorder: string;\n    background: string;\n    title: string;\n    subtitle: string; \n    border: string;\n    card: string;\n    primary: string;\n    secondary: string;\n  };\n  dark: {\n    pageBackground: string;\n    pageText: string;\n    buttonBackground: string;\n    buttonText: string;\n    buttonShadow: string;\n    tint: string;\n    tabIconDefault: string;\n    tabIconSelected: string;\n    cardBackground: string;\n    cardText: string;\n    cardSecondaryText: string;\n    cardPrice: string;\n    cardBorder: string;\n    background: string;\n    title: string;\n    subtitle: string\n    border: string;\n    card: string;\n    primary: string;\n    secondary: string;\n  };\n}\n\n// Define the structure of the theme context\ninterface ThemeContextProps {\n  theme: ThemeMode;\n  setTheme: (mode: ThemeMode) => void;\n  isDarkMode: boolean;\n  colors: StoreTheme['light'] | StoreTheme['dark']; // Dynamically chooses based on the current mode\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n  storeTheme: StoreTheme; // Store theme overrides\n  storage: any; // Allow any storage mechanism to be passed in\n  storageKey: string; // Key used to store the theme\n}\n\n// Create the ThemeContext\nexport const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);\n\n// Hook to easily use the theme context\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Custom ThemeProvider component that accepts storeTheme, storage, and storageKey as props\nexport const ThemeProvider = ({ children, storeTheme, storage, storageKey }: ThemeProviderProps) => {\n  const systemColorScheme = useColorScheme(); // Detect system theme\n  const [theme, setThemeState] = useState<ThemeMode>('system'); // Default to system theme\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(systemColorScheme === 'dark'); // Check if dark mode is active\n\n  // Load theme from storage on component mount\n  useEffect(() => {\n    const loadStoredTheme = async () => {\n      try {\n        const storedTheme = await storage.getItem(storageKey);\n        if (storedTheme && (storedTheme === 'light' || storedTheme === 'dark' || storedTheme === 'system')) {\n          setThemeState(storedTheme as ThemeMode); // Set stored theme if available\n        }\n      } catch (error) {\n        console.error('Failed to load stored theme:', error);\n      }\n    };\n\n    loadStoredTheme();\n  }, [storage, storageKey]);\n\n  // Save theme to storage whenever it changes\n  useEffect(() => {\n    const saveTheme = async (newTheme: ThemeMode) => {\n      try {\n        await storage.setItem(storageKey, newTheme);\n      } catch (error) {\n        console.error('Failed to save theme:', error);\n      }\n    };\n\n    saveTheme(theme);\n  }, [theme, storage, storageKey]);\n\n  // Handle theme updates based on system preferences or manually set theme\n  useEffect(() => {\n    const darkMode = theme === 'system' ? systemColorScheme === 'dark' : theme === 'dark';\n    setIsDarkMode(darkMode);\n  }, [theme, systemColorScheme]);\n\n  // Merge store-specific theme with default theme\n  const currentTheme = isDarkMode\n    ? { ...DarkTheme, colors: { ...DarkTheme.colors, ...storeTheme.dark } }\n    : { ...DefaultTheme, colors: { ...DefaultTheme.colors, ...storeTheme.light } };\n\n  // Update the theme and save to storage\n  const setTheme = (newTheme: ThemeMode) => {\n    setThemeState(newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, isDarkMode, colors: currentTheme.colors }}>\n      <NavigationThemeProvider value={currentTheme}>\n        {children}\n      </NavigationThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\n\n\n\n\n\n\n// working but no custom colors\n// import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n// import { useColorScheme } from 'react-native';\n// import { DarkTheme, DefaultTheme, ThemeProvider as NavigationThemeProvider } from '@react-navigation/native';\n\n// // Define the Theme Mode types including 'system' and 'custom'\n// type ThemeMode = 'light' | 'dark' | 'system' | 'custom';\n\n// // Define the structure of the theme context\n// interface ThemeContextProps {\n//   theme: ThemeMode;\n//   setTheme: (mode: ThemeMode, customColors?: any) => void;\n//   isDarkMode: boolean;\n//   colors: any; // Holds the colors object from the theme\n// }\n\n// interface ThemeProviderProps {\n//   children: ReactNode;\n//   storage: any; // Allow any storage mechanism to be passed in\n//   storageKey: string; // Key used to store the theme\n//   customLightTheme?: any; // Custom colors for light theme\n//   customDarkTheme?: any;  // Custom colors for dark theme\n// }\n\n// // Create the ThemeContext\n// export const ThemeContext = createContext<ThemeContextProps | undefined>(undefined);\n\n// // Hook to easily use the theme context\n// export const useTheme = () => {\n//   const context = useContext(ThemeContext);\n//   if (!context) {\n//     throw new Error('useTheme must be used within a ThemeProvider');\n//   }\n//   return context;\n// };\n\n// // Custom ThemeProvider component that accepts storage, storageKey, and optional custom themes\n// export const ThemeProvider = ({ children, storage, storageKey, customLightTheme, customDarkTheme }: ThemeProviderProps) => {\n//   const systemColorScheme = useColorScheme(); // Detect system theme\n//   const [theme, setThemeState] = useState<ThemeMode>('system'); // Default to system theme\n//   const [isDarkMode, setIsDarkMode] = useState<boolean>(systemColorScheme === 'dark'); // Check if dark mode is active\n//   const [customColors, setCustomColors] = useState<any>(null); // State for custom colors\n\n//   // Load theme from storage on component mount\n//   useEffect(() => {\n//     const loadStoredTheme = async () => {\n//       try {\n//         const storedTheme = await storage.getItem(storageKey);\n//         if (storedTheme && (storedTheme === 'light' || storedTheme === 'dark' || storedTheme === 'system' || storedTheme === 'custom')) {\n//           setThemeState(storedTheme as ThemeMode); // Set stored theme if available\n//         }\n//         const storedCustomColors = await storage.getItem(`${storageKey}_customColors`);\n//         if (storedCustomColors) {\n//           setCustomColors(JSON.parse(storedCustomColors));\n//         }\n//       } catch (error) {\n//         console.error('Failed to load stored theme:', error);\n//       }\n//     };\n\n//     loadStoredTheme();\n//   }, [storage, storageKey]);\n\n//   // Save theme and custom colors to storage whenever it changes\n//   useEffect(() => {\n//     const saveTheme = async (newTheme: ThemeMode, newCustomColors?: any) => {\n//       try {\n//         await storage.setItem(storageKey, newTheme);\n//         if (newCustomColors) {\n//           await storage.setItem(`${storageKey}_customColors`, JSON.stringify(newCustomColors));\n//         }\n//       } catch (error) {\n//         console.error('Failed to save theme:', error);\n//       }\n//     };\n\n//     if (theme === 'custom' && customColors) {\n//       saveTheme(theme, customColors);\n//     } else {\n//       saveTheme(theme);\n//     }\n//   }, [theme, customColors, storage, storageKey]);\n\n//   // Handle theme updates based on system preferences or manually set theme\n//   useEffect(() => {\n//     const darkMode = theme === 'system' ? systemColorScheme === 'dark' : theme === 'dark';\n//     setIsDarkMode(darkMode);\n//   }, [theme, systemColorScheme]);\n\n//   // Extend default themes with custom colors\n//   const extendedDarkTheme = {\n//     ...DarkTheme,\n//     colors: {\n//       ...DarkTheme.colors,\n//       ...customDarkTheme,\n//     },\n//   };\n\n//   const extendedLightTheme = {\n//     ...DefaultTheme,\n//     colors: {\n//       ...DefaultTheme.colors,\n//       ...customLightTheme,\n//     },\n//   };\n\n//   const currentTheme = theme === 'custom' && customColors\n//     ? { ...DefaultTheme, colors: { ...customColors } } // Use custom colors for custom theme\n//     : isDarkMode\n//     ? extendedDarkTheme\n//     : extendedLightTheme;\n\n//   // Update the theme and custom colors and save to storage\n//   const setTheme = (newTheme: ThemeMode, newCustomColors?: any) => {\n//     setThemeState(newTheme);\n//     if (newCustomColors) {\n//       setCustomColors(newCustomColors);\n//     }\n//   };\n\n//   return (\n//     <ThemeContext.Provider value={{ theme, setTheme, isDarkMode, colors: currentTheme.colors }}>\n//       <NavigationThemeProvider value={currentTheme}>\n//         {children}\n//       </NavigationThemeProvider>\n//     </ThemeContext.Provider>\n//   );\n// };\n\n\n\n","import { StyleSheet } from \"react-native\";\nimport React, { useEffect } from \"react\";\n// import { useAuth } from \"@/contexts/AuthContext\";\nimport { Stack } from \"expo-router\";\n// import { useMankindProduct } from \"@/contexts/MankindProductContext\";\n\nexport const AuthLayoutContent = () => {\n  return (\n      <Stack\n        screenOptions={{\n          headerShown: false, // Hide headers globally\n        }}\n      >\n        <Stack.Screen\n          name=\"welcome\"\n          options={{\n            // headerShown: false,\n            presentation: \"fullScreenModal\", // Full-screen modal presentation\n          }}\n        />\n        <Stack.Screen\n          name=\"login\"\n          options={{\n            presentation: \"fullScreenModal\", // Full-screen modal presentation\n          }}\n        />\n        <Stack.Screen\n          name=\"register\"\n          options={{\n            presentation: \"fullScreenModal\", // Full-screen modal presentation\n          }}\n        />\n      </Stack>\n    );\n\n};\n\nexport default AuthLayoutContent;\n\nconst styles = StyleSheet.create({});\n","import React, { useEffect } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { router } from 'expo-router';\nimport { useTheme } from '@react-navigation/native'; // Assuming this is from react-navigation\n\nexport const BannerVOne = () => {\n  const { colors } = useTheme(); // Directly access colors from the theme\n\n  useEffect(() => {\n    console.log('Current Theme Colors:', colors); // Debugging theme colors\n  }, [colors]);\n\n  const styles = createStyles(colors); // Pass colors directly to the styles function\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.bannerSection}>\n        <Text style={styles.bannerTitle}>Customize Your Experience</Text>\n        <Text style={styles.bannerSubtitle}>\n          Manage your preferences, update account settings, and explore options to tailor your experience to your needs, even things like dark mode.\n        </Text>\n        <TouchableOpacity\n          style={{ flexDirection: 'row' }}\n          onPress={() => router.push('/appearance' as never)}\n        >\n          <Text style={styles.editPreferences}>Dark Mode</Text>\n          <Ionicons name=\"arrow-forward\" size={15} color={colors.primary} style={styles.arrow} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst createStyles = (colors: any) => {\n  return StyleSheet.create({\n    container: {\n      padding: 20, // Ensure padding to prevent overlapping issues\n    },\n    bannerSection: {\n      backgroundColor: colors.background,\n      borderRadius: 15,\n      padding: 20,\n      marginBottom: 20,\n    },\n    bannerTitle: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: colors.title,\n      marginBottom: 10,\n    },\n    bannerSubtitle: {\n      fontSize: 14,\n      color: colors.subtitle || colors.title, // Use subtitle if available, otherwise fallback to text color\n      marginBottom: 20,\n    },\n    editPreferences: {\n      fontSize: 14,\n      color: colors.title,\n      fontWeight: 'bold',\n    },\n    arrow: {\n      marginLeft: 10,\n      marginTop: 3,\n    },\n  });\n};\n\nexport default BannerVOne;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect } from 'react';\n// import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { router } from 'expo-router';\n// import { useTheme } from '@/contexts/ThemeContext'; // Import your custom ThemeProvider\n\n// export const BannerVOne = () => {\n//   const { isDarkMode, themeValue } = useTheme(); // Access the current theme context\n\n//   // Ensure that themeValue is correctly passed and contains the necessary values\n//   useEffect(() => {\n//     console.log('themeValue:', themeValue); // Log theme values for debugging\n//     console.log('isDarkMode:', isDarkMode); // Log dark mode state for debugging\n//   }, [themeValue, isDarkMode]);\n\n//   //// If the theme is not ready, show a fallback message\n//   // if (!themeValue || !themeValue.dark || !themeValue.light) {\n//   //   return (\n//   //     <View style={{ padding: 20 }}>\n//   //       <Text>Loading theme...</Text>\n//   //     </View>\n//   //   );\n//   // }\n\n//   const styles = createStyles(isDarkMode, themeValue); // Pass theme data to the styles function\n\n//   return (\n//     <View style={styles.container}>\n//       <View style={styles.bannerSection}>\n//         <Text style={styles.bannerTitle}>Customize Your Experience</Text>\n//         <Text style={styles.bannerSubtitle}>\n//           Manage your preferences, update account settings, and explore options to tailor your experience to your needs, even things like dark mode.\n//         </Text>\n//         <TouchableOpacity\n//           style={{ flexDirection: 'row' }}\n//           onPress={() => router.push('/appearance' as never)}\n//         >\n//           <Text style={styles.editPreferences}>Dark Mode</Text>\n//           <Ionicons name=\"arrow-forward\" size={15} color={styles.arrow.color} style={styles.arrow} />\n//         </TouchableOpacity>\n//       </View>\n//     </View>\n//   );\n// };\n\n// const createStyles = (isDarkMode: boolean, themeValue: any) => {\n//   return StyleSheet.create({\n//     container: {\n//       padding: 20, // Ensure padding to prevent overlapping issues\n//     },\n//     bannerSection: {\n//       backgroundColor: isDarkMode ? themeValue.dark.background : themeValue.light.background,\n//       borderRadius: 15,\n//       padding: 20,\n//       marginBottom: 20,\n//     },\n//     bannerTitle: {\n//       fontSize: 18,\n//       fontWeight: 'bold',\n//       color: isDarkMode ? themeValue.dark.text : themeValue.light.text,\n//       marginBottom: 10,\n//     },\n//     bannerSubtitle: {\n//       fontSize: 14,\n//       color: isDarkMode ? themeValue.dark.subtitle : themeValue.light.subtitle,\n//       marginBottom: 20,\n//     },\n//     editPreferences: {\n//       fontSize: 14,\n//       color: isDarkMode ? themeValue.dark.text : themeValue.light.text,\n//       fontWeight: 'bold',\n//     },\n//     arrow: {\n//       marginLeft: 10,\n//       marginTop: 3,\n//       color: isDarkMode ? themeValue.dark.icon : themeValue.light.icon,\n//     },\n//   });\n// };\n\n// export default BannerVOne;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { router } from 'expo-router';\n// import { useTheme } from '@/contexts/ThemeContext'; // Import your custom ThemeProvider\n\n// export const BannerVOne = () => {\n//   const { isDarkMode, themeValue } = useTheme(); // Access the current theme context\n\n//   // Ensure that themeValue is correctly passed and contains the necessary values\n//   if (!themeValue || !themeValue.dark || !themeValue.light) {\n//     console.log(themeValue)\n//     console.log(themeValue.dark)\n//     console.log(themeValue.light)\n//     return null; // Return nothing or a loading indicator if themeValue is not ready\n//   }\n\n//   const styles = createStyles(isDarkMode, themeValue); // Pass theme data to the styles function\n\n//   return (\n//     <View style={styles.container}>\n//       <View style={styles.bannerSection}>\n//         <Text style={styles.bannerTitle}>Customize Your Experience</Text>\n//         <Text style={styles.bannerSubtitle}>\n//           Manage your preferences, update account settings, and explore options to tailor your experience to your needs, even things like dark mode.\n//         </Text>\n//         <TouchableOpacity\n//           style={{ flexDirection: 'row' }}\n//           onPress={() => router.push('/appearance' as never)}\n//         >\n//           <Text style={styles.editPreferences}>Dark Mode</Text>\n//           <Ionicons name=\"arrow-forward\" size={15} color={styles.arrow.color} style={styles.arrow} />\n//         </TouchableOpacity>\n//       </View>\n//     </View>\n//   );\n// };\n\n// export default BannerVOne;\n\n// const createStyles = (isDarkMode: boolean, themeValue: any) => {\n//   return StyleSheet.create({\n//     container: {\n//       // Add any container styling here\n//     },\n//     bannerSection: {\n//       backgroundColor: isDarkMode ? themeValue.dark.background : themeValue.light.background,\n//       borderRadius: 15,\n//       padding: 20,\n//       marginBottom: 20,\n//     },\n//     bannerTitle: {\n//       fontSize: 18,\n//       fontWeight: 'bold',\n//       color: isDarkMode ? themeValue.dark.text : themeValue.light.text,\n//       marginBottom: 10,\n//     },\n//     bannerSubtitle: {\n//       fontSize: 14,\n//       color: isDarkMode ? themeValue.dark.subtitle : themeValue.light.subtitle,\n//       marginBottom: 20,\n//     },\n//     editPreferences: {\n//       fontSize: 14,\n//       color: isDarkMode ? themeValue.dark.text : themeValue.light.text,\n//       fontWeight: 'bold',\n//     },\n//     arrow: {\n//       marginLeft: 10,\n//       marginTop: 3,\n//       color: isDarkMode ? themeValue.dark.icon : themeValue.light.icon,\n//     },\n//   });\n// };\n\n\n\n\n\n\n\n\n\n\n\n// NOT DARK MODE\n// import { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\n// import React from 'react'\n// // import { COLORS } from '@/utils/theme'\n// import { Ionicons } from '@expo/vector-icons';\n// import { router } from 'expo-router';\n// import { COLORS } from '@/utils/theme';\n\n// {/* Banner Section */}\n\n// export const BannerVOne = () => {\n//   return (\n//     <View style={styles.container}>\n//         <View style={styles.bannerSection}>\n//           <Text style={styles.bannerTitle}>Customize Your Experience</Text>\n//           <Text style={styles.bannerSubtitle}>\n//           Manage your preferences, update account settings, and explore options to tailor your experience to your needs, even things like dark mode.\n//           </Text>\n//           <TouchableOpacity style={{ flexDirection: 'row',}} onPress={() => router.push('/appearance' as never)}>\n//           <Text style={styles.editPreferences}>Dark Mode</Text>\n//           <Ionicons name=\"arrow-forward\" size={15} color=\"white\" style={styles.arrow} />\n//           </TouchableOpacity>\n//         </View>\n//         </View>\n//   )\n// }\n\n// export default BannerVOne\n\n// const styles = StyleSheet.create({\n//     container: {\n//         // padding:16\n//     },\n//     bannerSection: {\n//       backgroundColor: '#1C1C1E',\n//       borderRadius: 15,\n//       padding: 20,\n//       marginBottom: 20,\n//     },\n//     bannerTitle: {\n//       fontSize: 18,\n//       fontWeight: 'bold',\n//       color: '#FFFFFF',\n//       marginBottom: 10,\n//     },\n  \n//     bannerSubtitle: {\n//       fontSize: 14,\n//       color: COLORS.gray3,\n//       marginBottom: 20,\n//     },\n  \n//     editPreferences: {\n//       fontSize: 14,\n//       color: COLORS.white,\n//       fontWeight: 'bold',\n//     },\n    \n//     arrow : {\n//       marginLeft: 10,\n//       marginTop: 3,\n//     },\n//   });\n","import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';\nimport {  MyButtonProps } from '../interfaces/MyButtonProps';\n\n\n\nexport const MyButton: React.FC<MyButtonProps> = ({ onPress, title, buttonStyle, textStyle }) => {\n  return (\n    <TouchableOpacity style={[styles.button, buttonStyle]} onPress={onPress}>\n      <Text style={[styles.text, textStyle]}>{title}</Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default MyButton;\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#FF6F61',\n    padding: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#FFF',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n","import { Dimensions } from \"react-native\";\nconst { height , width } = Dimensions.get('window')\n\nconst tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\n\nconst COLORS = {\n  light: {\n    text: '#000000',\n    background: '#FFFFFF',\n    tint: '#0504aa', // Royal blue\n    tabIconDefault: '#CCCCCC',\n    tabIconSelected: '#0504aa',\n    cardBackground: '#FFFFFF',\n    cardText: '#000000',\n    cardSecondaryText: '#83829A',  // Gray\n    cardPrice: '#000000',\n    cardBorder: '#E0E0E0',\n  },\n  dark: {\n    text: '#FFFFFF',\n    background: '#000000',\n    tint: '#FFFFFF',\n    tabIconDefault: '#CCCCCC',\n    tabIconSelected: '#FFFFFF',\n    cardBackground: '#1C1C1E',  // Darker shade for cards in dark mode\n    cardText: '#FFFFFF',\n    cardSecondaryText: '#B0B0B0',  // Lighter gray\n    cardPrice: '#FFFFFF',\n    cardBorder: '#444444',  // Darker border for dark mode\n  },\n  primary: \"#3f5a36\",\n  secondary: \"#DDF0FF\",\n  tertiary: \"#FF7754\",\n  darkGray: '#333333',\n  green: '#8BC34A',\n  forestGreen: '#3f5a36',\n  lightGray: \"#F5F5F5\",\n  gray: \"#83829A\",\n  gray2: \"#C1C0C8\",\n  gray3: \"#d3d3d3\",\n  offwhite: \"#F3F4F8\",\n  white: \"#FFFFFF\",\n  black: \"#000000\",\n  blue: \"#0504aa\",  // Royal blue\n  red: \"#E81E4D\",\n  orange: \"#FF5733\",\n  lightWhite: \"#FAFAFC\",\n  backgroundLight: \"#F0F0F3\",\n  backgroundMedium: \"#B9B9B9\",\n  backgroundDark: \"#77777\",\n};\n\n\n\n\nconst SIZES = {\n    xSmall: 10,\n    small: 12,\n    medium: 16,\n    large: 20,\n    xLarge: 24,\n    xxLarge: 44,\n    height,\n    width\n}\n\nconst SHADOWS = {\n    small: {\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 2\n    },\n    medium: {\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 5.84,\n        elevation: 5\n    }\n}\n\nexport { COLORS, SIZES, SHADOWS }","const CURRENCY_FORMATTER = new Intl.NumberFormat(undefined, {\n    currency: 'USD',\n    style: 'currency'\n});\n\nexport function convertToCurrency(number: number) {\n    return CURRENCY_FORMATTER.format(number);\n}\n\nexport default convertToCurrency;","\n\n\n\nexport const CONSTANTS = {\n    appName: \"\",\n    holderImageWelcome: 'https://appsformankind-assets.s3.amazonaws.com/Collections/Furniture/Furniture_1.jpg', \n    holderImageProductCard: 'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/boil-sea-moss.jpg', \n    holderImageCollectionCard: 'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/gel.jpg', \n    holderImageOrderCard: 'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/Irish_Sea_Moss.jpeg', \n    holderUserImage: 'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/moss.jpg', \n    \n    holderCarouselImageOne: 'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/rock.jpg', \n    holderCarouselImageTwo: 'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/seaweed.jpg', \n    holderCarouselImageThree:'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/waterfall.jpg', \n    holderImage: 'https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/seamoss.jpg', \n    \n  //  mankind_store_id: \"DF6598F7\",\n   // store_id: \"DF6598F7\", // \"P5V8A9ZE\",  \n    merchant_id: `merchant.com.dhuntleyinc.DevelopingAppsForMankind`,\n    publishableKeyLive: \"pk_live_51NVCh3JEHBX7gOQA7dW8kmXYPiToufrHpDzRZQ1vhxtUoNXrYXPWtMpELdWetWJhm6Wohk8PXc2ZF1UGfaBOFJl100GZWU6atY\",\n    publishableKeyTest: \"pk_test_51NVCh3JEHBX7gOQAjIjvMGNaHPmbWJov3iFEoLLOUS8oKf9wXowSES3piwS8AB57ml3ejDE1ZNf2tGyzMj7D0GlE007Ms2N4me\",\n         \n}\n\n","import { StyleSheet, Text, View , Image, TouchableOpacity} from 'react-native'\nimport React, { FC } from 'react'\n// import { OrderModelProps } from '../../models/OrderModelProps';\nimport { useNavigation } from '@react-navigation/native';\nimport { COLORS, SHADOWS, SIZES } from '@/utils/theme';\nimport convertToCurrency from '@/hooks/convertToCurrency';;\nimport { CONSTANTS } from '@/utils/constants';\nimport { OrderModelProps } from '@/models/OrderModelProps';\n// import { OrderModelProps } from '@/app/models/OrderModelProps';\n\nconst OrderCrudCard: FC<OrderModelProps> = (item) => {\n    const navigation = useNavigation();\n    \n    return (\n    <View>\n        \n        {/* @ts-ignore */}\n        <TouchableOpacity style={styles.container} onPress={() => navigation.navigate(\"EditOrder\" , { item })}>\n\n            <View style={styles.image}>\n                <Image source={{uri: CONSTANTS.holderImageOrderCard }} style={styles.orderImg} />\n            </View>\n            <View style={styles.textContainer}>\n                <Text style={styles.orderTitle}>{item.title}</Text>\n                <Text style={styles.supplier}>{convertToCurrency(item.total)}</Text>\n            </View>\n        </TouchableOpacity>\n    </View>\n  )\n}\n\nexport default OrderCrudCard\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginBottom: SIZES.small,\n        flexDirection: \"row\",\n        padding: SIZES.medium,\n        borderRadius: SIZES.small,\n        backgroundColor: \"#fff\",\n        ...SHADOWS.medium,\n        shadowColor: COLORS.lightWhite,\n        // height: 120\n    },\n    image: {\n        width: 70,\n        backgroundColor: COLORS.secondary,\n        borderRadius: SIZES.medium,\n        justifyContent: \"center\",\n        alignContent: \"center\"\n    },\n    orderImg: {\n        width: '100%',\n        height: 65,\n        borderRadius: SIZES.small,\n        resizeMode: \"cover\"\n    },\n    textContainer: {\n        flex: 1,\n        marginHorizontal: SIZES.medium\n    },\n    orderTitle: {\n        fontSize: SIZES.medium,\n        fontFamily: \"bold\",\n        color: COLORS.primary\n\n    },\n    supplier: {\n        fontSize: SIZES.small + 2,\n        fontFamily: \"bold\",\n        color: COLORS.gray,\n        marginTop: 3\n\n    }\n})","export const VERSION = 0.01;\n\nexport const STORE_TYPE = {\n  ecom: 'ecom',\n  blog: 'blog',\n  subscription: 'subscription',\n  appointment: 'appointment',\n};\n\n// AWS \n\nexport const API_ID = \"yiiuqhh3a3\"\nexport const BASE_URL =  `https://${API_ID}.execute-api.us-east-1.amazonaws.com/prod`\n\n\nexport const AWS_BASE_IMAGE = `https://${process.env.VITE_S3_ASSET_BUCKET_NAME}.s3.amazonaws.com`;\nexport const AWS_HOLDER_IMAGE = `https://appsformankind-assets.s3.amazonaws.com/Products/appoint/Flowers.png`\nexport const AWS_BASE_URL = `https://yiiuqhh3a3.execute-api.us-east-1.amazonaws.com/prod`;\n\nexport const AWS_BASE_URL_2 = `https://${process.env.VITE_API_ID_2}.execute-api.${\n  process.env.VITE_REGION\n}.amazonaws.com/prod`;\n\n\nexport const AWS_VERIFY = `https://${process.env.VITE_API_ID}.execute-api.${\n  process.env.VITE_REGION\n}.amazonaws.com/prod/verify`;\n\nexport const AWS_LOGIN_URL = `https://${process.env.VITE_API_ID}.execute-api.${\n  process.env.VITE_REGION\n}.amazonaws.com/prod/login`;\n\n\nexport const AWS_ORDERS_URL = `https://${process.env.VITE_API_ID}.execute-api.${\n  process.env.VITE_REGION\n}.amazonaws.com/prod/login`;\n\nexport const AWS_SUBSCRIBER_URL = `https://${process.env.VITE_API_ID}.execute-api.${\n  process.env.VITE_REGION\n}.amazonaws.com/prod/subscriber`;\n\n","// import * as SecureStore from 'expo-secure-store';\n// import { getAuthToken } from './getAuthToken';\n\n// // Fetch client alternative to Axios\n// export function createFetchClient(\n//   baseURL: string,\n//   defaultParams: Record<string, string | number>,\n//   defaultHeaders: Record<string, string>\n// ) {\n//   const fetchClient = async <T = any>(\n//     endpoint: string,\n//     options: RequestInit & { params?: Record<string, string | number> } = {}\n//   ): Promise<T> => {\n//     const baseHasProd = baseURL.includes('/prod');\n//     const normalizedBaseURL = baseHasProd ? baseURL : `${baseURL}/prod`;\n//     const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n//     const url = new URL(`${normalizedBaseURL}${normalizedEndpoint}`);\n\n//     // Add default params and any options params to URL\n//     const params = new URLSearchParams();\n//     Object.entries(defaultParams).forEach(([key, value]) => {\n//       params.append(key, String(value));\n//     });\n//     if (options.params) {\n//       Object.entries(options.params).forEach(([key, value]) => {\n//         params.append(key, String(value));\n//       });\n//     }\n//     url.search = params.toString();\n\n//     // Add headers\n//     const token = await getAuthToken();\n//     const headers = new Headers({\n//       ...defaultHeaders,\n//       //authentication:  token ? `${token}` : '', \n//      //  Authorization: token ? `${token}` : '', // Changed Authentication to Authorization for correctness\n//       ...options.headers,\n//     });\n\n//     // Log request details for debugging\n//     console.log(\"Full Request URL:\", url.toString());\n//     console.log(\"Request Headers:\", Object.fromEntries(headers.entries()));\n//     if (options.body) {\n//       console.log(\"Request Body:\", options.body);\n//     }\n\n//     // Make the fetch request\n//     const response = await fetch(url.toString(), {\n//       ...options,\n//       headers,\n//     });\n\n//     // Handle response errors\n//     if (!response.ok) {\n//       const errorData = await response.json().catch(() => ({}));\n//       throw new Error(`HTTP error! Status: ${response.status}, ${JSON.stringify(errorData)}`);\n//     }\n\n//     // Return the JSON response\n//     return response.json();\n//   };\n\n//   return {\n//     get: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n//       fetchClient<T>(endpoint, { ...options, method: 'GET' }),\n\n//     post: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) => {\n//       console.log(\"Body before sending POST:\", body); // Log the body before sending\n//       return fetchClient<T>(endpoint, { ...options, method: 'POST', body: JSON.stringify(body) });\n//     },\n\n//     put: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n//       fetchClient<T>(endpoint, { ...options, method: 'PUT', body: JSON.stringify(body) }),\n\n//     patch: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) => {\n//       console.log(\"Body before sending PATCH:\", body); // Log the body before sending\n//       return fetchClient<T>(endpoint, { ...options, method: 'PATCH', body: JSON.stringify(body) });\n//     },\n\n//     delete: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n//       fetchClient<T>(endpoint, { ...options, method: 'DELETE' }),\n//   };\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport function createFetchClient(\n  baseURL: string,\n  defaultParams: Record<string, string | number>,\n  defaultHeaders: Record<string, string>\n) {\n  const fetchClient = async <T = any>(\n    endpoint: string,\n    options: RequestInit & { params?: Record<string, string | number> } = {}\n  ): Promise<T> => {\n    const baseHasProd = baseURL.includes('/prod');\n    const normalizedBaseURL = baseHasProd ? baseURL : `${baseURL}/prod`;\n    const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n    const url = new URL(`${normalizedBaseURL}${normalizedEndpoint}`);\n\n    const params = new URLSearchParams();\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      params.append(key, String(value));\n    });\n\n    if (options.params) {\n      Object.entries(options.params).forEach(([key, value]) => {\n        params.append(key, String(value));\n      });\n    }\n    url.search = params.toString();\n\n    const headers = new Headers({\n      ...defaultHeaders,\n      ...options.headers,\n    });\n\n    // Log the full URL and request details\n    console.log(\"Full Request URL:\", url.toString());\n    console.log(\"Request Headers:\", headers);\n\n    if (options.body) {\n      console.log(\"Request Body:\", options.body); // Log the body being sent\n    }\n\n    const response = await fetch(url.toString(), {\n      ...options,\n      headers,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(`HTTP error! Status: ${response.status}, ${JSON.stringify(errorData)}`);\n    }\n\n    return response.json();\n  };\n\n  return {\n    get: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n      fetchClient<T>(endpoint, { ...options, method: 'GET' }),\n\n    post: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) => {\n      console.log(\"Body before sending:\", body); // Log the body before sending\n      return fetchClient<T>(endpoint, { ...options, method: 'POST', body: JSON.stringify(body) });\n    },\n\n     patch: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) => {\n       console.log(\"Body before sending PATCH:\", body); // Log the body before sending\n       return fetchClient<T>(endpoint, { ...options, method: 'PATCH', body: JSON.stringify(body) });\n     },\n\n\n    put: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n      fetchClient<T>(endpoint, { ...options, method: 'PUT', body: JSON.stringify(body) }),\n\n    delete: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n      fetchClient<T>(endpoint, { ...options, method: 'DELETE' }),\n  };\n}\n\n\n\n\n// // src/util/createFetchClient.ts\n// export function createFetchClient(\n//   baseURL: string,\n//   defaultParams: Record<string, string | number>,\n//   defaultHeaders: Record<string, string>\n// ) {\n//   const fetchClient = async <T = any>(\n//     endpoint: string,\n//     options: RequestInit & { params?: Record<string, string | number> } = {}\n//   ): Promise<T> => {\n//     const baseHasProd = baseURL.includes('/prod');\n//     const normalizedBaseURL = baseHasProd ? baseURL : `${baseURL}/prod`;\n//     const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n//     const url = new URL(`${normalizedBaseURL}${normalizedEndpoint}`);\n\n//     const params = new URLSearchParams();\n//     Object.entries(defaultParams).forEach(([key, value]) => {\n//       params.append(key, String(value));\n//     });\n\n//     if (options.params) {\n//       Object.entries(options.params).forEach(([key, value]) => {\n//         params.append(key, String(value));\n//       });\n//     }\n//     url.search = params.toString();\n\n//     const headers = new Headers({\n//       ...defaultHeaders,\n//       ...options.headers,\n//     });\n\n//     const response = await fetch(url.toString(), {\n//       ...options,\n//       headers,\n//     });\n\n//     if (!response.ok) {\n//       const errorData = await response.json().catch(() => ({}));\n//       throw new Error(`HTTP error! Status: ${response.status}, ${JSON.stringify(errorData)}`);\n//     }\n\n//     return response.json();\n//   };\n\n//   return {\n//     get: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n//       fetchClient<T>(endpoint, { ...options, method: 'GET' }),\n\n//     post: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n//       fetchClient<T>(endpoint, { ...options, method: 'POST', body: JSON.stringify(body) }),\n\n//     put: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n//       fetchClient<T>(endpoint, { ...options, method: 'PUT', body: JSON.stringify(body) }),\n\n//     delete: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n//       fetchClient<T>(endpoint, { ...options, method: 'DELETE' }),\n//   };\n// }\n","import { TOKEN_KEY } from '@/contexts/AuthContext';\n// import * as SecureStore from 'expo-secure-store';\n\n// // Helper function to get the Authentication token\n// export const getAuthToken = async (): Promise<string | null> => {\n//     return await SecureStore.getItemAsync(TOKEN_KEY);\n//   };\n  \nimport * as SecureStore from 'expo-secure-store';\n\nexport const getAuthToken = async () => {\n  try {\n    const token = await SecureStore.getItemAsync(TOKEN_KEY);\n    if (!token) {\n      throw new Error('No token found');\n    }\n    console.log('token is active');\n\n    return token;\n  } catch (error) {\n    console.error('Error fetching auth token:', error);\n    throw new Error('Unable to retrieve authentication token');\n  }\n};\n","import * as SecureStore from 'expo-secure-store';\nimport { UserProps } from \"../models/UserProps\";\nimport { BASE_URL } from \"../utils/api\";\nimport { createFetchClient } from \"../utils/createFetchClient\";\nimport { getAuthToken } from '@/utils/getAuthToken';\n\n// Create a fetch client instance\n// export const authApi = createFetchClient(\n//   BASE_URL,\n//   {},{}\n// );\n\n// Create a fetch client instance\nexport const authApi = createFetchClient(\n  BASE_URL,\n  {\n    tableName: 'prof-website-user-table',\n    showFilteredItems: 'true',\n  },\n  {\n    'Content-Type': 'application/json',\n  }\n);\n\n\n\n// API Calls\n\n// Verify user API\nexport const verify = async (user: any) => {\n  const token = await getAuthToken();\n  return await authApi.post('/verify', user, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// Login API with token-based Authentication\nexport const login = async (user: UserProps) => {\n  // Create the request body using the user object properties\n  const body = {\n    email: user.email,\n    password: user.password,\n  };\n\n  // Perform the login request and return the result\n  return await authApi.post(\"/login\", body, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    }\n  });\n};\n\n// Get users API\nexport const getUsersApi = async () => {\n  const token = await getAuthToken();\n  return await authApi.get('/users', {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// Get client users by store ID and email\nexport const getClientUsersApi = async (storeID: string, email: string) => {\n  try {\n    const token = await getAuthToken();\n    const response = await authApi.get('/users', {\n      params: {\n        store_id: storeID,\n        email: email,\n      },\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    console.log(response);\n    return response;\n  } catch (error) {\n    console.error('Error fetching client users:', error);\n    throw error;\n  }\n};\n\n// Update user API\nexport const updateUserApi = async (\n  userEmail: string,\n  tableName: string,\n  updateKey: string,\n  updateValue: any\n) => {\n  const token = await getAuthToken();\n\n  const body = {\n    email: userEmail,\n    tableName: tableName,\n    updateKey: updateKey,\n    updateValue: updateValue,\n  };\n\n  return await authApi.patch(`/user`, body, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n\n// Delete user API\nexport const deleteUserApi = async ({ id }: { id: any }) => {\n  const token = await getAuthToken();\n  return await authApi.delete(`/user`, {\n    params: { id },\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import * as SecureStore from 'expo-secure-store';\n// import { UserProps } from \"../models/UserProps\";\n// import { BASE_URL } from \"../utils/api\";\n// import { createFetchClient } from \"../utils/createFetchClient\";\n// import { getAuthToken } from '@/utils/getAuthToken';\n\n// // Create a fetch client instance\n// export const authApi = createFetchClient(\n//   BASE_URL,\n//   {},{}\n//   // {\n//   //   tableName: 'prof-website-user-table',\n//   //   showFilteredItems: 'true',\n//   // },\n//   // {\n//   //   'Content-Type': 'application/json',\n//   // }\n// );\n\n\n// // API Calls\n\n// // Verify user API\n// export const verify = async (user: any) => {\n//   const token = await getAuthToken();\n//   return await authApi.post('/verify', user, {\n//     headers: {\n//       Authentication: `${token}`,\n//     },\n//   });\n// };\n\n// // Login API with token-based Authentication\n// export const login = async (user: UserProps) => {\n//   const authApi = createFetchClient(\n//     BASE_URL,\n//     { tableName: \"prof-website-user-table\" },\n//     { \"Content-Type\": \"application/json\" }\n//   );\n\n//   // Create the request body using the user object properties\n//   const body = {\n//     email: user.email,\n//     password: user.password,\n//   };\n\n//   // Perform the login request and return the result\n//   return await authApi.post(\"/login\", body);\n// };\n\n// // Get users API\n// export const getUsersApi = async () => {\n//   const token = await getAuthToken();\n//   return await authApi.get('/users', {\n//     headers: {\n//       Authentication: `${token}`,\n\n//     },\n//   });\n// };\n\n// // Get client users by store ID and email\n// export const getClientUsersApi = async (storeID: string, email: string) => {\n//   try {\n//     const token = await getAuthToken();\n//     const response = await authApi.get('/users', {\n//       params: {\n//         store_id: storeID,\n//         email: email, // Pass the email parameter here\n//       },\n//       headers: {\n//         Authentication: `${token}`,\n//       },\n//     });\n//     console.log(response);\n//     return response; // Return the data from the response\n//   } catch (error) {\n//     console.error('Error fetching client users:', error);\n//     throw error; // Rethrow the error after logging it\n//   }\n// };\n\n\n// // Update user API\n// export const updateUserApi = async (\n//   userEmail: string,\n//   tableName: string,\n//   updateKey: string,\n//   updateValue: any\n// ) => {\n//   const token = await getAuthToken();\n\n//   // Construct the body for the API call\n//   const body = {\n//     email: userEmail,\n//     tableName: tableName, // Example: \"prof-website-product-table\"\n//     updateKey: updateKey, // The key that needs to be updated, e.g. \"on_sale\"\n//     updateValue: updateValue, // The new value for the key, e.g. true or false\n//   };\n\n//   return await authApi.patch(`/user`, body, {\n//     headers: {\n//       authorization: `${token}`,  // Ensure this is correctly formatted\n\n//       // Authentication: `${token}`,\n//       \"Content-Type\": \"application/json\", // Properly added Content-Type\n//     },\n//   });\n// };\n\n\n\n\n// // Delete user API\n// export const deleteUserApi = async ({ id }: { id: any }) => {\n//   const token = await getAuthToken();\n//   console.log(id);\n//   return await authApi.delete(`/user`, {\n//     params: { id },\n//     headers: {\n//       Authentication: `${token}`,\n//     },\n//   });\n// };\n\n\n\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from \"react\";\nimport * as SecureStore from \"expo-secure-store\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { UserProps } from \"../models/UserProps\";\nimport { authApi } from \"@/api/authentication\";\nimport { getAuthToken } from \"@/utils/getAuthToken\";\n\n// Define the AuthState and Context types\ninterface AuthState {\n  user: UserProps | null;\n  token: string | null;\n  authenticated: boolean;\n}\n\ninterface AuthContextType {\n  authState: AuthState;\n  onRegister: (storeID: string, user: UserProps) => Promise<any>;\n  onLogin: (storeID: string, email: string, password: string) => Promise<any>;\n  onLogout: () => Promise<void>;\n  // updateUserItems: (updates: Partial<UserProps>) => Promise<void>;\n  updateSingleUserItem: (\n    updateKey: keyof UserProps,\n    updateValue: any\n  ) => Promise<void>;\n  addToFavorites: (itemId: string) => Promise<void>;\n  removeFromFavorites: (itemId: string) => Promise<void>;\n  isFavorite: (itemId: string) => boolean;\n}\n\n// Define constants for SecureStore keys\nexport const TOKEN_KEY = \"your_token_key_here\";\nconst USER_KEY = \"your_user_key_here\";\nconst AUTHENTICATED_KEY = \"authenticated_key_here\";\n\n// Create AuthContext\nexport const AuthContext = createContext<AuthContextType | undefined>(\n  undefined\n);\n\n// Hook to use AuthContext\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\n// AuthProvider component\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    token: null,\n    authenticated: false,\n  });\n\n  const [loading, setLoading] = useState(true);\n\n  // Load user data from SecureStore on component mount\n  useEffect(() => {\n    const loadUserData = async () => {\n      try {\n        setLoading(true);\n        const token = await SecureStore.getItemAsync(TOKEN_KEY);\n        const userString = await SecureStore.getItemAsync(USER_KEY);\n        const authenticated = await SecureStore.getItemAsync(AUTHENTICATED_KEY);\n\n        if (token && userString && authenticated === \"true\") {\n          const user = JSON.parse(userString);\n          setAuthState({ user, token, authenticated: true });\n        } else {\n          setAuthState({ user: null, token: null, authenticated: false });\n        }\n      } catch (error) {\n        console.error(\"Error loading user data:\", error);\n        setAuthState({ user: null, token: null, authenticated: false });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUserData();\n  }, []);\n\n  // Register function\n  const onRegister = useCallback(\n    async (storeID: string, userData: UserProps): Promise<any> => {\n      try {\n        const result = await authApi.post(\"/register\", userData, {\n          params: { store_id: storeID },\n        });\n        return result;\n      } catch (error: any) {\n        console.error(\"Registration error:\", error);\n        throw new Error(\n          error.response?.data?.msg || \"Registration failed. Please try again.\"\n        );\n      }\n    },\n    []\n  );\n\n  // Login function\n  const onLogin = useCallback(\n    async (storeID: string, email: string, password: string): Promise<any> => {\n      try {\n        const result = await authApi.post(\n          \"/login\",\n          { email, password },\n          {\n            params: { store_id: storeID },\n          }\n        );\n\n        const { user, token } = result;\n        await SecureStore.setItemAsync(TOKEN_KEY, token);\n        await SecureStore.setItemAsync(USER_KEY, JSON.stringify(user));\n        await SecureStore.setItemAsync(AUTHENTICATED_KEY, \"true\");\n\n        setAuthState({ user, token, authenticated: true });\n        return result;\n      } catch (error: any) {\n        console.error(\"Login error:\", error);\n        throw new Error(\n          error.response?.data?.msg || \"Login failed. Please try again.\"\n        );\n      }\n    },\n    []\n  );\n\n  // Logout function\n  const onLogout = useCallback(async (): Promise<void> => {\n    try {\n      await SecureStore.deleteItemAsync(TOKEN_KEY);\n      await SecureStore.deleteItemAsync(USER_KEY);\n      await SecureStore.deleteItemAsync(AUTHENTICATED_KEY);\n      setAuthState({ user: null, token: null, authenticated: false });\n      await AsyncStorage.removeItem(\"carts\");\n      console.log(\"User logged out successfully.\");\n    } catch (error) {\n      console.error(\"Error logging out:\", error);\n      throw new Error(\"Logout failed. Please try again.\");\n    }\n  }, []);\n\n  \n\n  const updateSingleUserItem = useCallback(\n    async (updateKey: keyof UserProps, updateValue: any) => {\n      if (!authState.user) throw new Error(\"No user to update\");\n    \n      try {\n        const body = {\n          email: authState?.user.email ?? \"\",\n          tableName: \"prof-website-user-table\",\n          updateKey: updateKey as string,\n          updateValue: updateValue,\n        };\n  \n        const token = await getAuthToken();\n        console.log(`token: ${token}`);\n        \n        const result = await authApi.patch(`/user`, body, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n    \n        console.log(\"User profile updated successfully:\", body);\n    \n        // Dynamically update the key in authState.user\n        const updatedUser = {\n          ...authState.user,\n          [updateKey]: updateValue, // Dynamic key update\n        };\n    \n        await SecureStore.setItemAsync(USER_KEY, JSON.stringify(updatedUser));\n        setAuthState((prevState) => ({ ...prevState, user: updatedUser }));\n      } catch (error: any) {\n        console.error(\"Failed to update user profile:\", error);\n        throw new Error(\n          error.response?.data?.msg || \"Failed to update user profile.\"\n        );\n      }\n    },\n    [authState.user]\n  );\n  \n\n  // Add item to favorites\n  const addToFavorites = useCallback(\n    async (itemId: string) => {\n      if (!authState.user) throw new Error(\"No user to update\");\n\n      try {\n        const updatedFavorites = [\n          ...(authState.user.favoriteItems || []),\n          itemId,\n        ];\n\n        // Update the user’s favoriteItems on the server\n        await updateSingleUserItem(\"favoriteItems\", updatedFavorites);\n\n        // Update the local state and SecureStore\n        const updatedUser = {\n          ...authState.user,\n          favoriteItems: updatedFavorites,\n        };\n        await SecureStore.setItemAsync(USER_KEY, JSON.stringify(updatedUser));\n        setAuthState((prevState) => ({ ...prevState, user: updatedUser }));\n\n        console.log(\"Added item to favorites:\", itemId);\n      } catch (error) {\n        console.error(\"Failed to add to favorites:\", error);\n        throw new Error(\"Failed to add to favorites.\");\n      }\n    },\n    [authState.user, updateSingleUserItem]\n  );\n\n  // Remove item from favorites\n  const removeFromFavorites = useCallback(\n    async (itemId: string) => {\n      if (!authState.user) throw new Error(\"No user to update\");\n\n      try {\n        const updatedFavorites = (authState.user.favoriteItems || []).filter(\n          (fav) => fav !== itemId\n        );\n\n        // Update the user’s favoriteItems on the server\n        await updateSingleUserItem(\"favoriteItems\", updatedFavorites);\n\n        // Update the local state and SecureStore\n        const updatedUser = {\n          ...authState.user,\n          favoriteItems: updatedFavorites,\n        };\n        await SecureStore.setItemAsync(USER_KEY, JSON.stringify(updatedUser));\n        setAuthState((prevState) => ({ ...prevState, user: updatedUser }));\n\n        console.log(\"Removed item from favorites:\", itemId);\n      } catch (error) {\n        console.error(\"Failed to remove from favorites:\", error);\n        throw new Error(\"Failed to remove from favorites.\");\n      }\n    },\n    [authState.user, updateSingleUserItem]\n  );\n\n  // Check if item is favorite\n  const isFavorite = useCallback(\n    (itemId: string): boolean => {\n      return authState.user?.favoriteItems?.includes(itemId) || false;\n    },\n    [authState.user]\n  );\n\n  if (loading) {\n    return null; // Or show a loading spinner\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        authState,\n        onRegister,\n        onLogin,\n        onLogout,\n        // updateUserItems,\n        updateSingleUserItem,\n        addToFavorites,\n        removeFromFavorites,\n        isFavorite,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// before mutiple updates\n// import React, { createContext, useContext, useEffect, useState, useCallback } from \"react\";\n// import * as SecureStore from 'expo-secure-store';\n// import AsyncStorage from \"@react-native-async-storage/async-storage\";\n// import { UserProps } from \"../models/UserProps\";\n// import { authApi } from \"@/api/Authentication\";\n// import { getAuthToken } from \"@/utils/getAuthToken\";\n\n// // Define the AuthState and Context types\n// interface AuthState {\n//   user: UserProps | null;\n//   token: string | null;\n//   authenticated: boolean;\n// }\n\n// interface AuthContextType {\n//   authState: AuthState;\n//   onRegister: (storeID: string, user: UserProps) => Promise<any>;\n//   onLogin: (storeID: string, email: string, password: string) => Promise<any>;\n//   onLogout: () => Promise<void>;\n//   updateUserItems: (updateKey: keyof UserProps, updateValue: any) => Promise<void>;\n//   addToFavorites: (itemId: string) => Promise<void>;\n//   removeFromFavorites: (itemId: string) => Promise<void>;\n//   isFavorite: (itemId: string) => boolean;\n// }\n\n// // Define constants for SecureStore keys\n// export const TOKEN_KEY = 'your_token_key_here';\n// const USER_KEY = 'your_user_key_here';\n// const AUTHENTICATED_KEY = 'authenticated_key_here';\n\n// // Create AuthContext\n// export const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// // Hook to use AuthContext\n// export const useAuth = (): AuthContextType => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error(\"useAuth must be used within an AuthProvider\");\n//   }\n//   return context;\n// };\n\n// // AuthProvider component\n// export const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n//   const [authState, setAuthState] = useState<AuthState>({\n//     user: null,\n//     token: null,\n//     authenticated: false,\n//   });\n\n//   const [loading, setLoading] = useState(true);\n\n//   // Load user data from SecureStore on component mount\n//   useEffect(() => {\n//     const loadUserData = async () => {\n//       try {\n//         setLoading(true);\n//         const token = await SecureStore.getItemAsync(TOKEN_KEY);\n//         const userString = await SecureStore.getItemAsync(USER_KEY);\n//         const authenticated = await SecureStore.getItemAsync(AUTHENTICATED_KEY);\n\n//         if (token && userString && authenticated === 'true') {\n//           const user = JSON.parse(userString);\n//           setAuthState({ user, token, authenticated: true });\n//         } else {\n//           setAuthState({ user: null, token: null, authenticated: false });\n//         }\n//       } catch (error) {\n//         console.error(\"Error loading user data:\", error);\n//         setAuthState({ user: null, token: null, authenticated: false });\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     loadUserData();\n//   }, []);\n\n//   // Register function\n//   const onRegister = useCallback(async (storeID: string, userData: UserProps): Promise<any> => {\n//     try {\n//       const result = await authApi.post(\"/register\", userData, {\n//         params: { store_id: storeID },\n//       });\n//       return result;\n//     } catch (error: any) {\n//       console.error(\"Registration error:\", error);\n//       throw new Error(error.response?.data?.msg || \"Registration failed. Please try again.\");\n//     }\n//   }, []);\n\n//   // Login function\n//   const onLogin = useCallback(async (storeID: string, email: string, password: string): Promise<any> => {\n//     try {\n//       const result = await authApi.post('/login', { email, password }, {\n//         params: { store_id: storeID },\n//       });\n\n//       const { user, token } = result;\n//       await SecureStore.setItemAsync(TOKEN_KEY, token);\n//       await SecureStore.setItemAsync(USER_KEY, JSON.stringify(user));\n//       await SecureStore.setItemAsync(AUTHENTICATED_KEY, 'true');\n\n//       setAuthState({ user, token, authenticated: true });\n//       return result;\n//     } catch (error: any) {\n//       console.error(\"Login error:\", error);\n//       throw new Error(error.response?.data?.msg || \"Login failed. Please try again.\");\n//     }\n//   }, []);\n\n//   // Logout function\n//   const onLogout = useCallback(async (): Promise<void> => {\n//     try {\n//       await SecureStore.deleteItemAsync(TOKEN_KEY);\n//       await SecureStore.deleteItemAsync(USER_KEY);\n//       await SecureStore.deleteItemAsync(AUTHENTICATED_KEY);\n//       setAuthState({ user: null, token: null, authenticated: false });\n//       await AsyncStorage.removeItem(\"carts\");\n//       console.log(\"User logged out successfully.\");\n//     } catch (error) {\n//       console.error(\"Error logging out:\", error);\n//       throw new Error(\"Logout failed. Please try again.\");\n//     }\n//   }, []);\n\n//   // // Update user profile function - ( works for single updates)\n//   // const updateUserItems = useCallback(\n//   //   async (updateKey: keyof UserProps, updateValue: any) => {\n//   //     if (!authState.user) throw new Error(\"No user to update\");\n\n//   //     try {\n//   //       const body = {\n//   //         email: authState.user.email,\n//   //         tableName: \"prof-website-user-table\",\n//   //         updateKey: updateKey as string,\n//   //         updateValue: updateValue,\n//   //       };\n\n//   //       const token = await getAuthToken();\n\n//   //       const result = await authApi.put(`/user?id=${authState.user.id}`, body, {\n//   //         headers: {\n//   //           Authentication: `${token}`,\n//   //         },\n//   //       });\n\n//   //       const updatedUserData = { ...authState.user, [updateKey]: updateValue };\n\n//   //       await SecureStore.setItemAsync(USER_KEY, JSON.stringify(updatedUserData));\n\n//   //       setAuthState({ ...authState, user: updatedUserData });\n\n//   //       console.log(\"User profile updated successfully:\", updatedUserData);\n//   //     } catch (error: any) {\n//   //       console.error(\"Failed to update user profile:\", error);\n//   //       throw new Error(error.response?.data?.msg || \"Failed to update user profile.\");\n//   //     }\n//   //   },\n//   //   [authState.user]\n//   // );\n\n//   // Update user profile function\n// const updateUserItems = useCallback(\n//   async (updates: Partial<UserProps>) => {\n//     if (!authState.user) throw new Error(\"No user to update\");\n\n//     try {\n//       const body = {\n//         email: authState.user.email,\n//         tableName: \"prof-website-user-table\",\n//         ...updates, // Spread the updates object to include all updated fields\n//       };\n\n//       const token = await getAuthToken();\n\n//       const result = await authApi.put(`/user?id=${authState.user.id}`, body, {\n//         headers: {\n//           Authentication: `${token}`,\n//         },\n//       });\n\n//       // Merge the updated fields into the existing user data\n//       const updatedUserData = { ...authState.user, ...updates };\n\n//       // Store the updated user data in SecureStore\n//       await SecureStore.setItemAsync(USER_KEY, JSON.stringify(updatedUserData));\n\n//       // Update the auth state with the new user data\n//       setAuthState({ ...authState, user: updatedUserData });\n\n//       console.log(\"User profile updated successfully:\", updatedUserData);\n//     } catch (error: any) {\n//       console.error(\"Failed to update user profile:\", error);\n//       throw new Error(error.response?.data?.msg || \"Failed to update user profile.\");\n//     }\n//   },\n//   [authState.user]\n// );\n\n//   // Add item to favorites\n//   const addToFavorites = useCallback(\n//     async (itemId: string) => {\n//       if (!authState.user) throw new Error(\"No user to update\");\n\n//       try {\n//         const updatedFavorites = [...(authState.user.favoriteItems || []), itemId];\n//         await updateUserItems(\"favoriteItems\", updatedFavorites);\n//         console.log(\"Added item to favorites:\", itemId);\n//       } catch (error) {\n//         console.error(\"Failed to add to favorites:\", error);\n//         throw new Error(\"Failed to add to favorites.\");\n//       }\n//     },\n//     [authState.user, updateUserItems]\n//   );\n\n//   // Remove item from favorites\n//   const removeFromFavorites = useCallback(async (itemId: string) => {\n//     if (!authState.user) throw new Error(\"No user to update\");\n\n//     try {\n//       const updatedFavorites = (authState.user.favoriteItems || []).filter(fav => fav !== itemId);\n//       await updateUserItems(\"favoriteItems\", updatedFavorites);\n//     } catch (error) {\n//       console.error(\"Failed to remove from favorites:\", error);\n//       throw new Error(\"Failed to remove from favorites.\");\n//     }\n//   }, [authState.user, updateUserItems]);\n\n//   // Check if item is favorite\n//   const isFavorite = useCallback((itemId: string): boolean => {\n//     return authState.user?.favoriteItems?.includes(itemId) || false;\n//   }, [authState.user]);\n\n//   if (loading) {\n//     return null; // Or show a loading spinner\n//   }\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         authState,\n//         onRegister,\n//         onLogin,\n//         onLogout,\n//         updateUserItems,\n//         addToFavorites,\n//         removeFromFavorites,\n//         isFavorite,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// import React, { createContext, useContext, useEffect, useState, useCallback } from \"react\";\n// import * as SecureStore from 'expo-secure-store';\n// import AsyncStorage from \"@react-native-async-storage/async-storage\";\n// // import {AsyncStorage} from \"react-native\";\n// import uuid from 'react-native-uuid';\n// import { BASE_URL } from \"../utils/api\";\n// import { CONSTANTS } from \"../utils/constants\";\n// import { UserProps } from \"../models/UserProps\";\n// import { createFetchClient } from \"@/utils/createFetchClient\";\n// import { authApi } from \"@/api/Authentication\";\n\n// // Define the AuthState and Context types\n// interface AuthState {\n//   user: UserProps | null;\n//   token: string | null;\n//   authenticated: boolean;\n// }\n\n// interface AuthContextType {\n//   authState: AuthState;\n//   onRegister: (storeID: string, user: UserProps) => Promise<any>;\n//   onLogin: (storeID: string, email: string, password: string) => Promise<any>;\n//   onLogout: () => Promise<void>;\n//   updateUserItems: (updatedUser: Partial<UserProps>) => Promise<void>;\n//   addToFavorites: (itemId: string) => Promise<void>;\n//   removeFromFavorites: (itemId: string) => Promise<void>;\n//   isFavorite: (itemId: string) => boolean;\n// }\n\n// // Define constants for SecureStore keys\n// export const TOKEN_KEY = 'your_token_key_here';\n// const USER_KEY = 'your_user_key_here';\n// const AUTHENTICATED_KEY = 'authenticated_key_here';\n\n// // Create AuthContext\n// export const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// // Hook to use AuthContext\n// export const useAuth = (): AuthContextType => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error(\"useAuth must be used within an AuthProvider\");\n//   }\n//   return context;\n// };\n\n// // Initialize the fetch client for auth API\n// // const authApi = createFetchClient(\n// //   BASE_URL,\n// //   { tableName: 'prof-website-user-table', showFilteredItems: 'true' },\n// //   { 'Content-Type': 'application/json' }\n// // );\n\n// // AuthProvider component\n// export const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n//   const [authState, setAuthState] = useState<AuthState>({\n//     user: null,\n//     token: null,\n//     authenticated: false,\n//   });\n\n//   // Load user data from SecureStore on component mount\n//   useEffect(() => {\n//     const loadUserData = async () => {\n//       try {\n//         const token = await SecureStore.getItemAsync(TOKEN_KEY);\n//         const userString = await SecureStore.getItemAsync(USER_KEY);\n//         const authenticated = await SecureStore.getItemAsync(AUTHENTICATED_KEY);\n\n//         if (token && userString && authenticated === 'true') {\n//           const user = JSON.parse(userString);\n//           setAuthState({ user, token, authenticated: true });\n//         } else {\n//           setAuthState({ user: null, token: null, authenticated: false });\n//         }\n//       } catch (error) {\n//         console.error(\"Error loading user data:\", error);\n//         setAuthState({ user: null, token: null, authenticated: false });\n//       }\n//     };\n\n//     loadUserData();\n//   }, []);\n\n//     const onRegister = useCallback(\n//     async (storeID: string, userData: UserProps): Promise<any> => {\n//       try {\n//         console.log(\"Registering user:\", JSON.stringify(userData)); // Log the user data being sent as JSON\n\n//         const result = await authApi.post(\"/register\", userData, {\n//           params: { store_id: storeID },\n//         });\n\n//         console.log(\"Registration API result:\", result); // Log the response from the API\n//         return result;\n//       } catch (error: any) {\n//         console.error(\"(41) Registration error:\", error);\n//         console.error(\n//           \"(4) Registration error response data:\",\n//           error.response?.data\n//         );\n//         throw new Error(\n//           error.response?.data?.msg || \"Registration failed. Please try again.\"\n//         );\n//       }\n//     },\n//     []\n//   );\n\n//   // User login function\n//   const onLogin = useCallback(async (storeID: string, email: string, password: string): Promise<any> => {\n//     try {\n//       const result = await authApi.post('/login', { email, password }, {\n//         params: { store_id: storeID },\n//       });\n\n//       const { user, token } = result;\n//       await SecureStore.setItemAsync(TOKEN_KEY, token);\n//       await SecureStore.setItemAsync(USER_KEY, JSON.stringify(user));\n//       await SecureStore.setItemAsync(AUTHENTICATED_KEY, 'true');\n\n//       setAuthState({ user, token, authenticated: true });\n//       return result;\n//     } catch (error: any) {\n//       console.error(\"Login error:\", error);\n//       throw new Error(error.response?.data?.msg || \"Login failed. Please try again.\");\n//     }\n//   }, []);\n\n//   // Logout function\n//   const onLogout = useCallback(async (): Promise<void> => {\n//     try {\n//       await SecureStore.deleteItemAsync(TOKEN_KEY);\n//       await SecureStore.deleteItemAsync(USER_KEY);\n//       await SecureStore.deleteItemAsync(AUTHENTICATED_KEY);\n//       setAuthState({ user: null, token: null, authenticated: false });\n//       await AsyncStorage.removeItem(\"carts\");\n//       console.log(\"User logged out successfully.\");\n//     } catch (error) {\n//       console.error(\"Error logging out:\", error);\n//       throw new Error(\"Logout failed. Please try again.\");\n//     }\n//   }, []);\n\n//   // Update user profile\n//   const updateUserItems = useCallback(async (updatedUser: Partial<UserProps>) => {\n//     if (!authState.user) throw new Error(\"No user to update\");\n\n//     try {\n//       const result = await authApi.put(`/users/${authState.user.id}`, updatedUser);\n//       const updatedUserData = { ...authState.user, ...updatedUser };\n\n//       await SecureStore.setItemAsync(USER_KEY, JSON.stringify(updatedUserData));\n//       setAuthState({ ...authState, user: updatedUserData });\n\n//       console.log(\"User profile updated successfully:\", updatedUserData);\n//     } catch (error: any) {\n//       console.error(\"Failed to update user profile:\", error);\n//       throw new Error(error.response?.data?.msg || \"Failed to update user profile.\");\n//     }\n//   }, [authState.user]);\n\n//   // Add item to favorites\n//   const addToFavorites = useCallback(async (itemId: string) => {\n//     if (!authState.user) throw new Error(\"No user to update\");\n\n//     try {\n//       const updatedFavorites = [...(authState.user.favoriteItems || []), itemId];\n//       await updateUserItems({ favoriteItems: updatedFavorites });\n//     } catch (error) {\n//       console.error(\"Failed to add to favorites:\", error);\n//       throw new Error(\"Failed to add to favorites.\");\n//     }\n//   }, [authState.user, updateUserItems]);\n\n//   // Remove item from favorites\n//   const removeFromFavorites = useCallback(async (itemId: string) => {\n//     if (!authState.user) throw new Error(\"No user to update\");\n\n//     try {\n//       const updatedFavorites = (authState.user.favoriteItems || []).filter(fav => fav !== itemId);\n//       await updateUserItems({ favoriteItems: updatedFavorites });\n//     } catch (error) {\n//       console.error(\"Failed to remove from favorites:\", error);\n//       throw new Error(\"Failed to remove from favorites.\");\n//     }\n//   }, [authState.user, updateUserItems]);\n\n//   // Check if item is favorite\n//   const isFavorite = useCallback((itemId: string): boolean => {\n//     return authState.user?.favoriteItems?.includes(itemId) || false;\n//   }, [authState.user]);\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         authState,\n//         onRegister,\n//         onLogin,\n//         onLogout,\n//         updateUserItems,\n//         addToFavorites,\n//         removeFromFavorites,\n//         isFavorite,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n","import { OrderModelProps } from '../models/OrderModelProps';\nimport { TOKEN_KEY } from '../contexts/AuthContext';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { BASE_URL } from '@/utils/api';\nimport { CONSTANTS } from '@/utils/constants';\n\nconst orderTableName =  'prof-website-order-table'\n\n// Initialize the fetch client with the base URL and headers\nconst clientOrdersApi = createFetchClient(\n  BASE_URL, // Base URL includes the `/prod` part\n  {}, // No default parameters for now\n  { 'Content-Type': 'application/json' } // Default headers\n);\n\n// GET ALL STORES\nexport async function getClientOrdersApi(orderID: string, email: string) {\n  try {\n    const response = await clientOrdersApi.get('/orders', {\n      params: {\n        order_id: orderID,\n        email: email,\n      },\n      headers: {\n        Authentication: TOKEN_KEY,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// GET SINGLE STORE\nexport async function getClientOrderApi(id: string) {\n  try {\n    const response = await clientOrdersApi.get('/order', {\n      params: {\n        id,\n        tableName: orderTableName,\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching order:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// POST - CREATE OR UPDATE STORE\nexport const postClientOrderApi = async (order: OrderModelProps, orderID: string, email: string, token: string) => {\n  try {\n    const response = await clientOrdersApi.post('/order', order, {\n      params: {\n        order_id: orderID,\n        email: email,\n      },\n      headers: {\n        Authentication: token,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error posting order:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// PUT - UPDATE STORE\nexport const updateClientOrderApi = async (order: OrderModelProps) => {\n  try {\n    const response = await clientOrdersApi.put(`/order?id=${order.id}`, order);\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error updating order:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// DELETE STORE\nexport const deleteClientOrderApi = async (id: string) => {\n  try {\n    const response = await clientOrdersApi.delete('/order', {\n      params: { id },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error deleting order:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { OrderModelProps } from '../models/OrderModelProps';\n// import { TOKEN_KEY } from '../contexts/AuthContext';\n// import { createFetchClient } from '../utils/createFetchClient';\n// import { BASE_URL } from '@/utils/api';\n\n// // Setup the  instance for order API\n// const ordersApi = createFetchClient(\n//   BASE_URL,\n//   {\n//     tableName: 'prof-website-order-table',\n//     showFilteredItems: 'true',\n//   },\n//   {\n//     'Content-Type': 'application/json',\n//   }\n// );\n\n\n// // GET ALL \n// export async function getOrdersApi(orderID: string, email: string) {\n//   try {\n//     const response = await ordersApi.get('/orders', {\n//       params: {\n//         order_id: orderID,\n//         email: email,\n//       },\n//       headers: {\n//         Authentication: TOKEN_KEY,\n//         'Content-Type': 'application/json',\n//       },\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error fetching orders:', error);\n//     throw error;\n//   }\n// }\n\n\n// // GET SINGLE ITEM\n// export async function getOrderApi(id: any) {\n//   try {\n//     const response = await ordersApi.get(`/order`, {\n//       params: { id },\n//     });\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error fetching order:', error);\n//     throw error;\n//   }\n// }\n\n\n// // POST - Create / easy update\n// export const postOrderApi = async (order: OrderModelProps, orderID: string, email: string, token: string) => {\n//   return await ordersApi.post(`/order`, order, {\n//     params: { \n//       order_id: orderID,\n//       email: email,\n//     },\n//     headers: { \n//       Authentication: token,\n//       'Content-Type': 'application/json',\n//     },\n//   });\n// };\n\n\n// // UPDATE\n// export const updateOrderApi = async (order: OrderModelProps) => {\n//   return await ordersApi.put(`/order?id=${order.id}`, order);\n// };\n\n// // DELETE\n// export const deleteOrderApi = async (id: any) => {\n//   return await ordersApi.delete(`/order`, {\n//     params: { id },\n//   });\n// };\n\n\n\n\n\n\n\n\n\n\n// // // import { BASE_URL } from '../utils/api';\n// // // import { CONSTANTS } from '../utils/constants';\n// // import { OrderModelProps } from '../models/OrderModelProps';\n// // import { TOKEN_KEY } from '../contexts/AuthContext';\n// // import { UserProps } from '../models/UserProps';\n// // import { BASE_URL } from '../utils/api';\n// // import { CONSTANTS } from '../utils/constants';\n// // // import { BASE_URL } from '../utils/api';\n// // // import { CONSTANTS } from '../utils/constants';\n// // // import { OrderModelProps } from '../models/OrderModelProps';\n\n\n// //   const ordersApi = axios.create({\n// //     baseURL: BASE_URL,\n// //     // headers: {\n// //     //    // Authentication: TOKEN_KEY,\n// //     //     'Content-Type': 'application/json',\n// //     // },\n// //     params: {\n// //       order_id: CONSTANTS.order_id,\n// //       // email: \"\", // user?.email ?? \"\",\n// //       tableName: 'prof-website-order-table', \n// //       showFilteredItems: true\n// //     },\n// //   });\n\n\n\n// //   export const getOrdersApi = async (orderID: string, email: string) => {\n// //     return await ordersApi.get(`/orders`, {\n// //       params: { \n// //         order_id: orderID, // CONSTANTS.order_id,// orderID,\n// //         email: email,\n// //       },\n// //       headers: { \n// //         Authentication: TOKEN_KEY ,\n// //         'Content-Type': 'application/json',\n\n      \n// //       },\n\n// //     });\n   \n// //   };\n  \n\n// // export const getOrderApi = async (id: any) => {\n// //   return await ordersApi.get(`/order?id=${id}`);\n// // };\n\n\n// // // export const getOrders = async () => {\n// // //     return await ordersApi.get(`/orders`);\n// // //   };\n\n\n\n\n\n// // // export const getClientOrders = async (orderID: string, email: string) => {\n// // //   return await ordersApi.get(`/orders`, {\n// // //     params: {\n// // //       order_id: orderID, // CONSTANTS.order_id,// orderID,\n// // //       email: email,\n// // //     },\n\n// // //   });\n// // // };\n\n\n\n\n\n\n// // export const postOrderApi = async (order: OrderModelProps, orderID: string, email: string, token: string) => {\n// //   console.log(`email:::::::: ${email}`)\n  \n// //   return await ordersApi.post(`/order`, order, {\n// //     params: { \n// //       order_id: orderID, // The order ID as a query parameter\n// //       email: email,      // The email as a query parameter\n// //     },\n// //     headers: { \n// //       Authentication: token ,\n// //       'Content-Type': 'application/json',\n\n    \n// //     },\n// // });\n// // };\n\n\n\n// // export const updateOrderApi = async (order: OrderModelProps) => {\n// //   return await ordersApi.patch(`/order?id=${order.id}`, order);\n// // };\n\n// // export const deleteOrderApi = async ({ id }: { id: any }) => {\n// //   console.log(id);\n// //   return await ordersApi.delete(`/order?id=${id}`, id);\n// // };\n\n\n// // export default ordersApi;\n","import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\nimport { OrderModelProps } from \"../models/OrderModelProps\";\nimport { getClientOrdersApi, postClientOrderApi, updateClientOrderApi, deleteClientOrderApi } from \"../api/ordersApi\";\nimport { useAuth } from \"./AuthContext\";\nimport { Alert } from \"react-native\";\nimport { router } from \"expo-router\";\n// import MyAlert from \"@/components/interfaces/MyAlert\";\n\ninterface ClientOrderContextProps {\n  orders: OrderModelProps[];\n  addOrder: (order: OrderModelProps) => Promise<void>;\n  removeOrder: (orderId: string) => Promise<void>;\n  updateOrder: (order: OrderModelProps) => Promise<void>;\n  getClientOrders: () => void;\n  selectedOrder: OrderModelProps | null;\n  selectOrder: (order: OrderModelProps) => void;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const ClientOrderContext = createContext<ClientOrderContextProps | undefined>(undefined);\n\nexport const useClientOrder = () => {\n  const context = useContext(ClientOrderContext);\n  if (!context) {\n    throw new Error(\"useClientOrder must be used within an ClientOrderProvider\");\n  }\n  return context;\n};\n\nexport const ClientOrderProvider = ({ children }: { children: ReactNode }) => {\n  const { authState } = useAuth();\n  const [orders, setOrders] = useState<OrderModelProps[]>([]);\n  const [selectedOrder, setSelectedOrder] = useState<OrderModelProps | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // useEffect(() => {\n  //   if (authState?.token) {\n  //     getClientOrders(); // Initial load of orders\n  //   }\n  // }, [authState?.token]);\n\n  const addOrder = async (order: OrderModelProps) => {\n    if (!authState?.user) return;\n\n    const storeID = authState.user.store_owner_id || '';\n    const email = authState.user.email || '';\n    const token = authState?.token || \"\"\n\n    setIsLoading(true);\n    try {\n      await postClientOrderApi(order, storeID, email, token );\n      setOrders((prevOrders) => [...prevOrders, order]);\n      console.log(\"order added\", order );\n\n      // change fix\n      router.push('/')\n\n    } catch (error: any) {\n      console.error(\"Failed to add order:\", error.response?.data );\n      \n\n      // <MyAlert\n      // title=\"Order not Created\"\n      // message=\"You are missing information. Please update your store.\"\n      // onCancelPress={() => console.log(\"Cancel Pressed\")}\n      // onUpdatePress={() => router.push('/store')}\n      // />   \n      setError(error.response?.data || \"Failed to add order. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const removeOrder = async (orderId: string) => {\n    setIsLoading(true);\n    try {\n      await deleteClientOrderApi(orderId);\n      setOrders((prevOrders) => prevOrders.filter(order => order.id !== orderId));\n    } catch (error: any) {\n      console.error(\"Failed to remove order:\", error.response?.data?.message || error.message);\n      setError(error.response?.data?.message || \"Failed to remove order. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateOrder = async (order: OrderModelProps) => {\n    setIsLoading(true);\n    try {\n      await updateOrder(order);\n      setOrders((prevOrders) => prevOrders.map(o => o.id === order.id ? order : o));\n    } catch (error: any) {\n      console.error(\"Failed to update order:\", error.response?.data?.message || error.message);\n      setError(error.response?.data?.message || \"Failed to update order. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getClientOrders = async () => {\n    if (!authState?.user) return;\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const email = authState.user.email || '';\n      const store_owner_id = authState.user.store_owner_id || '';\n\n      const response = await getClientOrdersApi(store_owner_id, email);\n      const fetchedOrders = response.data;\n      setOrders(fetchedOrders);\n    } catch (error: any) {\n      console.error(\"Failed to fetch client orders:\", error.response?.data?.message || error.message);\n      setError(error.response?.data?.message || \"Failed to fetch orders. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectOrder = (order: OrderModelProps) => {\n    setSelectedOrder(order);\n  };\n\n  return (\n    <ClientOrderContext.Provider \n      value={{ \n        orders, \n        addOrder, \n        removeOrder, \n        updateOrder, \n        getClientOrders, \n        selectedOrder, \n        selectOrder, \n        isLoading, \n        error \n      }}\n    >\n      {children}\n    </ClientOrderContext.Provider>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { COLORS, SIZES } from '@/utils/theme';\nimport convertToCurrency from '@/hooks/convertToCurrency';\nimport { OrderModelProps } from '@/models/OrderModelProps';\nimport { Link } from 'expo-router';\nimport { useClientOrder } from '@/contexts/ClientOrderContext';\nimport { Ionicons } from '@expo/vector-icons';\n\nconst ClientOrderCard: React.FC<{ order: OrderModelProps }> = ({ order }) => {\n  const { selectOrder } = useClientOrder();\n  const [status, setStatus] = useState(order.order_status);\n\n  const handleOrderPress = () => {\n    selectOrder(order);\n  };\n\n  useEffect(() => {\n    setStatus(order.order_status);\n  }, [order.order_status]);\n\n  return (\n    <Link href={`(tabs)/client-orders/(details)/${order.id}` as never} asChild>\n      <TouchableOpacity style={styles.card} onPress={handleOrderPress}>\n        <View style={styles.body}>\n          <Ionicons name=\"bag\" size={30} color={COLORS.primary} style={styles.icon} />\n          <View style={styles.details}>\n            <Text style={styles.name}>{order.to_address.name}</Text>\n            <Text style={styles.price}>{convertToCurrency(order.total)}</Text>\n            <Text style={styles.date}>Placed on: {order.order_placed_date}</Text>\n          </View>\n          <View style={styles.statusContainer}>\n            <Text style={[styles.status, getStatusStyle(status)]}>{status}</Text>\n          </View>\n        </View>\n      </TouchableOpacity>\n    </Link>\n  );\n};\n\nconst getStatusStyle = (status: string) => {\n  switch (status) {\n    case 'Fulfill Order':\n      return styles.fulfillOrderStatus;\n    case 'Mark as Shipped':\n      return styles.markAsShippedStatus;\n    case 'Shipped !':\n      return styles.shippedStatus;\n    default:\n      return styles.defaultStatus;\n  }\n};\n\nexport default ClientOrderCard;\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: COLORS.white,\n    borderRadius: SIZES.medium,\n    marginBottom: SIZES.medium,\n    padding: SIZES.medium,\n    shadowColor: COLORS.black,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  body: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    paddingRight: SIZES.medium,\n  },\n  details: {\n    flex: 1,\n  },\n  name: {\n    fontFamily: 'bold',\n    fontSize: SIZES.medium,\n    color: COLORS.primary,\n  },\n  price: {\n    fontFamily: 'regular',\n    fontSize: SIZES.medium,\n    color: COLORS.primary,\n  },\n  date: {\n    fontFamily: 'regular',\n    fontSize: SIZES.small,\n    color: COLORS.gray,\n  },\n  statusContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  status: {\n    fontFamily: 'bold',\n    fontSize: SIZES.small,\n    paddingVertical: SIZES.small,\n    paddingHorizontal: SIZES.medium,\n    borderRadius: SIZES.large,\n  },\n  fulfillOrderStatus: {\n    backgroundColor: COLORS.primary,\n    color: COLORS.white,\n  },\n  markAsShippedStatus: {\n    backgroundColor: COLORS.orange,\n    color: COLORS.black,\n  },\n  shippedStatus: {\n    backgroundColor: COLORS.green,\n    color: COLORS.black,\n  },\n  defaultStatus: {\n    backgroundColor: COLORS.blue,\n    color: COLORS.white,\n  },\n});\n\n\n\n\n\n// // OrderCard.tsx\n// import React from 'react';\n// import { StyleSheet, Text, View, Image, TouchableOpacity } from 'react-native';\n// // import { OrderModelProps } from './Order';\n// import { COLORS, SIZES } from '@/utils/theme';\n// import { Ionicons } from '@expo/vector-icons';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import { OrderModelProps } from '@/models/OrderModelProps';\n// import { Link } from 'expo-router';\n// import { useClientOrder } from '@/contexts/ClientOrderContext';\n\n\n// const ClientOrderCard: React.FC<OrderModelProps> = (order) => {\n//   const { selectOrder } = useClientOrder();\n\n//   const handleProductPress = () => {\n//     selectOrder(order);\n//   };\n//   return (\n//     // <Link href={\"(tabs)/client-orders/(create)/create-client-order\" as never} asChild>\n//     // <Link href={\"(tabs)/client-orders/(create)/create-client-order\" as never} asChild>\n\n//     <Link href={`(tabs)/client-orders/(details)/${order.id}` as never} asChild>\n\n//     <TouchableOpacity style={styles.card} onPress={handleProductPress}>\n//       <View style={styles.header}>\n//         <Text style={styles.orderId}>Order ID: {order.id}</Text>\n//         <Text style={styles.status}>{order.order_status}</Text>\n//       </View>\n      \n//       <View style={styles.body}>\n//         {/* <Image source={{ uri: props.items[0].image }} style={styles.image} /> */}\n//         <View style={styles.details}>\n//           <Text style={styles.title}>{order.title}</Text>\n//           <Text style={styles.date}>Placed on: {order.order_placed_date}</Text>\n//           <Text style={styles.price}>{convertToCurrency(order.total)}</Text>\n//         </View>\n//       </View>\n      \n//       <View style={styles.footer}>\n//         <Ionicons name=\"square\" size={24} color={COLORS.primary} />\n//       </View>\n//     </TouchableOpacity>\n//     </Link>\n//   );\n// };\n\n// export default ClientOrderCard;\n\n// const styles = StyleSheet.create({\n//   card: {\n//     backgroundColor: COLORS.white,\n//     borderRadius: SIZES.medium,\n//     marginBottom: SIZES.medium,\n//     padding: SIZES.medium,\n//     shadowColor: COLORS.black,\n//     shadowOffset: { width: 0, height: 2 },\n//     shadowOpacity: 0.1,\n//     shadowRadius: 4,\n//     elevation: 5,\n//   },\n//   header: {\n//     flexDirection: 'row',\n//     justifyContent: 'space-between',\n//     marginBottom: SIZES.small,\n//   },\n//   orderId: {\n//     fontFamily: 'bold',\n//     fontSize: SIZES.medium,\n//     color: COLORS.primary,\n//   },\n//   status: {\n//     fontFamily: 'regular',\n//     fontSize: SIZES.small,\n//     color: COLORS.gray,\n//   },\n//   body: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//   },\n//   image: {\n//     width: 60,\n//     height: 60,\n//     borderRadius: SIZES.small,\n//     marginRight: SIZES.medium,\n//   },\n//   details: {\n//     flex: 1,\n//   },\n//   title: {\n//     fontFamily: 'bold',\n//     fontSize: SIZES.medium,\n//     marginBottom: SIZES.small,\n//     color: COLORS.primary,\n//   },\n//   date: {\n//     fontFamily: 'regular',\n//     fontSize: SIZES.small,\n//     color: COLORS.gray,\n//   },\n//   price: {\n//     fontFamily: 'bold',\n//     fontSize: SIZES.medium,\n//     color: COLORS.primary,\n//     marginTop: SIZES.small,\n//   },\n//   footer: {\n//     flexDirection: 'row',\n//     justifyContent: 'flex-end',\n//     marginTop: SIZES.small,\n//   },\n// });\n","// Fetch Client Initialization Function for handling arrays\nexport function createFetchClientForItems(\n    baseURL: string,\n    defaultParams: Record<string, string | number>,\n    defaultHeaders: Record<string, string>\n  ) {\n    const fetchClientForItems = async <T = any>(\n      endpoint: string,\n      options: RequestInit & { params?: Record<string, string | number> } = {}\n    ): Promise<T[]> => {\n      // Ensure `/prod` is part of the base URL if not already present\n      const baseHasProd = baseURL.includes('/prod');\n      const normalizedBaseURL = baseHasProd ? baseURL : `${baseURL}/prod`;\n  \n      // Ensure the endpoint always starts with a leading slash\n      const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  \n      // Create the full URL using the normalizedBaseURL and normalized endpoint\n      const url = new URL(`${normalizedBaseURL}${normalizedEndpoint}`);\n  \n      // Add default parameters to the URL\n      const params = new URLSearchParams();\n      Object.entries(defaultParams).forEach(([key, value]) => {\n        params.append(key, String(value)); // Ensure correct parameter handling\n      });\n  \n      // Append options.params if provided\n      if (options.params) {\n        Object.entries(options.params).forEach(([key, value]) => {\n          params.append(key, String(value)); // Convert number to string only when necessary\n        });\n      }\n      url.search = params.toString(); // Set search params\n  \n      // Merge default headers with any provided headers\n      const headers = new Headers({\n        ...defaultHeaders,\n        ...options.headers,\n      });\n  \n      // Log the URL, headers, and parameters for debugging\n      console.log('Request URL:', url.toString());\n      console.log('Request Params:', params.toString());\n      console.log('Request Headers:', Object.fromEntries(headers.entries()));\n  \n      // Perform the fetch request\n      const response = await fetch(url.toString(), {\n        ...options,\n        headers,\n      });\n  \n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`HTTP error! Status: ${response.status}, ${JSON.stringify(errorData)}`);\n      }\n  \n      // Process the response and ensure it's an array\n      const data = await response.json();\n  \n      // Log the full response data before returning\n    //   console.log('Response Data:', JSON.stringify(data, null, 2));\n  \n      return Array.isArray(data) ? data : [data];\n    };\n  \n    return {\n      get: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n        fetchClientForItems<T>(endpoint, { ...options, method: 'GET' }),\n  \n      post: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n        fetchClientForItems<T>(endpoint, { ...options, method: 'POST', body: JSON.stringify(body) }),\n  \n      put: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n        fetchClientForItems<T>(endpoint, { ...options, method: 'PUT', body: JSON.stringify(body) }),\n  \n      delete: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n        fetchClientForItems<T>(endpoint, { ...options, method: 'DELETE' }),\n    };\n  }\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// worked but needed more\n// // Fetch Client Initialization Function for handling arrays\n// export function createFetchClientForItems(\n//     baseURL: string,\n//     defaultParams: Record<string, string | number>,\n//     defaultHeaders: Record<string, string>\n//   ) {\n//     const fetchClientForItems = async <T = any>(\n//       endpoint: string,\n//       options: RequestInit & { params?: Record<string, string | number> } = {}\n//     ): Promise<T[]> => { // Returns an array of items\n//       // Ensure `/prod` is part of the base URL if not already present\n//       const baseHasProd = baseURL.includes('/prod');\n//       const normalizedBaseURL = baseHasProd ? baseURL : `${baseURL}/prod`;\n  \n//       // Ensure the endpoint always starts with a leading slash\n//       const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  \n//       // Create the full URL using the normalizedBaseURL and normalized endpoint\n//       const url = new URL(`${normalizedBaseURL}${normalizedEndpoint}`);\n  \n//       // Add default parameters to the URL\n//       const params = new URLSearchParams();\n//       Object.entries(defaultParams).forEach(([key, value]) => {\n//         params.append(key, String(value)); // Ensure correct parameter handling\n//       });\n  \n//       // Append options.params if provided\n//       if (options.params) {\n//         Object.entries(options.params).forEach(([key, value]) => {\n//           params.append(key, String(value)); // Convert number to string only when necessary\n//         });\n//       }\n//       url.search = params.toString(); // Set search params\n  \n//       // Merge default headers with any provided headers\n//       const headers = new Headers({\n//         ...defaultHeaders,\n//         ...options.headers,\n//       });\n  \n//       // Log the URL, headers, and parameters for debugging\n//       console.log('Request URL:', url.toString());\n//       console.log('Request Params:', params.toString());\n//       console.log('Request Headers:', Object.fromEntries(headers.entries()));\n  \n//       // Perform the fetch request\n//       const response = await fetch(url.toString(), {\n//         ...options,\n//         headers,\n//       });\n  \n//       // Check for HTTP errors\n//       if (!response.ok) {\n//         const errorData = await response.json().catch(() => ({}));\n//         throw new Error(`HTTP error! Status: ${response.status}, ${JSON.stringify(errorData)}`);\n//       }\n  \n//       // Process the response\n//       const data = await response.json();\n  \n//       // Ensure that the response is always an array\n//       return Array.isArray(data) ? data : [data];\n//     };\n  \n//     return {\n//       get: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n//         fetchClientForItems<T>(endpoint, { ...options, method: 'GET' }),\n  \n//       post: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n//         fetchClientForItems<T>(endpoint, { ...options, method: 'POST', body: JSON.stringify(body) }),\n  \n//       put: <T = any>(endpoint: string, body: any, options: Omit<RequestInit, 'method' | 'body'> & { params?: Record<string, string | number> } = {}) =>\n//         fetchClientForItems<T>(endpoint, { ...options, method: 'PUT', body: JSON.stringify(body) }),\n  \n//       delete: <T = any>(endpoint: string, options: Omit<RequestInit, 'method'> & { params?: Record<string, string | number> } = {}) =>\n//         fetchClientForItems<T>(endpoint, { ...options, method: 'DELETE' }),\n//     };\n//   }\n  ","import { ProductModelProps } from '../models/ProductModelProps';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { createFetchClientForItems } from '../utils/createFetchClientForItems';\nimport { BASE_URL } from '@/utils/api';\n\nconst productTableName = 'prof-website-product-table';\n\n// Product\nconst clientProductApi = createFetchClient(\n  BASE_URL, // Base URL includes the `/prod` part\n  {}, // No default parameters for now\n  { 'Content-Type': 'application/json' } // Default headers\n);\n\n// Products\nconst clientProductsApi = createFetchClientForItems(\n  BASE_URL,\n  { showFilteredItems: 'false' }, // Default as string\n  { 'Content-Type': 'application/json' }\n);\n\n// GET ALL PRODUCTS\nexport const getClientProductsApi = async (storeID: string, showFilteredItems: boolean) => {\n  const response = await clientProductsApi.get('/products', {\n    params: {\n      store_id: storeID,\n      tableName: productTableName,\n      showFilteredItems: showFilteredItems ? 'true' : 'false', // Convert boolean to string\n    },\n  });\n\n  return response;\n};\n\n// GET SINGLE PRODUCT\nexport async function getClientProductApi(id: string) {\n  try {\n    const response = await clientProductApi.get('/product', {\n      params: {\n        id,\n        tableName: productTableName,\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching product:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// POST - CREATE OR UPDATE PRODUCT\nexport const postClientProductApi = async (product: ProductModelProps, productID: string, email: string, token: string) => {\n  try {\n    const response = await clientProductApi.post('/product', product, {\n      params: {\n        product_id: productID,\n        email: email,\n      },\n      headers: {\n        Authentication: token,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error posting product:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// PUT - UPDATE PRODUCT\nexport const updateClientProductApi = async (product: ProductModelProps) => {\n  try {\n    const response = await clientProductApi.put(`/product?id=${product.id}`, product);\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error updating product:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// DELETE PRODUCT\nexport const deleteClientProductApi = async (id: string) => {\n  try {\n    const response = await clientProductApi.delete('/product', {\n      params: { id },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error deleting product:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n\n\n\n\n\n\n\n\n// import { ProductModelProps } from '../models/ProductModelProps';\n// import { TOKEN_KEY } from '../contexts/AuthContext';\n// import { createFetchClient } from '../utils/createFetchClient';\n// import { BASE_URL } from '@/utils/api';\n// import { CONSTANTS } from '@/utils/constants';\n// import { createFetchClientForItems } from '@/utils/createFetchClientForItems';\n\n// const productTableName =  'prof-website-product-table'\n\n// // Initialize the fetch client with the base URL and headers\n// // Initialize the fetch client with the base URL and headers\n// const clientProductApi = createFetchClient(\n//   BASE_URL, // Base URL includes the `/prod` part\n//   {}, // No default parameters for now\n//   { 'Content-Type': 'application/json' } // Default headers\n// );\n\n// const clientProductsApi = createFetchClientForItems(\n//   BASE_URL,\n//   { showFilteredItems: false },\n//   { 'Content-Type': 'application/json' }\n// );\n\n// // GET ALL STORES\n\n// // GET ALL PRODUCTS\n// export const getClientProductsApi = async (storeID: string, showFilteredItems: boolean) => {\n//   // if (!store_id) {\n//   //   throw new Error('Store ID is missing.');\n//   // }\n\n//   const response = await clientProductsApi.get('/products', {\n//     params: {\n//       store_id: storeID,\n//       tableName: productTableName,\n//       showFilteredItems: showFilteredItems ? 'true' : 'false', // Convert boolean to string\n//     },\n//   });\n\n//   return response;\n// };\n\n\n// // GET SINGLE STORE\n// export async function getClientProductApi(id: string) {\n//   try {\n//     const response = await clientProductsApi.get('/product', {\n//       params: {\n      \n//         id,\n//         tableName: productTableName,\n//       },\n//     });\n//     return response; // Return the server response\n//   } catch (error) {\n//     console.error('Error fetching product:', error);\n//     throw error; // Re-throw error for handling\n//   }\n// }\n\n// // POST - CREATE OR UPDATE STORE\n// export const postClientProductApi = async (product: ProductModelProps, productID: string, email: string, token: string) => {\n//   try {\n//     const response = await clientProductsApi.post('/product', product, {\n//       params: {\n//         product_id: productID,\n//         email: email,\n//       },\n//       headers: {\n//         Authentication: token,\n//         'Content-Type': 'application/json',\n//       },\n//     });\n//     return response; // Return the server response\n//   } catch (error) {\n//     console.error('Error posting product:', error);\n//     throw error; // Re-throw error for handling\n//   }\n// };\n\n// // PUT - UPDATE STORE\n// export const updateClientProductApi = async (product: ProductModelProps) => {\n//   try {\n//     const response = await clientProductsApi.put(`/product?id=${product.id}`, product);\n//     return response; // Return the server response\n//   } catch (error) {\n//     console.error('Error updating product:', error);\n//     throw error; // Re-throw error for handling\n//   }\n// };\n\n// // DELETE STORE\n// export const deleteClientProductApi = async (id: string) => {\n//   try {\n//     const response = await clientProductsApi.delete('/product', {\n//       params: { id },\n//     });\n//     return response; // Return the server response\n//   } catch (error) {\n//     console.error('Error deleting product:', error);\n//     throw error; // Re-throw error for handling\n//   }\n\n// };\n","import React, { createContext, useContext, useState, ReactNode, useEffect, useCallback } from 'react';\nimport { getClientProductApi, getClientProductsApi } from '@/api/productApi';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { CONSTANTS } from '@/utils/constants';\n\ninterface ClientProductContextProps {\n  product: ProductModelProps | null;\n  products: ProductModelProps[];\n  getClientProducts: (store_id: string) => Promise<void>;\n  getClientProduct: (product_owner_id: string) => Promise<void>;\n  addProduct: (product: ProductModelProps) => void;\n  removeProduct: () => void;\n  selectedProduct: ProductModelProps | null;\n  selectProduct: (product: ProductModelProps) => void;\n  error: string | null;\n  isLoading: boolean;\n}\n\nconst ClientProductContext = createContext<ClientProductContextProps | undefined>(undefined);\n\nexport const useClientProduct = (): ClientProductContextProps => {\n  const context = useContext(ClientProductContext);\n  if (!context) {\n    throw new Error('useClientProduct must be used within a ClientProductProvider');\n  }\n  return context;\n};\n\nexport const ClientProductProvider = ({ children }: { children: ReactNode }) => {\n  const [product, setProduct] = useState<ProductModelProps | null>(null);\n  const [products, setProducts] = useState<ProductModelProps[]>([]);\n  const [selectedProduct, setSelectedProduct] = useState<ProductModelProps | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  // Add product to the state\n  const addProduct = useCallback((newProduct: ProductModelProps) => {\n    setProduct(newProduct);\n  }, []);\n\n  // Remove the product from the state\n  const removeProduct = useCallback(() => {\n    setProduct(null);\n  }, []);\n\n  // Select a product as active\n  const selectProduct = useCallback((product: ProductModelProps) => {\n    setSelectedProduct(product);\n  }, []);\n\n  // Fetch a single product\n  const getClientProduct = useCallback(async (product_owner_id: string) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await getClientProductApi(product_owner_id);\n      setProduct(response.data);\n      console.log(`Fetched client product Successfully`);\n      // console.log(`Fetched client product: ${JSON.stringify(response.data, null, 2)}`);\n    } catch (error: any) {\n      console.error(\"Error fetching product:\", error.message);\n      setError(error.message || \"Failed to fetch product. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Fetch multiple products\n  const getClientProducts = useCallback(async (store_id: string): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response: ProductModelProps[] = await getClientProductsApi(store_id, true);\n      // console.log(\"Full API response:\", JSON.stringify(response, null, 2));\n      if (!response || response.length === 0) {\n        throw new Error('No data returned from the API');\n      }\n\n      const validProducts = response.filter(product => product && product.id);\n      setProducts(validProducts);\n      // console.log(`Fetched client products: ${JSON.stringify(validProducts, null, 2)}`);\n      console.log(`Fetched client products Successfully`);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"Error fetching products:\", error.message);\n        setError(error.message || \"Failed to fetch products. Please try again later.\");\n      } else {\n        console.error(\"Unknown error fetching products\");\n        setError(\"Failed to fetch products. Please try again later.\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return (\n    <ClientProductContext.Provider\n      value={{\n        product,\n        products,\n        getClientProduct,\n        getClientProducts,\n        addProduct,\n        removeProduct,\n        selectedProduct,\n        selectProduct,\n        error,\n        isLoading,\n      }}\n    >\n      {children}\n    </ClientProductContext.Provider>\n  );\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\n// import { getClientProductApi, getClientProductsApi } from '@/api/productApi';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { CONSTANTS } from '@/utils/constants';\n\n// // Define the context interface for client products\n// interface ClientProductContextProps {\n//   product: ProductModelProps | null;\n//   products: ProductModelProps[]; // To store multiple products\n//   getClientProducts: (store_id: string) => void; // Fetch multiple products\n//   getClientProduct: (store_id: string) => void; // Fetch a single product\n//   addProduct: (product: ProductModelProps) => void;\n//   removeProduct: () => void;\n//   selectedProduct: ProductModelProps | null;\n//   selectProduct: (product: ProductModelProps) => void;\n//   error: string | null;\n//   isLoading: boolean;\n// }\n\n// const ClientProductContext = createContext<ClientProductContextProps | undefined>(undefined);\n\n// // Hook for accessing client product context\n// export const useClientProduct = (): ClientProductContextProps => {\n//   const context = useContext(ClientProductContext);\n//   if (!context) {\n//     throw new Error('useClientProduct must be used within a ClientProductProvider');\n//   }\n//   return context;\n// };\n\n// export const ClientProductProvider = ({ children }: { children: ReactNode }) => {\n//   const [product, setProduct] = useState<ProductModelProps | null>(null);\n//   const [products, setProducts] = useState<ProductModelProps[]>([]); // Store multiple products\n//   const [selectedProduct, setSelectedProduct] = useState<ProductModelProps | null>(null);\n//   const [error, setError] = useState<string | null>(null);\n//   const [isLoading, setIsLoading] = useState<boolean>(false);\n\n//   // Add a product to the state\n//   const addProduct = (newProduct: ProductModelProps) => setProduct(newProduct);\n\n//   // Remove the currently stored product\n//   const removeProduct = () => setProduct(null);\n\n//   // Select a product to set as the current active one\n//   const selectProduct = (product: ProductModelProps) => setSelectedProduct(product);\n\n//   // Fetch a single product using the provided product_owner_id\n//   const getClientProduct = async (product_owner_id: string) => {\n//     setIsLoading(true);\n//     setError(null); // Reset error state\n//     try {\n//       const response = await getClientProductApi(product_owner_id);\n//       setProduct(response.data);\n//       console.log(`Fetched client product: ${response.data}`);\n//     } catch (error: any) {\n//       console.error(\"Error fetching product:\", error.message);\n//       setError(error.message || \"Failed to fetch product. Please try again later.\");\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n    \n//   const getClientProducts = async (store_id: string): Promise<void> => {\n//     setIsLoading(true);\n//     setError(null); // Reset error state\n  \n//     try {\n//       // The response is now expected to be an array of ProductModelProps\n//       const response: ProductModelProps[] = await getClientProductsApi(store_id, true);\n  \n//       // Log the full response to check its structure\n//       console.log(\"Full API response:\", JSON.stringify(response, null, 2));\n  \n//       // Ensure the response contains data\n//       if (!response || response.length === 0) {\n//         throw new Error('No data returned from the API');\n//       }\n  \n//       // Filter valid products that have an 'id'\n//       const validProducts: ProductModelProps[] = response.filter((product: ProductModelProps) => product && product.id);\n  \n//       // Set the valid products to state\n//       setProducts(validProducts);\n//       console.log(`Fetched client products: ${JSON.stringify(validProducts, null, 2)}`);\n//     } catch (error: unknown) {\n//       // Check if the error has a message and handle it accordingly\n//       if (error instanceof Error) {\n//         console.error(\"Error fetching products:\", error.message);\n//         setError(error.message || \"Failed to fetch products. Please try again later.\");\n//       } else {\n//         console.error(\"Unknown error fetching products\");\n//         setError(\"Failed to fetch products. Please try again later.\");\n//       }\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n  \n  \n//   return (\n//     <ClientProductContext.Provider\n//       value={{\n//         product,\n//         products, // Pass the products array\n//         getClientProduct,\n//         getClientProducts, // Provide getClientProducts to the context\n//         addProduct,\n//         removeProduct,\n//         selectedProduct,\n//         selectProduct,\n//         error,\n//         isLoading,\n//       }}\n//     >\n//       {children}\n//     </ClientProductContext.Provider>\n//   );\n// };\n\n","// import React, { FC } from 'react';\n// import { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { SIZES } from '@/utils/theme';\n// import { CONSTANTS } from '@/utils/constants';\n// import { Link } from 'expo-router';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { useCart } from '@/contexts/CartContext';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { useTheme } from '@/contexts/ThemeContext';\n\n// export const ProductCardV2: FC<ProductModelProps> = (item) => {\n//   const { addToCart } = useCart();\n//   const { authState } = useAuth();\n//   const { selectProduct } = useClientProduct();\n//   const { colors } = useTheme();\n\n//   const handleProductSelect = (product: ProductModelProps) => {\n//     selectProduct(product);\n//   };\n\n//   const handleAddToCart = () => {\n//     if (authState?.user) {\n//       addToCart(item);\n//     } else {\n//       console.error(\"User not logged in, cannot add to cart\");\n//     }\n//   };\n\n\n// // const toggleFavorite = async () => {\n\n// //   handleProductSelect\n// //   console.log(\"Fav selected 3\")\n// //   if (selectedProduct) {\n   \n// //     setIsFavorite(!isFavorite); // Toggle UI state\n\n// //     addToFavorite(selectedProduct);\n// //   }\n// // };\n\n//   return (\n//      <Link href={`/products/${item.id}` as never} asChild>\n\n//     <View style={[styles.container, { backgroundColor: colors.card }]}>\n//       {/* Heart icon\n//       <TouchableOpacity style={styles.heartIcon} onPress={() => toggleFavorite}>\n//         <Ionicons name=\"heart-outline\" size={24} color={colors.primary} />\n//       </TouchableOpacity> */}\n\n//       <TouchableOpacity onPress={() => handleProductSelect(item)}>\n//         <View style={styles.imageContainer}>\n//           <Image \n//             style={styles.image} \n//             source={{ uri: item.images[0] || CONSTANTS.holderImageProductCard }} \n//           />\n\n           \n\n//         </View>\n\n//         <View style={styles.details}>\n//           <Text style={[styles.title, { color: colors.title }]} numberOfLines={2}>{item.name}</Text>\n//           <Text style={[styles.subtitle, { color: colors.subtitle }]} numberOfLines={1}>{item.color_code}</Text>\n//           <Text style={[styles.price, { color: colors.title }]}>{convertToCurrency(item.price)}</Text>\n\n//           {/* Add to Cart Button */}\n//           <TouchableOpacity style={[styles.addToCartButton, { backgroundColor: colors.primary }]} onPress={handleAddToCart}>\n//             <Text style={[styles.addToCartText, { color: colors.title }]}>Add To Cart</Text>\n//             <Ionicons name=\"cart-outline\" size={18} color={colors.title} style={{ marginLeft: 5 }} />\n//           </TouchableOpacity>\n//         </View>\n//       </TouchableOpacity>\n//     </View>\n//     </Link>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     width: 190,  // Adjusted width for better fit\n//     margin: 8,\n//     borderRadius: SIZES.small,\n//     borderColor: \"gray\",\n//     borderWidth: 1,\n//     overflow: 'hidden',\n//     shadowColor: '#000',\n//     shadowOffset: { width: 0, height: 2 },\n//     shadowOpacity: 0.1,\n//     shadowRadius: 5,\n//     elevation: 3,\n//   },\n//   imageContainer: {\n//     width: '100%',\n//     height: 150,  // Image height to maintain proportions\n//     borderRadius: SIZES.small,\n//     overflow: 'hidden',\n//   },\n//   image: {\n//     width: '110%',\n//     height: '100%',\n//     resizeMode: 'cover',  // Ensure the image fills the space\n//   },\n//   details: {\n//     padding: SIZES.small,\n//     alignItems: 'center',\n//   },\n//   title: {\n//     fontFamily: 'bold',\n//     fontSize: SIZES.small,\n//     marginBottom: 2,\n//     textAlign: 'center',\n//   },\n//   subtitle: {\n//     fontFamily: 'regular',\n//     fontSize: SIZES.xSmall,\n//     marginBottom: 8,\n//     textAlign: 'center',\n//   },\n//   price: {\n//     fontFamily: 'bold',\n//     fontSize: SIZES.medium,\n//     textAlign: 'center',\n//     marginBottom: 10,  // Space before the Add to Cart button\n//   },\n//   heartIcon: {\n//     position: 'absolute',\n//     top: 10,\n//     right: 10,\n//     zIndex: 1,\n//   },\n//   addToCartButton: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     paddingVertical: 6,\n//     paddingHorizontal: 12,\n//     borderRadius: SIZES.small,\n//   },\n//   addToCartText: {\n//     fontSize: SIZES.small,\n//     fontFamily: 'bold',\n//   },\n// });\n\n\n\n\n\n\nimport React, { FC } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { SIZES } from '@/utils/theme';\nimport { CONSTANTS } from '@/utils/constants';\nimport { Link } from 'expo-router';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport convertToCurrency from '@/hooks/convertToCurrency';\nimport { useClientProduct } from '@/contexts/ClientProductContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useTheme } from '@/contexts/ThemeContext'; // Using your custom useTheme\n\nexport const ProductCardV2: FC<ProductModelProps> = (item) => {\n  const { addToCart } = useCart();\n  const { authState } = useAuth();\n  const { selectProduct } = useClientProduct();\n  \n  // Using colors from the custom theme\n  const { colors } = useTheme();\n\n  const handleProductSelect = (product: ProductModelProps) => {\n    selectProduct(product);\n  };\n\n  const handleAddToCart = () => {\n    if (authState?.user) {\n      addToCart(item);\n    } else {\n      console.error(\"User not logged in, cannot add to cart\");\n    }\n  };\n\n  return (\n    <View>\n      {/* @ts-ignore */}\n      <Link href={`/products/${item.id}`} asChild>\n        <TouchableOpacity onPress={() => handleProductSelect(item)}>\n          <View style={[styles.container, { backgroundColor: colors.card }]}>\n            {/* Image */}\n            <View style={styles.imageContainer}>\n              <Image style={styles.image} source={{ uri: item.image || CONSTANTS.holderImageProductCard }} />\n            </View>\n\n            {/* Details */}\n            <View style={styles.details}>\n              <Text style={[styles.title, { color: colors.cardText }]} numberOfLines={2}>{item.name}</Text>\n              <Text style={[styles.supplier, { color: colors.cardSecondaryText }]} numberOfLines={1}>{item.color_code}</Text>\n              <Text style={[styles.price, { color: colors.primary }]}>{convertToCurrency(item.price)}</Text>\n            </View>\n\n            {/* Add to Cart Button */}\n            <TouchableOpacity style={styles.addBtn} onPress={handleAddToCart}>\n              <Ionicons name='add-circle' size={35} color={colors.primary} />\n            </TouchableOpacity>\n          </View>\n        </TouchableOpacity>\n      </Link>\n    </View>\n  );\n};\n\n// Styles\nconst styles = StyleSheet.create({\n  container: {\n    width: 182,\n    height: 240,\n    marginEnd: 22,\n    borderRadius: SIZES.medium,\n  },\n  imageContainer: {\n    flex: 1,\n    width: 170,\n    marginLeft: SIZES.small / 2,\n    marginTop: SIZES.small / 2,\n    borderRadius: SIZES.small,\n    overflow: \"hidden\",\n  },\n  image: {\n    aspectRatio: 1,\n    resizeMode: 'cover',\n  },\n  details: {\n    padding: SIZES.small,\n  },\n  title: {\n    fontFamily: \"bold\",\n    fontSize: SIZES.small,\n    marginBottom: 2,\n    height: 35,\n  },\n  supplier: {\n    fontFamily: \"regular\",\n    fontSize: SIZES.small,\n  },\n  price: {\n    fontFamily: \"bold\",\n    fontSize: SIZES.medium,\n  },\n  addBtn: {\n    position: \"absolute\",\n    bottom: SIZES.xSmall,\n    right: SIZES.xSmall,\n  },\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { FC, useContext } from 'react';\n// import { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { COLORS, SIZES } from '@/utils/theme';\n// import { CONSTANTS } from '@/utils/constants';\n// import { Link } from 'expo-router';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { useCart } from '@/contexts/CartContext';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { useTheme } from \"@/contexts/ThemeContext\"\n\n// export const ProductCardV2: FC<ProductModelProps> = (item) => {\n//   const { addToCart } = useCart();\n//   const { authState, updateSingleUserItem } = useAuth();\n//   const { products, selectedProduct, selectProduct, isLoading, error } = useClientProduct();\n\n//   const { colors } = useTheme()\n//   const handleProductSelect = (product: ProductModelProps) => {\n//     selectProduct(product);\n//   };\n\n//   const handleAddToCart = () => {\n//     if (authState?.user) {\n//       addToCart(item);\n//     } else {\n//       console.error(\"User not logged in, cannot add to cart\");\n//       // Optionally: redirect to login page or show message\n//     }\n//   };\n\n//   return (\n//     <View>\n//       {/* @ts-ignore */}\n//       <Link href={`/products/${selectedProduct?.id}`} asChild>\n//         <TouchableOpacity onPress={() => handleProductSelect(item)}>\n//           <View style={styles.container}>\n//             {/* Image */}\n//             <View style={styles.imageContainer}>\n//               <Image style={styles.image} source={{ uri: item.image || CONSTANTS.holderImageProductCard }} />\n//             </View>\n\n//             {/* Details */}\n//             <View style={styles.details}>\n//               <Text style={styles.title} numberOfLines={2}>{item.name}</Text>\n//               <Text style={styles.supplier} numberOfLines={1}>{item.color_code}</Text>\n//               <Text style={styles.price}>{convertToCurrency(item.price)}</Text>\n//             </View>\n\n//             {/* Button */}\n//             <TouchableOpacity style={styles.addBtn} onPress={handleAddToCart}>\n//               <Ionicons name='add-circle' size={35} color={COLORS.primary} />\n//             </TouchableOpacity>\n//           </View>\n//         </TouchableOpacity>\n//       </Link>\n//     </View>\n//   );\n// };\n\n\n// // export default ProductGridCardVOne; \n\n// const styles = StyleSheet.create({\n//     container: {\n//         width: 182,\n//         height: 240,\n//         marginEnd: 22,\n//         borderRadius: SIZES.medium,\n//         backgroundColor: COLORS.secondary,\n//         // remove\n//     },\n//     imageContainer: {\n//         flex: 1,\n//         width: 170,\n//         marginLeft: SIZES.small/2,\n//         marginTop: SIZES.small/2,\n//         borderRadius: SIZES.small,\n//         overflow: \"hidden\"\n//     },\n//     image: {\n//         aspectRatio: 1,\n//         resizeMode: 'cover'\n//     },\n//     details: {\n//         padding: SIZES.small,\n        \n \n//     },\n//     title: {\n//         fontFamily: \"bold\",\n//         fontSize: SIZES.small ,\n//         marginBottom: 2,\n//         height: 35\n\n//     },\n//     supplier: {\n//         fontFamily: \"regular\",\n//         fontSize: SIZES.small,\n//         color: COLORS.gray\n\n//     },\n//     price: {\n//         fontFamily: \"bold\",\n//         fontSize: SIZES.medium,\n       \n//     },\n//     addBtn: {\n//         position:\"absolute\",\n//         bottom: SIZES.xSmall,\n//         right: SIZES.xSmall,\n        \n\n\n//     }\n\n// })\n\n","import React, { FC } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image, Dimensions } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Link } from 'expo-router';\nimport convertToCurrency from '@/hooks/convertToCurrency';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { useClientProduct } from '@/contexts/ClientProductContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nconst { width } = Dimensions.get('window');\n\nexport interface ProductCardProps {\n  product: ProductModelProps;\n  viewTypeGrid: boolean; // A boolean to determine grid or list view\n}\n// ProductGridCardVOne\nexport const ProductGridCardVOne: FC<ProductCardProps> = ({ product, viewTypeGrid }) => {\n  const { addToCart } = useCart();\n  const { selectProduct } = useClientProduct();\n  const { colors } = useTheme(); // Pulling colors from the custom theme\n\n  const handleProductPress = () => {\n    selectProduct(product);\n  };\n\n  const styles = StyleSheet.create({\n    container: {\n      width: viewTypeGrid ? width / 2 - 40 : width - 40, // Adjust width for grid or list view\n      height: viewTypeGrid ? 250 : 240, // Adjust height for grid or list view\n      margin: viewTypeGrid ? 10 : 22, // Spacing for grid or list view\n      borderRadius: 10,\n      backgroundColor: colors.cardBackground,\n      borderWidth: 2,\n      borderColor: colors.border,\n    },\n    imageContainer: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 10,\n      overflow: 'hidden',\n      marginTop: 10,\n    },\n    image: {\n      width: viewTypeGrid ? 140 : 160, // Adjust image size for grid or list view\n      height: viewTypeGrid ? 140 : 160,\n      borderRadius: 10,\n      resizeMode: 'cover',\n    },\n    details: {\n      padding: 10,\n      color: colors.title,\n    },\n    title: {\n      fontFamily: 'bold',\n      fontSize: 16,\n      marginBottom: 2,\n      height: 35,\n      color: colors.title,\n    },\n    supplier: {\n      fontFamily: 'regular',\n      fontSize: 12,\n      color: colors.title,\n    },\n    price: {\n      fontFamily: 'bold',\n      fontSize: 18,\n      color: colors.title,\n    },\n    addBtn: {\n      position: 'absolute',\n      bottom: 10,\n      right: 10,\n    },\n  });\n\n  return (\n    <View>\n      <Link href={`/products/${product.id}` as never} asChild>\n        <TouchableOpacity onPress={handleProductPress}>\n          <View style={styles.container}>\n            <View style={styles.imageContainer}>\n              <Image style={styles.image} source={{ uri: product.images[0] }} />\n            </View>\n\n            <View style={styles.details}>\n              <Text style={styles.title} numberOfLines={2}>{product.name}</Text>\n              <Text style={styles.supplier} numberOfLines={1}>{product.color_code}</Text>\n              <Text style={styles.price}>{convertToCurrency(product.price)}</Text>\n              {product.item_type === 'subscription' && (\n                <Text style={{ fontSize: 10 }}>/per month</Text>\n              )}\n            </View>\n\n            <TouchableOpacity style={styles.addBtn} onPress={() => addToCart(product)}>\n              <Ionicons\n                name={product.item_type === 'subscription' ? 'arrow-forward-circle-outline' : 'add-circle'}\n                size={35}\n                color={colors.cardText}\n              />\n            </TouchableOpacity>\n          </View>\n        </TouchableOpacity>\n      </Link>\n    </View>\n  );\n};\n\nexport default ProductGridCardVOne;\n\n\n\n\n\n\n\n\n// import React, { FC } from 'react';\n// import { StyleSheet, Text, View, TouchableOpacity, Image, Dimensions, FlatList } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { Link } from 'expo-router';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { useCart } from '@/contexts/CartContext';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { useTheme } from '@/contexts/ThemeContext';\n\n// const { width } = Dimensions.get('window');\n\n// interface ProductHScrollCardVOneProps {\n//   product: ProductModelProps;\n//   viewTypeGrid: boolean; // A boolean to determine grid or list view\n// }\n\n// export const ProductHScrollCardVOne: FC<ProductHScrollCardVOneProps> = ({ product, viewTypeGrid }) => {\n//   const { addToCart } = useCart();\n//   const { selectProduct } = useClientProduct();\n//   const { colors } = useTheme(); // Pulling colors from the custom theme\n\n//   const handleProductPress = () => {\n//     selectProduct(product);\n//   };\n\n//   const styles = StyleSheet.create({\n//     container: {\n//      // width: 162,\n//       //     height: 240,\n//       width: viewTypeGrid ? width - 40 : width / 2 - 30 , // Adjust width for grid or list view\n//       height: viewTypeGrid ? 240 : 250, // Adjust height for grid or list view\n//       margin: viewTypeGrid ? 22 : 10, // Spacing for grid or list view\n//       borderRadius: 10,\n//       backgroundColor: colors.cardBackground,\n//       borderWidth: 2,\n//       borderColor: colors.border,\n//     },\n//     imageContainer: {\n//       flex: 1,\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       borderRadius: 10,\n//       overflow: \"hidden\",\n//       marginTop: 10,\n//     },\n//     image: {\n//       width: viewTypeGrid ? 160 : 140,\n//       height: viewTypeGrid ? 160 : 140,\n//       borderRadius: 10,\n//       resizeMode: 'cover',\n//     },\n//     details: {\n//       padding: 10,\n//       color: colors.title,\n//     },\n//     title: {\n//       fontFamily: \"bold\",\n//       fontSize: 16,\n//       marginBottom: 2,\n//       height: 35,\n//       color: colors.title,\n//     },\n//     supplier: {\n//       fontFamily: \"regular\",\n//       fontSize: 12,\n//       color: colors.title,\n//     },\n//     price: {\n//       fontFamily: \"bold\",\n//       fontSize: 18,\n//       color: colors.title,\n//     },\n//     addBtn: {\n//       position: \"absolute\",\n//       bottom: 10,\n//       right: 10,\n//     },\n//   });\n\n//   return (\n//     <View>\n//       <Link href={`/products/${product.id}` as never} asChild>\n//         <TouchableOpacity onPress={handleProductPress}>\n//           <View style={styles.container}>\n//             <View style={styles.imageContainer}>\n//               <Image style={styles.image} source={{ uri: product.images[0] }} />\n//             </View>\n\n//             <View style={styles.details}>\n//               <Text style={styles.title} numberOfLines={2}>{product.name}</Text>\n//               <Text style={styles.supplier} numberOfLines={1}>{product.color_code}</Text>\n//               <Text style={styles.price}>{convertToCurrency(product.price)}</Text>\n//               {product.item_type === \"subscription\" && (\n//                 <Text style={{ fontSize: 10 }}>/per month</Text>\n//               )}\n//             </View>\n\n//             <TouchableOpacity style={styles.addBtn} onPress={() => addToCart(product)}>\n//               <Ionicons\n//                 name={product.item_type === \"subscription\" ? \"arrow-forward-circle-outline\" : 'add-circle'}\n//                 size={35}\n//                 color={colors.cardText}\n//               />\n//             </TouchableOpacity>\n//           </View>\n//         </TouchableOpacity>\n//       </Link>\n//     </View>\n//   );\n// };\n\n// export default ProductHScrollCardVOne;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { FC, useContext } from 'react';\n// import { StyleSheet, Text, View, TouchableOpacity, Image, Dimensions } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { useNavigation } from '@react-navigation/native';\n// import { SIZES } from '@/utils/theme';\n// import { CONSTANTS } from '@/utils/constants';\n// import { Link } from 'expo-router';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { useCart } from '@/contexts/CartContext';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { StoreTheme, useTheme } from '@/contexts/ThemeContext';\n// // import { useClientProduct } from '@/contexts/ClientProductContext';\n\n// const { width } = Dimensions.get('window');\n\n// export const ProductHScrollCardVOne: FC<{ product: ProductModelProps }> = ({ product }) => {\n//   const navigation = useNavigation();\n//   const { addToCart } = useCart()\n//   const { selectProduct } = useClientProduct();\n//   const { authState,  updateSingleUserItem} = useAuth()\n\n//   const { colors } = useTheme(); // Pulling colors from the custom theme\n\n//   const handleProductPress = () => {\n//     selectProduct(product);\n//   };\n\n\n// const styles = StyleSheet.create({\n//   container: {\n//     width: 162,\n//     height: 240,\n//     marginEnd: 22,\n//     borderRadius: SIZES.medium,\n//     backgroundColor:  colors.cardBackground, // COLORS.secondary,\n//     borderWidth: 2,\n//     borderColor: colors.border,\n//   },\n//   imageContainer: {\n//     flex: 1,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     borderRadius: SIZES.medium,\n//     overflow: \"hidden\",\n//     marginTop: SIZES.small / 2,\n//   },\n//   image: {\n//     width: 142,\n//     height: 142,\n//     borderRadius: SIZES.small,\n//     resizeMode: 'cover',\n//     shadowOpacity: 400,\n//     shadowColor: 'black',\n//   },\n//   details: {\n//     padding: SIZES.small,\n//     color: colors.title\n//   },\n//   title: {\n//     fontFamily: \"bold\",\n//     fontSize: SIZES.small,\n//     marginBottom: 2,\n//     height: 35,\n//     color: colors.title\n\n//   },\n//   supplier: {\n//     fontFamily: \"regular\",\n//     fontSize: SIZES.small,\n//     color: colors.title\n//   },\n//   price: {\n//     fontFamily: \"bold\",\n//     fontSize: SIZES.medium,\n//     color: colors.title\n\n//   },\n//   addBtn: {\n//     position: \"absolute\",\n//     bottom: SIZES.xSmall,\n//     right: SIZES.xSmall,\n//   }\n// });\n\n//   return (\n//     <View>\n//      <Link \n//       href={`/products/${product.id}` as never}  \n//       asChild\n//      >\n//         <TouchableOpacity onPress={handleProductPress}>\n//           <View style={styles.container}>\n//             {/* Image */}\n//             <View style={styles.imageContainer}>\n//               <Image \n//                 style={styles.image} \n//                 source={{ uri: product.images[0]}} \n//               />\n//             </View>\n\n//             {/* Details */}\n//             <View style={styles.details}>\n//               <Text style={styles.title} numberOfLines={2}>{product.name}</Text>\n//               <Text style={styles.supplier} numberOfLines={1}>{product.color_code}</Text>\n//               <Text style={styles.price}>{convertToCurrency(product.price)}</Text>\n//               {product.item_type === \"subscription\" && (\n//                 <Text style={{ fontSize: 10 }}>/per month</Text>\n//               )}\n//             </View>\n\n//             {/* Button */}\n//             <TouchableOpacity style={styles.addBtn} onPress={() =>  addToCart(product)}>\n//               <Ionicons \n//                 name={product.item_type === \"subscription\" ? \"arrow-forward-circle-outline\" : 'add-circle'} \n//                 size={35} \n//                 color={colors.cardText} \n//               />\n//             </TouchableOpacity>\n//           </View>\n//         </TouchableOpacity>\n//       </Link>\n//     </View>\n//   );\n// };\n\n// export default ProductHScrollCardVOne;\n","\nimport React, { FC, useContext } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image, Dimensions } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport { SIZES } from '@/utils/theme';\nimport { CONSTANTS } from '@/utils/constants';\nimport { Link } from 'expo-router';\nimport convertToCurrency from '@/hooks/convertToCurrency';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { useClientProduct } from '@/contexts/ClientProductContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { StoreTheme, useTheme } from '@/contexts/ThemeContext';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n\nconst { width } = Dimensions.get('window');\n\nexport const ProductHScrollCardVOne: FC<{ product: ProductModelProps }> = ({ product }) => {\n  const navigation = useNavigation();\n  const { addToCart } = useCart()\n  const { selectProduct } = useClientProduct();\n  const { authState,  updateSingleUserItem} = useAuth()\n\n  const { colors } = useTheme(); // Pulling colors from the custom theme\n\n  const handleProductPress = () => {\n    selectProduct(product);\n  };\n\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 162,\n    height: 240,\n    marginEnd: 22,\n    borderRadius: SIZES.medium,\n    backgroundColor:  colors.cardBackground, // COLORS.secondary,\n    borderWidth: 2,\n    borderColor: colors.border,\n  },\n  imageContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: SIZES.medium,\n    overflow: \"hidden\",\n    marginTop: SIZES.small / 2,\n  },\n  image: {\n    width: 142,\n    height: 142,\n    borderRadius: SIZES.small,\n    resizeMode: 'cover',\n    shadowOpacity: 400,\n    shadowColor: 'black',\n  },\n  details: {\n    padding: SIZES.small,\n    color: colors.title\n  },\n  title: {\n    fontFamily: \"bold\",\n    fontSize: SIZES.small,\n    marginBottom: 2,\n    height: 35,\n    color: colors.title\n\n  },\n  supplier: {\n    fontFamily: \"regular\",\n    fontSize: SIZES.small,\n    color: colors.title\n  },\n  price: {\n    fontFamily: \"bold\",\n    fontSize: SIZES.medium,\n    color: colors.title\n\n  },\n  addBtn: {\n    position: \"absolute\",\n    bottom: SIZES.xSmall,\n    right: SIZES.xSmall,\n  }\n});\n\n  return (\n    <View>\n     <Link \n      href={`/products/${product.id}` as never}  \n      asChild\n     >\n        <TouchableOpacity onPress={handleProductPress}>\n          <View style={styles.container}>\n            {/* Image */}\n            <View style={styles.imageContainer}>\n              <Image \n                style={styles.image} \n                source={{ uri: product.images[0]}} \n              />\n            </View>\n\n            {/* Details */}\n            <View style={styles.details}>\n              <Text style={styles.title} numberOfLines={2}>{product.name}</Text>\n              <Text style={styles.supplier} numberOfLines={1}>{product.color_code}</Text>\n              <Text style={styles.price}>{convertToCurrency(product.price)}</Text>\n              {product.item_type === \"subscription\" && (\n                <Text style={{ fontSize: 10 }}>/per month</Text>\n              )}\n            </View>\n\n            {/* Button */}\n            <TouchableOpacity style={styles.addBtn} onPress={() =>  addToCart(product)}>\n              <Ionicons \n                name={product.item_type === \"subscription\" ? \"arrow-forward-circle-outline\" : 'add-circle'} \n                size={35} \n                color={colors.cardText} \n              />\n            </TouchableOpacity>\n          </View>\n        </TouchableOpacity>\n      </Link>\n    </View>\n  );\n};\n\nexport default ProductHScrollCardVOne;\n","import { StyleSheet, Text, View , Image, TouchableOpacity} from 'react-native'\nimport React, { FC } from 'react'\n// import { ProductModelProps } from '../../models/ProductModelProps';\nimport { useNavigation } from '@react-navigation/native';\n// import { ProductModelProps } from '../../../models/ProductModelProps';\n// import convertToCurrency from '../../../hook/convertToCurrency';\nimport { COLORS, SHADOWS, SIZES } from '@/utils/theme';\nimport { CONSTANTS } from '@/utils/constants';\nimport { Link } from 'expo-router';\n// import { ProductModelProps } from '@/app/models/ProductModelProps';\nimport convertToCurrency from '@/hooks/convertToCurrency';\nimport { ProductModelProps } from '@/models/ProductModelProps';\n// import { COLORS, SHADOWS, SIZES } from '@/utils/theme';\n// import convertToCurrency from '@/hooks/convertToCurrency';;\n\nexport const ProductCrudCard: FC<ProductModelProps> = (item) => {\n    const navigation = useNavigation();\n    \n    return (\n    <View>\n        \n        {/* @ts-ignore */}\n        <Link href={\"productEdit/\"}>\n        <TouchableOpacity style={styles.container} onPress={() => {}}>\n\n            <View style={styles.image}>\n                <Image source={{uri: item.image ? item.image : CONSTANTS.holderImageProductCard}} style={styles.productImg} />\n            </View>\n            <View style={styles.textContainer}>\n                <Text style={styles.productTitle}>{item.name}</Text>\n                <Text style={styles.supplier}>{convertToCurrency(item.price)}</Text>\n            </View>\n        </TouchableOpacity>\n        </Link>\n    </View>\n  )\n}\n\nexport default ProductCrudCard\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginBottom: SIZES.small,\n        flexDirection: \"row\",\n        padding: SIZES.medium,\n        borderRadius: SIZES.small,\n        backgroundColor: \"#fff\",\n        ...SHADOWS.medium,\n        shadowColor: COLORS.lightWhite,\n        // height: 120\n    },\n    image: {\n        width: 70,\n        backgroundColor: COLORS.secondary,\n        borderRadius: SIZES.medium,\n        justifyContent: \"center\",\n        alignContent: \"center\"\n    },\n    productImg: {\n        width: '100%',\n        height: 65,\n        borderRadius: SIZES.small,\n        resizeMode: \"cover\"\n    },\n    textContainer: {\n        flex: 1,\n        marginHorizontal: SIZES.medium\n    },\n    productTitle: {\n        fontSize: SIZES.medium,\n        fontFamily: \"bold\",\n        color: COLORS.primary\n\n    },\n    supplier: {\n        fontSize: SIZES.small + 2,\n        fontFamily: \"bold\",\n        color: COLORS.gray,\n        marginTop: 3\n\n    }\n})","import { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\nimport React from 'react'\n\nconst DeleteSectionView = () => {\n  return (\n    <View style={styles.deleteContainer}>\n    <Text style={styles.deleteLabel}>Delete account</Text>\n    <Text style={styles.deleteDescription}>\n      Your account will be permanently removed from the application. All your data will be lost.\n    </Text>\n    <TouchableOpacity style={styles.deleteButton}>\n      <Text style={styles.deleteButtonText}>Delete account</Text>\n    </TouchableOpacity>\n  </View>\n  )\n}\n\nexport default DeleteSectionView\n\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n    },\n    header: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      marginBottom: 20,\n      textAlign: 'center',\n    },\n    \n    deleteContainer: {\n      marginTop: 20,\n    },\n    deleteLabel: {\n      fontSize: 18,\n      color: 'red',\n      fontWeight: 'bold',\n      marginBottom: 10,\n    },\n    deleteDescription: {\n      fontSize: 14,\n      color: '#555',\n      marginBottom: 10,\n    },\n    deleteButton: {\n      backgroundColor: 'red',\n      padding: 10,\n      borderRadius: 5,\n    },\n    deleteButtonText: {\n      color: '#fff',\n      textAlign: 'center',\n      fontWeight: 'bold',\n    },\n  });\n  \n  ","import { StyleSheet, Text, View } from 'react-native'\nimport React from 'react'\n\nconst Divider = () => {\n  return (\n    <View style={styles.divider}/>\n  )\n}\n\nexport default Divider\n\nconst styles = StyleSheet.create({\n\n    divider: {\n        height: 1,\n        backgroundColor:  '#EAEAEA',\n        marginTop: 10,\n        marginBottom: 10\n    }\n})","import { Link } from 'expo-router';\nimport * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { Platform } from 'react-native';\n\nexport function ExternalLink(\n  props: Omit<React.ComponentProps<typeof Link>, 'href'> & { href: string }\n) {\n  return (\n    <Link\n      target=\"_blank\"\n      {...props}\n      href={props.href as never}\n      onPress={(e) => {\n        if (Platform.OS !== 'web') {\n          // Prevent the default behavior of linking to the default browser on native.\n          e.preventDefault();\n          // Open the link in an in-app browser.\n          WebBrowser.openBrowserAsync(props.href as string);\n        }\n      }}\n    />\n  );\n}\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\n// import Colors from '@/constants/Colors';\nimport { useColorScheme } from '../hooks/useColorScheme';\nimport { COLORS } from '@/utils/theme';\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof COLORS.light & keyof typeof COLORS.dark\n) {\n  const theme = useColorScheme() ?? 'light';\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return COLORS[theme][colorName];\n  }\n}\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","// import { Text, TextProps } from './Themed';\n\nimport { Text, TextProps } from \"./Themed\";\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'SpaceMono' }]} />;\n}\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport { ExternalLink } from './ExternalLink';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\nimport { COLORS } from '@/utils/theme';\n\n// import Colors from '@/constants/Colors';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <ExternalLink\n          style={styles.helpLink}\n          href=\"https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet\">\n          <Text style={styles.helpLinkText} lightColor={COLORS.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </ExternalLink>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StyleSheet, Text, View , Image, TouchableOpacity, Pressable} from 'react-native'\nimport React, { FC } from 'react'\nimport { ProductModelProps } from '../../models/ProductModelProps';\nimport convertToCurrency from '../../hooks/convertToCurrency';;\nimport { CONSTANTS } from '../../utils/constants';\nimport { COLORS, SHADOWS, SIZES } from '../../utils/theme';\nimport { Link, router } from 'expo-router';\n// import { CONSTANTS } from '@/utils/constants'; \n// import { COLORS, SHADOWS, SIZES } from '@/utils/theme';\n// \n\nconst ProductListItem: FC<ProductModelProps> = (item) => {\n    // const navigation = useNavigation();\n  return (\n    <View>\n        <Link href={`products/${item.id}` as never} asChild>\n        {/* <Link href={`products/${item.id}`} asChild> */}\n\n        {/* @ts-ignore */}\n      \n        {/* <TouchableOpacity style={styles.container} onPress={() => navigation.navigate(\"ProductDetails\" , { item })}> */}\n        <Pressable style={styles.container} >\n            <View style={styles.image}>\n                <Image source={{uri: item.image  ? item.image : CONSTANTS.holderImageProductCard}} style={styles.productImg} />\n            </View>\n            <View style={styles.textContainer}>\n                <Text style={styles.productTitle}>{item.name}</Text>\n                <Text style={styles.supplier}>{item.color_code}</Text>\n                <Text style={styles.supplier}>{convertToCurrency(item.price)}</Text>\n            </View>\n        </Pressable>\n     </Link>\n    </View>\n  )\n}\n\nexport default ProductListItem\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginBottom: SIZES.small,\n        flexDirection: \"row\",\n        padding: SIZES.medium,\n        borderRadius: SIZES.small,\n        backgroundColor: \"#fff\",\n        ...SHADOWS.medium,\n        shadowColor: COLORS.lightWhite,\n        // height: 120\n    },\n    image: {\n        width: 70,\n        backgroundColor: COLORS.secondary,\n        borderRadius: SIZES.medium,\n        justifyContent: \"center\",\n        alignContent: \"center\"\n    },\n    productImg: {\n        width: '100%',\n        height: 65,\n        borderRadius: SIZES.small,\n        resizeMode: \"cover\"\n    },\n    textContainer: {\n        flex: 1,\n        marginHorizontal: SIZES.medium\n    },\n    productTitle: {\n        fontSize: SIZES.medium,\n        fontFamily: \"bold\",\n        color: COLORS.primary\n\n    },\n    supplier: {\n        fontSize: SIZES.small + 2,\n        fontFamily: \"bold\",\n        color: COLORS.gray,\n        marginTop: 3\n\n    }\n})","import { StyleSheet, Text, View } from 'react-native'\n\n\nexport const generalStyles = StyleSheet.create({\n    center : {\n        alignItems: 'center',\n        width: '100%'\n    },\n    container: {\n        // padding: 16\n        flex: 1,\n        // backgroundColor: '#fff',\n      },\n})","\n export const stripeConverter = (amountInCents: number) => {\n    // Convert dollars to cents\n    const amount = amountInCents * 100;\n    \n    // Return the amount\n    return amount;\n};\n    ","import { ProductModelProps } from '../models/ProductModelProps';\nimport { CONSTANTS } from '../utils/constants';\nimport { BASE_URL } from '../utils/api';\nimport { createFetchClient } from '../utils/createFetchClient';\n\ninterface PaymentJsonProps  {\n  amount: number; // Example value, replace with your actual data\n  currency: string; // Example value, replace with your actual data\n  shipping_fee: number; // Example value, replace with your actual data\n  stripe_id: string; // Example value, replace with your actual data\n  app_name: string; // Example value, replace with your actual data\n}\n\n// Create a fetch client instance for payment API\nconst paymentApi = createFetchClient(\n  BASE_URL,\n  {\n    store_id: \"static\", // fix\n    email: \"static\", // user?.email ?? \"\",\n    tableName: 'prof-website-payment-table',\n    stripe_id: \"acct_1NVCh3JEHBX7gOQA\", // Example value, replace with your actual data\n    showFilteredItems: 'true',\n  },\n  {\n    Authentication: \"token\", // Replace with actual token logic if needed\n    'Content-Type': 'application/json',\n  }\n);\n\n// API Calls\n\n// GET payment data\nexport const getpayment = async () => {\n  return await paymentApi.get(`/payment`);\n};\n\n// CREATE Payment Intent\nexport const createPaymentIntent = async (paymentJsonProps: PaymentJsonProps) => {\n  try {\n    const response = await paymentApi.post('/create-payment-intent', paymentJsonProps);\n    return response;\n  } catch (error) {\n    console.error('Error creating payment intent:', error);\n    throw error;\n  }\n};\n\n// Show Stripe Hosted Page\nexport const showStripeHostedPage = async (priceID: string) => {\n  try {\n    const response = await paymentApi.post('/pay/stripe-hosted-page', { priceID });\n    return response;\n  } catch (error: any) {\n    console.error('Error:', error.message);\n    throw error;\n  }\n};\n\nexport default paymentApi;\n\n\n\n\n\n\n// // import { BASE_URL } from '../utils/api';\n// import { ProductModelProps } from '../models/ProductModelProps';\n// import { CONSTANTS } from '../utils/constants';\n// import { BASE_URL } from '../utils/api';\n// // import { BASE_URL } from '../utils/api';\n// // import { CONSTANTS } from '../utils/constants';\n// // import { CONSTANTS } from '../utils/constants';\n\n\n// interface PaymentJsonProps  {\n//   amount: number, // Example value, replace with your actual data\n//   currency: string, // Example value, replace with your actual data\n//   shipping_fee: number, // Example value, replace with your actual data\n//   stripe_id: string, // Example value, replace with your actual data\n//   app_name: string // Example value, replace with your actual data\n// };\n\n\n//   const paymentApi = axios.create({\n//     baseURL: BASE_URL,\n//     headers: {\n//         Authentication: \"token\",\n//         'Content-Type': 'application/json',\n//     },\n//     params: {\n//       store_id: CONSTANTS.store_id,\n//       email: \"\", // user?.email ?? \"\",\n//       tableName: 'prof-website-payment-table', \n//       stripe_id: \"acct_1NVCh3JEHBX7gOQA\", // Example value, replace with your actual data\n//       showFilteredItems: true\n//     },\n//   });\n\n\n// export const getpayment = async () => {\n//   return await paymentApi.get(`/payment`);\n// };\n\n\n\n// export const createPaymentIntent = async (paymentJsonProps: PaymentJsonProps) => {\n//   try {\n//     const response = await paymentApi.post('/create-payment-intent', paymentJsonProps);\n//     return response.data; // Assuming you want to return the response data\n//   } catch (error) {\n//     throw error; // Rethrow the error to handle it outside\n//   }\n// };\n\n\n// export const showStripeHostedPage = async (priceID: string) => {\n//   try {\n//     const response = await paymentApi.post('/pay/stripe-hosted-page', { priceID });\n//     return response.data; // Assuming you want to return the full response data\n//   } catch (error : any) {\n//     console.error('Error:', error.response?.data || error.message);\n//     // console.log(error.response.data)\n\n//     throw error.response?.data || error.message; // Rethrow the error with more context\n//   }\n// };\n\n\n// export default paymentApi;","import { StoreModelProps } from '../models/StoreModelProps';\nimport { TOKEN_KEY } from '../contexts/AuthContext';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { BASE_URL } from '@/utils/api';\nimport { CONSTANTS } from '@/utils/constants';\n\nconst storeTableName =  'prof-website-store-table'\n\n// Initialize the fetch client with the base URL and headers\nconst clientStoresApi = createFetchClient(\n  BASE_URL, // Base URL includes the `/prod` part\n  {}, // No default parameters for now\n  { 'Content-Type': 'application/json' } // Default headers\n);\n\n// GET ALL STORES\nexport async function getClientStoresApi(storeID: string, email: string) {\n  try {\n    const response = await clientStoresApi.get('/stores', {\n      params: {\n        store_id: storeID,\n        email: email,\n      },\n      headers: {\n        Authentication: TOKEN_KEY,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching stores:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// GET SINGLE STORE\nexport async function getClientStoreApi(id: string) {\n  try {\n    const response = await clientStoresApi.get('/store', {\n      params: {\n        id,\n        tableName: storeTableName,\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching store:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// POST - CREATE OR UPDATE STORE\nexport const postClientStoreApi = async (store: StoreModelProps, storeID: string, email: string, token: string) => {\n  try {\n    const response = await clientStoresApi.post('/store', store, {\n      params: {\n        store_id: storeID,\n        email: email,\n      },\n      headers: {\n        Authentication: token,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error posting store:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// PUT - UPDATE STORE\nexport const updateClientStoreApi = async (store: StoreModelProps) => {\n  try {\n    const response = await clientStoresApi.put(`/store?id=${store.id}`, store);\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error updating store:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// DELETE STORE\nexport const deleteClientStoreApi = async (id: string) => {\n  try {\n    const response = await clientStoresApi.delete('/store', {\n      params: { id },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error deleting store:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n","import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\nimport { getClientStoreApi } from '@/api/storeApi';\nimport { StoreModelProps } from '@/models/StoreModelProps';\nimport { CONSTANTS } from '@/utils/constants';\n\n// error make sure to use client / mankind / customer ... store etc/\n\n\ninterface ClientStoreContextProps { \n  store: StoreModelProps | null;\n  getClientStore: (store_id: string) => void;\n  addStore: (store: StoreModelProps) => void;\n  removeStore: () => void;\n  selectedStore: StoreModelProps | null;\n  selectStore: (store: StoreModelProps) => void;\n  error: string | null;\n  isLoading: boolean;\n\n}\n\nconst ClientStoreContext = createContext<ClientStoreContextProps | undefined>(undefined);\n\nexport const useClientStore = (): ClientStoreContextProps => {\n  const context = useContext(ClientStoreContext);\n  if (!context) {\n    throw new Error('useClientStore must be used within a ClientStoreProvider');\n  }\n  return context;\n};\n\nexport const ClientStoreProvider = ({ children }: { children: ReactNode }) => {\n  const [store, setStore] = useState<StoreModelProps | null>(null);\n  const [selectedStore, setSelectedStore] = useState<StoreModelProps | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const addStore = (newStore: StoreModelProps) => setStore(newStore);\n\n  const removeStore = () => setStore(null);\n\n  const selectStore = (store: StoreModelProps) => setSelectedStore(store);\n\n  const getClientStore = async (store_owner_id: string) => {\n    setIsLoading(true); // Start loading state\n    setError(null); // Reset previous errors\n    try {\n      const response = await getClientStoreApi(store_owner_id);\n      setStore(response);\n      // console.log(`Fetched client store: ${JSON.stringify(response)}`);\n    } catch (error: any) {\n      console.error(\"Error fetching store:\", error.message);\n      setError(error.message || \"Failed to fetch store. Please try again later.\");\n    } finally {\n      setIsLoading(false); // End loading state\n    }\n  };\n\n  return (\n    <ClientStoreContext.Provider\n      value={{\n        store,\n        getClientStore,\n        addStore,\n        removeStore,\n        selectedStore,\n        selectStore,\n        error,\n        isLoading\n      }}\n    >\n      {children}\n    </ClientStoreContext.Provider>\n  );\n};\n","import { Alert, Platform, StyleSheet, Text, View } from 'react-native'\nimport React, { FC, useContext, useEffect, useState } from 'react'\nimport { StripeProvider, usePlatformPay, PlatformPayButton, PlatformPay, usePaymentSheet } from '@stripe/stripe-react-native'\nimport { useFocusEffect } from '@react-navigation/native';\nimport { CartContext, useCart } from '@/contexts/CartContext';\nimport { stripeConverter } from '@/hooks/stripeConverter';\nimport { CONSTANTS } from '@/utils/constants';\nimport { createPaymentIntent } from '@/api/paymentApi';\nimport { useClientStore } from '@/contexts/ClientStoreContext';\n\n \ninterface PaymentPayScreenProps  {\n    goBack?: () => void\n    publishableKey: string\n    amount: number\n    shippingAmount: number\n    \n}\n\n\nexport const PaymentPayScreen: FC<PaymentPayScreenProps> = (props) => {\n    const [ready, setReady] = useState(false)\n    const [clientSecret, setClientSecret] = useState('')\n    const { isPlatformPaySupported, confirmPlatformPayPayment } = usePlatformPay()\n    // const { carts, totalSum, totalShipping, totalTax, grandTotal, deleteItemFromCart, clearData, decreaseFromCart} = useCart\n    const { carts, totalSum, totalShipping, totalTax, grandTotal, deleteItemFromCart, clearData, decreaseFromCart} = useCart()\n\n    const {store} = useClientStore()\n    // const {initPaymentSheet, presentPaymentSheet, loading} = usePaymentSheet()\n\n    useEffect(() => {\n        setup()\n        // initialisePaymentSheet()\n        console.log(\"Payment set up completed\")\n\n    }, [])\n\n    // useFocusEffect(\n    //     React.useCallback(() => {\n    //       // Run this function every time the screen comes into focus\n    //       console.log('Screen focused');\n    //      setup()\n    //     // initialisePaymentSheet()\n    //     console.log(\"Payment set up completed\")\n\n    //     }, [])\n    //   );\n\n    // const initialisePaymentSheet = async () => {\n    //     const { paymentInent, ephemeralKey , customer } = await fetchPaymentSheet({\n\n    //     })\n    // }\n\n\n    const setup = async () => {\n        // Perform any setup here if needed\n        if(!(await isPlatformPaySupported())) {\n            // console.log\n            Alert.alert(\n                'Error',\n                `${\n                    Platform.OS === 'android' ? 'Google': 'Apple'\n                } Pay is not supported. `\n            )\n            return\n        } else {\n           await isPlatformPaySupported()\n           // setup()\n            console.log(\"sorry..\")\n        }\n\n        const paymentData = {\n            amount: stripeConverter(props.amount), // Example value, replace with your actual data\n            currency: \"USD\", // Example value, replace with your actual data\n            shipping_fee: stripeConverter(props.shippingAmount), // Example value, replace with your actual data\n            stripe_id: \"acct_1NVCh3JEHBX7gOQA\", //  store?.stripe_id ?? \"\", //\"acct_1NVCh3JEHBX7gOQA\", // Example value, replace with your actual data\n            app_name: store?.store_name ?? \"\" // CONSTANTS.appName // Example value, replace with your actual data\n          };\n\n        const response = await createPaymentIntent(paymentData);\n\n       // const result = response.json\n        setClientSecret(response.clientSecret)\n        // console.log(clientSecret)\n        console.log(`This is the best button - ${response.clientSecret}`)\n        setReady(true)\n    }\n\n    // async function buy() {\n    //     if (ready == true) {\n    //         setup()\n    //     }\n    //     setReady(false)\n\n       \n\n    //     const { error } = await confirmPlatformPayPayment(clientSecret, {\n    //         applePay: {\n    //             cartItems: carts.map(item => ({\n    //                 label: store?.store_name, //  CONSTANTS.appName, // pay ....\n    //                 amount: String(item.price),\n    //                 paymentType: PlatformPay.PaymentType.Immediate\n    //             })),\n\n    //             // cartItems: [\n    //             //     {\n    //             //         label: CONSTANTS.appName,\n    //             //         amount: String(props.amount), // '12',// \n    //             //         paymentType: PlatformPay.PaymentType.Immediate,\n                        \n             \n                      \n    //             //     }\n    //             // ],\n    //             merchantCountryCode: \"US\",\n    //             currencyCode: 'USD',\n            \n    //             // requiredBillingContactFields: [\n    //             //     ContactField.EmailAddress,\n    //             //     ContactField.Name,\n    //             //     ContactField.PhoneNumber,\n    //             //     ContactField.PhoneticName,\n    //             //     ContactField.PostalAddress\n    //             // ]\n                \n                \n    //         },\n    //         googlePay: {\n    //             testEnv: true,\n    //             merchantName: 'My merchant name',\n    //             merchantCountryCode: 'US',\n    //             currencyCode: 'USD',\n    //             billingAddressConfig: {\n    //               format: PlatformPay.BillingAddressFormat.Full,\n    //               isPhoneNumberRequired: true,\n    //               isRequired: true,\n    //             },\n    //         },\n        \n    //     })\n\n    async function buy() {\n      try {\n        if (ready) {\n          await setup();  // Ensure setup is awaited\n        }\n        setReady(false);\n    \n        const { error } = await confirmPlatformPayPayment(clientSecret, {\n          applePay: {\n            cartItems: carts.map((item) => ({\n              label: store?.store_name || 'Your Store Name', // Ensure fallback for label\n              amount: String(item.price),\n              paymentType: PlatformPay.PaymentType.Immediate,\n            })),\n            merchantCountryCode: 'US',\n            currencyCode: 'USD',\n          },\n          googlePay: {\n            testEnv: true,\n            merchantName: 'My merchant name',\n            merchantCountryCode: 'US',\n            currencyCode: 'USD',\n            billingAddressConfig: {\n              format: PlatformPay.BillingAddressFormat.Full,\n              isPhoneNumberRequired: true,\n              isRequired: true,\n            },\n          },\n        });\n    \n        if (error) {\n          throw new Error(`Payment failed: ${error.message}`);\n        }\n    \n        Alert.alert('Success', 'The payment was confirmed successfully');\n        console.log('Success', 'The payment was confirmed successfully');\n      } catch (error: any) {\n        setReady(true); // Ensure ready is reset so the button can be used again\n        console.error('Buy error:', error);\n        Alert.alert('Payment Error', error.message || 'An error occurred during payment');\n      }\n    }\n    \n    return (\n        <View style={{}}>\n            <StripeProvider\n                publishableKey={props.publishableKey}\n                merchantIdentifier={CONSTANTS.merchant_id} // Use the correct constant\n            >\n                <View>\n                     \n                    <PlatformPayButton\n                        onPress={buy}\n                        disabled={!ready}\n                        style={styles.payButton}\n                       // appearance={PlatformPay.ButtonStyle.Black}\n                        borderRadius={4}\n                        type={5} //{PlatformPay.ButtonType.AddMoney}\n                    />\n                </View>\n            </StripeProvider> \n        </View>\n    )\n}\n\nexport default PaymentPayScreen\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: 'red',\n    },\n    payButton: {\n        backgroundColor: 'black',\n        tintColor: 'red',\n        width: '100%',\n        height: 50,\n        borderRadius: 5,\n        color: 'red',\n       \n    },\n    buttons: {\n        marginTop: 20,\n    }\n})\n\n\n\n// import { Alert, Platform, StyleSheet, Text, View } from 'react-native';\n// import React, { FC, useContext, useEffect, useState } from 'react';\n// import { StripeProvider, usePlatformPay, PlatformPayButton, PlatformPay } from '@stripe/stripe-react-native';\n// import { useFocusEffect } from '@react-navigation/native';\n// import { useCart } from '../../../contexts/CartContext';\n// import { useClientStore } from '../../../contexts/ClientStoreContext';\n// import { stripeConverter } from '../../../hooks/stripeConverter';\n// import { createPaymentIntent } from '../../../api/paymentApi';\n// import { CONSTANTS } from '../../../utils/constants';\n// // import { CartContext } from '@/contexts/CartContext';\n// // import { stripeConverter } from '@/hooks/stripeConverter';\n// // import { CONSTANTS } from '@/utils/constants';\n// // import { createPaymentIntent } from '@/api/paymentApi';\n// // import { useClientStore } from '@/contexts/ClientStoreContext';\n// // import { stripeConverter } from '@/hooks/stripeConverter';\n\n// interface PaymentPayScreenProps {\n//   goBack?: () => void;\n//   publishableKey: string;\n//   amount: number;\n//   shippingAmount: number;\n// }\n\n// export const PaymentPayScreen: FC<PaymentPayScreenProps> = (props) => {\n//   const [ready, setReady] = useState(false);\n//   const [clientSecret, setClientSecret] = useState('');\n//   const { isPlatformPaySupported, confirmPlatformPayPayment } = usePlatformPay();\n//   const { store } = useClientStore();\n//   const { carts, totalSum, totalShipping, totalTax, grandTotal, quantity, deleteItemFromCart, clearData, decreaseFromCart} = useCart()\n\n//   useFocusEffect(\n//     React.useCallback(() => {\n//       console.log('Screen focused');\n//       setup();\n//     }, [])\n//   );\n\n//   const setup = async () => {\n//     try {\n//       if (!(await isPlatformPaySupported())) {\n//         Alert.alert(\n//           'Error',\n//           `${Platform.OS === 'android' ? 'Google' : 'Apple'} Pay is not supported.`\n//         );\n//         return;\n//       }\n\n//       const paymentData = {\n//         amount: stripeConverter(props.amount),\n//         currency: 'USD',\n//         shipping_fee: stripeConverter(props.shippingAmount),\n//         stripe_id:  'acct_1NVCh3JEHBX7gOQA', // store?.stripe_id ??\n//         app_name: store?.store_name ?? '',\n//       };\n\n//       const response = await createPaymentIntent(paymentData);\n//       setClientSecret(response.clientSecret);\n//       console.log(`Client Secret: ${response.clientSecret}`);\n//       setReady(true);\n//     } catch (error) {\n//       console.error('Error during setup:', error);\n//       Alert.alert('Setup Error', 'There was an error setting up the payment.');\n//     }\n//   };\n\n//   const buy = async () => {\n//     if (!ready) {\n//       return;\n//     }\n    \n//     setReady(false);\n\n//     try {\n//       const { error } = await confirmPlatformPayPayment(clientSecret, {\n//         applePay: {\n//           cartItems: carts.map(item => ({\n//             label: store?.store_name ?? CONSTANTS.appName,\n//             amount: String(item.price),\n//             paymentType: PlatformPay.PaymentType.Immediate,\n//           })),\n//           merchantCountryCode: 'US',\n//           currencyCode: 'USD',\n//         },\n//         googlePay: {\n//           testEnv: true,\n//           merchantName: 'My merchant name',\n//           merchantCountryCode: 'US',\n//           currencyCode: 'USD',\n//           billingAddressConfig: {\n//             format: PlatformPay.BillingAddressFormat.Full,\n//             isPhoneNumberRequired: true,\n//             isRequired: true,\n//           },\n//         },\n//       });\n\n//       if (error) {\n//         setReady(true);\n//         Alert.alert(`Error code: ${error.code}`, error.message);\n//         console.log(`Error code: ${error.code}`, error.message);\n//       } else {\n//         Alert.alert('Success', 'The payment was confirmed successfully');\n//         console.log('Success', 'The payment was confirmed successfully');\n//       }\n//     } catch (error) {\n//       console.error('Payment error:', error);\n//       Alert.alert('Payment Error', 'There was an error processing the payment.');\n//       setReady(true);\n//     }\n//   };\n\n//   return (\n//     <View>\n//     <View style={styles.container}>\n\n//       <StripeProvider\n//         publishableKey={props.publishableKey}\n//         merchantIdentifier={CONSTANTS.merchant_id}\n//       >\n//         <PlatformPayButton\n//           onPress={buy}\n//           disabled={!ready}\n//           style={styles.payButton}\n//           borderRadius={4}\n//           type={PlatformPay.ButtonType.Pay}\n//         />\n//       </StripeProvider>\n\n\n//       </View>\n//       </View>\n//   );\n// };\n\n// export default PaymentPayScreen;\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   payButton: {\n//     width: '100%',\n//     height: 50,\n//     borderRadius: 5,\n//   },\n// });\n\n\n","import { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native'\nimport React, { FC, useContext, useState } from 'react'\nimport { COLORS, SIZES } from '@/utils/theme'\n// import { ProductModelProps } from '../../models/ProductModelProps'\nimport convertToCurrency from '@/hooks/convertToCurrency';\n// import {  useCart } from '../../contexts/CartContext'\nimport { Ionicons , SimpleLineIcons} from \"@expo/vector-icons\"\n// import { stripeConverter } from '../../hook/stripeConverter'\n// import { useAuth } from '../../contexts/AuthContext'\n// import { createPaymentIntent } from '../../api/paymentApi'\nimport { CONSTANTS } from '@/utils/constants'\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { useTheme } from \"@/contexts/ThemeContext\"\n\nconst CartCard = ({ item }: any) => {\n    const { deleteItemFromCart, addToCart , decreaseFromCart, totalSum} = useCart()\n    const [quantity, setQuantity] = useState(item.quantity);\n    const {authState, onLogout} = useAuth()\n    const [paymentStatus, setPaymentStatus] = useState('ijiij');\n\n    const { colors } = useTheme()\n    // Plus\n    const increment = () => {\n        // handlePayment(totalSum, 10)\n\n        addToCart(item)\n    };\n\n    // Minus\n    const decrement = () => {\n        // handlePayment(totalSum, 10)\n        if (item.quantity === 1) {\n          // remove it or do nothing..\n          console.log(\"do nothing\")\n\n        } else {\n            console.log(\"remove 1\")\n            decreaseFromCart(item)\n        }\n    };\n\n  \n  \n  \n  \n    // async function handlePayment(amount: number, shippingAmount: number) {\n  \n    //   //  WORKS GETTING CLIENT ID\n    //   try {\n    //     const paymentData = {\n    //       amount: stripeConverter(amount), // Example value, replace with your actual data\n    //       currency: \"USD\", // Example value, replace with your actual data\n    //       shipping_fee: stripeConverter(shippingAmount), // Example value, replace with your actual data\n    //       // (FIX) - USE STORE.STRIPE\n    //       stripe_id: \"acct_1NVCh3JEHBX7gOQA\", // Example value, replace with your actual data\n    //       app_name: CONSTANTS.appName // Example value, replace with your actual data\n    //     };\n        \n    //     const response = await createPaymentIntent(paymentData);\n    //     // Handle successful response\n    //     setPaymentStatus('Payment successful!');\n    //     console.log(response)\n    //   } catch (error) {\n    //     // Handle error\n    //     setPaymentStatus('Payment failed!');\n    //     // setPaymentStatus(error);\n  \n    //     console.error('Error creating payment intent:', error);\n    //   }\n    // };\n  \n        \n    \nconst styles = StyleSheet.create({\n    container: {\n     marginVertical: 10,\n     flexDirection: 'row'\n    },\n    img : {\n      height: 125,\n      width: \"25%\",\n      borderRadius: 10\n    },\n    cardContent: {\n        flex: 1,\n        marginHorizontal: 10\n    },\n    title: {\n        fontSize: 15,\n        color: colors.title // \"#444444\"\n    },\n    price: {\n        color: \"#797979\",\n        marginVertical: 7,\n        fontSize: 18\n    },\n    circleSizeContainer: {\n        flexDirection: \"row\",\n       \n    },\n    circle: {\n        height: 32,\n        width: 32,\n        borderRadius: 16,\n        backgroundColor: \"#444444\",\n       \n    },\n    sizeCircle: {\n        backgroundColor: \"white\",\n        height: 32,\n        width: 32,\n        borderRadius: 16,\n        justifyContent: 'center',\n        alignItems: \"center\",\n       \n    },\n    sizeText: {\n        fontSize: 18,\n        fontWeight: \"500\"\n    },\n    rating : {\n        top: SIZES.large,\n        flexDirection: \"row\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        // marginHorizontal: SIZES.large\n    \n      }, \n      ratingText: {\n        color: COLORS.gray,\n        fontFamily: \"medium\",\n         paddingHorizontal: SIZES.xSmall\n      },\n    \n  })\n\n  return (\n   \n      <View style={styles.container}>\n     \n        <Image style={styles.img} source={{uri: item.images[0]  ? item.images[0] : CONSTANTS.holderImage}}/>\n        <View style={styles.cardContent}>\n            <Text style={styles.title}>{item.name}</Text>\n            <Text style={styles.price}>{convertToCurrency(item.price)} x {item.quantity}</Text>\n            {/* <Text style={styles.price}>{convertToCurrency(item.price * item.quantity) }</Text> */}\n            \n            {/* <View style={styles.circleSizeContainer}>\n                <View style={styles.circle} />\n            </View>  */}\n                \n<View style={styles.rating}>\n        <TouchableOpacity onPress={()=>increment()}>\n          <SimpleLineIcons  style={{color: item.quantity === 1 ? colors.title : colors.title }}  name='plus' size={20} />\n        </TouchableOpacity>\n\n        <Text style={styles.ratingText}>{item.quantity}</Text>\n\n        <TouchableOpacity  onPress={()=> decrement()}>\n          <SimpleLineIcons style={{color: item.quantity === 1 ? 'gray': colors.title}} name='minus' size={20} />\n        </TouchableOpacity>\n \n\n                {/* <View style={styles.sizeCircle}> */}\n                    {/* <Text style={styles.sizeText}>L</Text>\n                </View>    */}\n\n              \n            </View>\n\n        </View>\n        <TouchableOpacity onPress={() => deleteItemFromCart(item)}>\n            <Ionicons name='trash-outline' size={SIZES.xLarge} color={colors.title}/>\n        </TouchableOpacity>    \n\n        <View>\n\n        </View>\n      </View>\n  \n  )\n}\n\nexport default CartCard\n","import { CollectionModelProps } from '../models/CollectionModelProps';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { createFetchClientForItems } from '../utils/createFetchClientForItems';\nimport { BASE_URL } from '@/utils/api';\n\nconst collectionTableName = 'prof-website-collection-table';\n\n// Collection\nconst clientCollectionApi = createFetchClient(\n  BASE_URL, // Base URL includes the `/prod` part\n  {}, // No default parameters for now\n  { 'Content-Type': 'application/json' } // Default headers\n);\n\n// Collections\nconst clientCollectionsApi = createFetchClientForItems(\n  BASE_URL,\n  {},{}\n  // { showFilteredItems: 'false' }, // Default as string\n  // { 'Content-Type': 'application/json' }\n);\n\n// GET ALL PRODUCTS\nexport const getClientCollectionsApi = async (storeID: string, showFilteredItems: boolean) => {\n  const response = await clientCollectionsApi.get('/collections', {\n    params: {\n      store_id: storeID,\n      tableName: collectionTableName,\n      showFilteredItems: showFilteredItems ? 'true' : 'false', // Convert boolean to string\n    },\n  });\n\n  return response;\n};\n\n// GET SINGLE PRODUCT\nexport async function getClientCollectionApi(id: string) {\n  try {\n    const response = await clientCollectionApi.get('/collection', {\n      params: {\n        id,\n        tableName: collectionTableName,\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching collection:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// POST - CREATE OR UPDATE PRODUCT\nexport const postClientCollectionApi = async (collection: CollectionModelProps, collectionID: string, email: string, token: string) => {\n  try {\n    const response = await clientCollectionApi.post('/collection', collection, {\n      params: {\n        collection_id: collectionID,\n        email: email,\n      },\n      headers: {\n        Authentication: token,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error posting collection:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// PUT - UPDATE PRODUCT\nexport const updateClientCollectionApi = async (collection: CollectionModelProps) => {\n  try {\n    const response = await clientCollectionApi.put(`/collection?id=${collection.id}`, collection);\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error updating collection:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// DELETE PRODUCT\nexport const deleteClientCollectionApi = async (id: string) => {\n  try {\n    const response = await clientCollectionApi.delete('/collection', {\n      params: { id },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error deleting collection:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n\n","import React, { createContext, useContext, useState, ReactNode, useEffect, useCallback } from 'react';\nimport { getClientCollectionApi, getClientCollectionsApi } from '@/api/collectionApi';\nimport { CollectionModelProps } from '@/models/CollectionModelProps';\n\ninterface ClientCollectionContextProps {\n  collection: CollectionModelProps | null;\n  collections: CollectionModelProps[];\n  getClientCollections: (store_id: string) => Promise<void>;\n  getClientCollection: (collection_owner_id: string) => Promise<void>;\n  addCollection: (collection: CollectionModelProps) => void;\n  removeCollection: () => void;\n  selectedCollection: CollectionModelProps | null;\n  selectCollection: (collection: CollectionModelProps) => void;\n  error: string | null;\n  isLoading: boolean;\n}\n\nconst ClientCollectionContext = createContext<ClientCollectionContextProps | undefined>(undefined);\n\nexport const useClientCollection = (): ClientCollectionContextProps => {\n  const context = useContext(ClientCollectionContext);\n  if (!context) {\n    throw new Error('useClientCollection must be used within a ClientCollectionProvider');\n  }\n  return context;\n};     \n\nexport const ClientCollectionProvider = ({ children }: { children: ReactNode }) => {\n  const [collection, setCollection] = useState<CollectionModelProps | null>(null);\n  const [collections, setCollections] = useState<CollectionModelProps[]>([]);\n  const [selectedCollection, setSelectedCollection] = useState<CollectionModelProps | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  // Add collection to the state\n  const addCollection = useCallback((newCollection: CollectionModelProps) => {\n    setCollection(newCollection);\n  }, []);\n\n  // Remove the collection from the state\n  const removeCollection = useCallback(() => {\n    setCollection(null);\n  }, []);\n\n  // Select a collection as active\n  const selectCollection = useCallback((collection: CollectionModelProps) => {\n    setSelectedCollection(collection);\n  }, []);\n\n  // Fetch a single collection\n  const getClientCollection = useCallback(async (collection_owner_id: string) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await getClientCollectionApi(collection_owner_id);\n      setCollection(response.data);\n      console.log(`Fetched client collection Successfully`);\n      // console.log(`Fetched client collection: ${JSON.stringify(response.data, null, 2)}`);\n    } catch (error: any) {\n      console.error(\"Error fetching collection:\", error.message);\n      setError(error.message || \"Failed to fetch collection. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Fetch multiple collections\n  const getClientCollections = useCallback(async (store_id: string): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response: CollectionModelProps[] = await getClientCollectionsApi(store_id, true);\n      // console.log(\"Full API response:\", JSON.stringify(response, null, 2));\n      if (!response || response.length === 0) {\n        throw new Error('No data returned from the API');\n      }\n\n      const validCollections = response.filter(collection => collection && collection.id);\n      setCollections(validCollections);\n      // console.log(`Fetched client collections: ${JSON.stringify(validCollections, null, 2)}`);\n      console.log(`Fetched client collections Successfully`);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"Error fetching collections:\", error.message);\n        setError(error.message || \"Failed to fetch collections. Please try again later.\");\n      } else {\n        console.error(\"Unknown error fetching collections\");\n        setError(\"Failed to fetch collections. Please try again later.\");\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  return (\n    <ClientCollectionContext.Provider\n      value={{\n        collection,\n        collections,\n        getClientCollection,\n        getClientCollections,\n        addCollection,\n        removeCollection,\n        selectedCollection,\n        selectCollection,\n        error,\n        isLoading,\n      }}\n    >\n      {children}\n    </ClientCollectionContext.Provider>\n  );\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\n// import { CollectionModelProps } from \"../models/CollectionModelProps\";\n// import { getClientCollectionsApi, postClientCollectionApi, updateClientCollectionApi, deleteClientCollectionApi } from \"../api/collectionsApi\";\n// import { useAuth } from \"./AuthContext\";\n// import { Alert } from \"react-native\";\n// import { router } from \"expo-router\";\n// // import MyAlert from \"@/components/interfaces/MyAlert\";\n\n// interface CollectionContextProps {\n//   collections: CollectionModelProps[];\n//   addCollection: (collection: CollectionModelProps) => Promise<void>;\n//   removeCollection: (collectionId: string) => Promise<void>;\n//   updateCollection: (collection: CollectionModelProps) => Promise<void>;\n//   getClientCollections: () => void;\n//   selectedCollection: CollectionModelProps | null;\n//   selectCollection: (collection: CollectionModelProps) => void;\n//   isLoading: boolean;\n//   error: string | null;\n// }\n\n// export const ClientCollectionContext = createContext<CollectionContextProps | undefined>(undefined);\n\n// export const useClientCollection = () => {\n//   const context = useContext(ClientCollectionContext);\n//   if (!context) {\n//     throw new Error(\"useClientCollection must be used within an CollectionProvider\");\n//   }\n//   return context;\n// };\n\n\n// export const CollectionProvider = ({ children }: { children: ReactNode }) => {\n//   const { authState } = useAuth();\n//   const [collections, setCollections] = useState<CollectionModelProps[]>([]);\n//   const [selectedCollection, setSelectedCollection] = useState<CollectionModelProps | null>(null);\n//   const [isLoading, setIsLoading] = useState<boolean>(false);\n//   const [error, setError] = useState<string | null>(null);\n\n\n//   const addCollection = async (collection: CollectionModelProps) => {\n//     if (!authState?.user) return;\n\n//     const storeID = authState.user.store_owner_id || '';\n//     const email = authState.user.email || '';\n//     const token = authState?.token || \"\"\n\n//     setIsLoading(true);\n//     try {\n//       await postClientCollectionApi(collection, storeID, email, token );\n//       setCollections((prevCollections) => [...prevCollections, collection]);\n//       console.log(\"collection added\", collection );\n\n//       // change fix\n//       router.push('/')\n\n//     } catch (error: any) {\n//       console.error(\"Failed to add collection:\", error.response?.data );\n      \n\n//       // <MyAlert\n//       // title=\"Collection not Created\"\n//       // message=\"You are missing information. Please update your store.\"\n//       // onCancelPress={() => console.log(\"Cancel Pressed\")}\n//       // onUpdatePress={() => router.push('/store')}\n//       // />   \n//       setError(error.response?.data || \"Failed to add collection. Please try again later.\");\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const removeCollection = async (collectionId: string) => {\n//     setIsLoading(true);\n//     try {\n//       await deleteClientCollectionApi( collectionId);\n//       setCollections((prevCollections) => prevCollections.filter(collection => collection.id !== collectionId));\n//     } catch (error: any) {\n//       console.error(\"Failed to remove collection:\", error.response?.data?.message || error.message);\n//       setError(error.response?.data?.message || \"Failed to remove collection. Please try again later.\");\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const updateCollection = async (collection: CollectionModelProps) => {\n//     setIsLoading(true);\n//     try {\n//       await updateCollection(collection);\n//       setCollections((prevCollections) => prevCollections.map(o => o.id === collection.id ? collection : o));\n//     } catch (error: any) {\n//       console.error(\"Failed to update collection:\", error.response?.data?.message || error.message);\n//       setError(error.response?.data?.message || \"Failed to update collection. Please try again later.\");\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const getClientCollections = async () => {\n//     if (!authState?.user) return;\n\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n//       const email = authState.user.email || '';\n//       const store_owner_id = authState.user.store_owner_id || '';\n\n//       const response = await getClientCollectionsApi(store_owner_id, email);\n//       const fetchedCollections = response.data;\n//       setCollections(fetchedCollections);\n//     } catch (error: any) {\n//       console.error(\"Failed to fetch client collections:\", error.response?.data?.message || error.message);\n//       setError(error.response?.data?.message || \"Failed to fetch collections. Please try again later.\");\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const selectCollection = (collection: CollectionModelProps) => {\n//     setSelectedCollection(collection);\n//   };\n\n//   return (\n//     <ClientCollectionContext.Provider \n//       value={{ \n//         collections, \n//         addCollection, \n//         removeCollection, \n//         updateCollection, \n//         getClientCollections, \n//         selectedCollection, \n//         selectCollection, \n//         isLoading, \n//         error \n//       }}\n//     >\n//       {children}\n//     </ClientCollectionContext.Provider>\n//   );\n// };\n\n\n","import { useClientProduct } from '@/contexts/ClientProductContext';\nimport { useClientStore } from '@/contexts/ClientStoreContext';\nimport { useClientCollection } from '@/contexts/ClientCollectionContext';\nimport convertToCurrency from '@/hooks/convertToCurrency';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { AWS_HOLDER_IMAGE } from '@/utils/api';\nimport React, { useEffect } from 'react';\nimport { View, Text, Image, StyleSheet, TouchableOpacity, FlatList, Dimensions } from 'react-native';\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport { router } from 'expo-router';\n\nconst { width } = Dimensions.get('window');\n\nconst CollectionPageVTwo = () => {\n  const { collections, selectedCollection, selectCollection } = useClientCollection();\n  const { products, selectProduct } = useClientProduct();\n  const { store } = useClientStore();\n  const { colors } = useTheme();\n\n\n   // Define the \"All\" collection with default values\n  const allCollection = {\n    id: 'all',\n    store_id: 'all-store',\n    user_id: 'all-user',\n    index: 0,\n    timestamp: new Date().toISOString(),\n    title: 'All',\n    description: 'All available products',\n    caption: '',\n    amount: 0,\n    likes: 0,\n    isliked: false,\n    onSale: false,\n    relatedProductIds: products.map((product) => product.id.toString()),\n    image: '',\n    images: [],\n    tags: [],\n    active: true,\n  };\n\n\n  const collectionsWithAll = [allCollection, ...collections];\n\n  useEffect(() => {\n    if (!selectedCollection) {\n      selectCollection(allCollection);\n    }\n  }, [selectedCollection, selectCollection]);\n\n  const handleProductSelect = (product: ProductModelProps) => {\n    selectProduct(product);\n    if (selectedCollection?.id && product.id) {\n      router.push(`/collections/${selectedCollection.id}/products/${product.id}` as never);\n    }\n  };\n\n  const filteredProducts: ProductModelProps[] = selectedCollection?.id === 'all'\n    ? products\n    : products.filter(product =>\n        selectedCollection?.relatedProductIds.includes(product.id.toString())\n      );\n\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.pageBackground,\n  },\n  categoryList: {\n    maxHeight: 50,\n  },\n  categoryContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  categoryButton: {\n    color: colors.buttonText,\n    marginRight: 8,\n    paddingVertical: 5,\n    paddingHorizontal: 12,\n    borderWidth: 1,\n    borderColor: colors.border,\n    borderRadius: 15,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 30,\n  },\n  selectedCollectionButton: {\n    backgroundColor: colors.cardBackground,\n  },\n  categoryText: {\n    fontSize: 13,\n    fontWeight: 'bold',\n    color: colors.cardText,\n  },\n  selectedCollectionText: {\n    color: colors.title,\n  },\n  promoContainer: {\n    marginVertical: 10,\n    // borderRadius: 10,\n    overflow: 'hidden',\n    // backgroundColor: colors.cardBackground,\n    padding: 15,\n  },\n  promoImage: {\n    width: '100%',\n    height: 150,\n    resizeMode: 'cover',\n  },\n  promoTextContainer: {\n    position: 'absolute',\n    top: 15,\n    left: 20,\n    padding: 20\n  },\n  promoTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: colors.title,\n  },\n  promoSubtitle: {\n    fontSize: 14,\n    color: colors.subtitle,\n    marginTop: 5,\n  },\n  promoDiscount: {\n    fontSize: 16,\n    color: '#FF6347',\n    marginTop: 5,\n  },\n  productListContainer: {\n    flex: 1,\n  },\n  productContainer: {\n    paddingBottom: 20,\n  },\n  productCard: {\n    flex: 1,\n    margin: 10,\n    borderRadius: 10,\n    backgroundColor: colors.cardBackground,\n    padding: 10,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: colors.border,\n    width: width / 2 - 30,\n  },\n\n  productImage: {\n    width: width / 2 - 40,\n    height: 120,\n    resizeMode: 'cover',\n    borderRadius: 10,\n    marginBottom: 10,\n  },\n  productPrice: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: colors.cardText,\n  },\n  productName: {\n    fontSize: 14,\n    color: colors.cardText,\n    marginTop: 5,\n  },\n  emptyMessage: {\n    textAlign: 'center',\n    fontSize: 16,\n    color: colors.subtitle,\n    marginTop: 20,\n  },\n});\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={collectionsWithAll}\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <TouchableOpacity\n            style={[\n              styles.categoryButton,\n              item.id === selectedCollection?.id && styles.selectedCollectionButton\n            ]}\n            onPress={() => selectCollection(item)}\n          >\n            <Text style={[\n              styles.categoryText,\n              item.id === selectedCollection?.id && styles.selectedCollectionText\n            ]}>\n              {item.title}\n            </Text>\n          </TouchableOpacity>\n        )}\n        contentContainerStyle={styles.categoryContainer}\n        style={styles.categoryList}\n      />\n\n      <View style={styles.promoContainer}>\n        <Image\n          source={{ uri: store?.images?.welcome_image || AWS_HOLDER_IMAGE }}\n          style={styles.promoImage}\n        />\n        <View style={styles.promoTextContainer}>\n          <Text style={styles.promoTitle}>Promo for first purchase</Text>\n          <Text style={styles.promoSubtitle}>Special Offers</Text>\n          <Text style={styles.promoDiscount}>40% Off Prices</Text>\n        </View>\n      </View>\n\n      <View style={styles.productListContainer}>\n        <FlatList\n          data={filteredProducts}\n          numColumns={2}\n          keyExtractor={(item) => String(item.id)}\n          renderItem={({ item }) => (\n            <View style={styles.productCard}>\n              <TouchableOpacity onPress={() => handleProductSelect(item)}>\n                <Image source={{ uri: item.images[0] || AWS_HOLDER_IMAGE }} style={styles.productImage} />\n                <Text style={styles.productPrice}>{convertToCurrency(item.price)}</Text>\n                <Text style={styles.productName}>{item.name}</Text>\n              </TouchableOpacity>\n            </View>\n          )}\n          contentContainerStyle={styles.productContainer}\n          ListEmptyComponent={<Text style={styles.emptyMessage}>No products available</Text>}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default CollectionPageVTwo;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { useClientStore } from '@/contexts/ClientStoreContext';\n// import { useClientCollection } from '@/contexts/ClientCollectionContext';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { AWS_HOLDER_IMAGE } from '@/utils/api';\n// import { COLORS } from '@/utils/theme';\n// import { router } from 'expo-router';\n// import React, { useEffect } from 'react';\n// import { View, Text, Image, StyleSheet, TouchableOpacity, FlatList, Dimensions } from 'react-native';\n// import { useTheme } from \"@/contexts/ThemeContext\"\n\n// const { width } = Dimensions.get('window');\n\n// const CollectionPageVTwo = () => {\n//   const { collections, selectedCollection, selectCollection } = useClientCollection();\n//   const { products, selectProduct } = useClientProduct();\n//   const { store } = useClientStore();\n//   const { colors } = useTheme();\n\n// // Styles\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: colors.background,\n//     // paddingHorizontal: 10,\n//   },\n//   categoryList: {\n//     maxHeight: 50,\n//   },\n//   categoryContainer: {\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n//   categoryButton: {\n//     marginRight: 8,\n//     paddingVertical: 5,\n//     paddingHorizontal: 12,\n//     borderWidth: 1,\n//     borderColor: colors.border, // '#000000',\n//     borderRadius: 15,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     height: 30,\n//   },\n//   selectedCollectionButton: {\n//     backgroundColor:  colors.cardText, //,  '#000',\n//     color:  colors.buttonText //,  '#000',\n//   },\n//   categoryText: {\n//     fontSize: 13,\n//     fontWeight: 'bold',\n//     color: colors.cardText // '#000000',\n//   },\n//   selectedCollectionText: {\n//     color: colors.title //'#FFFFFF',\n//   },\n//   promoContainer: {\n//     marginVertical: 10,\n//     borderRadius: 10,\n//     overflow: 'hidden',\n//     backgroundColor: '#F5F5F5',\n//     padding: 15\n//   },\n//   promoImage: {\n//     width: '100%',\n//     height: 150,\n//     resizeMode: 'cover',\n//   },\n//   promoTextContainer: {\n//     position: 'absolute',\n//     top: 15,\n//     left: 20,\n//   },\n//   promoTitle: {\n//     fontSize: 20,\n//     fontWeight: 'bold',\n//     color: COLORS.white,\n//   },\n//   promoSubtitle: {\n//     fontSize: 14,\n//     color: COLORS.gray3,\n//     marginTop: 5,\n//   },\n//   promoDiscount: {\n//     fontSize: 16,\n//     color: '#FF6347',\n//     marginTop: 5,\n//   },\n//   productListContainer: {\n//     flex: 1,\n//   },\n//   productContainer: {\n//     paddingBottom: 20,\n//   },\n//   productCard: {\n//     flex: 1,\n//     margin: 10,\n//     borderRadius: 10,\n//     backgroundColor: '#FFFFFF',\n//     padding: 10,\n//     alignItems: 'center',\n//     borderWidth: 1,\n//     borderColor: '#E0E0E0',\n//   },\n//   productImage: {\n//     width: width / 2 - 40,\n//     height: 120,\n//     resizeMode: 'cover',\n//     borderRadius: 10,\n//     marginBottom: 10,\n//   },\n//   productPrice: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//   },\n//   productName: {\n//     fontSize: 14,\n//     color: '#333333',\n//     marginTop: 5,\n//   },\n//   emptyMessage: {\n//     textAlign: 'center',\n//     fontSize: 16,\n//     color: '#777777',\n//     marginTop: 20,\n//   },\n// });\n\n//   // Define the \"All\" collection with default values\n//   const allCollection = {\n//     id: 'all',\n//     store_id: 'all-store',\n//     user_id: 'all-user',\n//     index: 0,\n//     timestamp: new Date().toISOString(),\n//     title: 'All',\n//     description: 'All available products',\n//     caption: '',\n//     amount: 0,\n//     likes: 0,\n//     isliked: false,\n//     onSale: false,\n//     relatedProductIds: products.map((product) => product.id.toString()),\n//     image: '',\n//     images: [],\n//     tags: [],\n//     active: true,\n//   };\n\n//   // Add the \"All\" collection to the collections array\n//   const collectionsWithAll = [allCollection, ...collections];\n\n//   // Select \"All\" collection by default on initial render\n//   useEffect(() => {\n//     if (!selectedCollection) {\n//       selectCollection(allCollection);\n//     }\n//   }, [selectedCollection, selectCollection]);\n\n//   // Handle selecting a product\n//   const handleProductSelect = (product: ProductModelProps) => {\n//     selectProduct(product);\n//     // Ensure navigation to the correct product route within the selected collection\n//     if (selectedCollection?.id && product.id) {\n//       router.push(`/collections/${selectedCollection.id}/products/${product.id}` as never);\n//     }\n//   };\n\n//   // Filter products based on the selected collection\n//   const filteredProducts: ProductModelProps[] = selectedCollection?.id === 'all'\n//     ? products // Show all products when \"All\" is selected\n//     : products.filter(product =>\n//         selectedCollection?.relatedProductIds.includes(product.id.toString())\n//       );\n\n//   return (\n//     <View style={styles.container}>\n//       {/* Collection Selection List */}\n//       <FlatList\n//         data={collectionsWithAll}\n//         horizontal\n//         showsHorizontalScrollIndicator={false}\n//         keyExtractor={(item) => item.id}\n//         renderItem={({ item }) => (\n//           <TouchableOpacity\n//             style={[\n//               styles.categoryButton,\n//               item.id === selectedCollection?.id && styles.selectedCollectionButton\n//             ]}\n//             onPress={() => selectCollection(item)}\n//           >\n//             <Text style={[\n//               styles.categoryText,\n//               item.id === selectedCollection?.id && styles.selectedCollectionText\n//             ]}>\n//               {item.title}\n//             </Text>\n//           </TouchableOpacity>\n//         )}\n//         contentContainerStyle={styles.categoryContainer}\n//         style={styles.categoryList}\n//       />\n\n//       {/* Promo Section */}\n//       <View style={styles.promoContainer}>\n//         <Image\n//           source={{ uri: store?.images?.welcome_image || AWS_HOLDER_IMAGE }}\n//           style={styles.promoImage}\n//         />\n//         <View style={styles.promoTextContainer}>\n//           <Text style={styles.promoTitle}>Promo for first purchase</Text>\n//           <Text style={styles.promoSubtitle}>Special Offers</Text>\n//           <Text style={styles.promoDiscount}>40% Off Prices</Text>\n//         </View>\n//       </View>\n\n//       {/* Products List */}\n//       <View style={styles.productListContainer}>\n//         <FlatList\n//           data={filteredProducts}\n//           numColumns={2}\n//           keyExtractor={(item) => String(item.id)}\n//           renderItem={({ item }) => (\n//             <View style={styles.productCard}>\n//               <TouchableOpacity onPress={() => handleProductSelect(item)}>\n//                 <Image source={{ uri: item.images[0] || AWS_HOLDER_IMAGE }} style={styles.productImage} />\n//                 <Text style={styles.productPrice}>{convertToCurrency(item.price)}</Text>\n//                 <Text style={styles.productName}>{item.name}</Text>\n//               </TouchableOpacity>\n//             </View>\n//           )}\n//           contentContainerStyle={styles.productContainer}\n//           ListEmptyComponent={<Text style={styles.emptyMessage}>No products available</Text>}\n//         />\n//       </View>\n//     </View>\n//   );\n// };\n\n// export default CollectionPageVTwo;\n\n\n// All not included\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { useClientStore } from '@/contexts/ClientStoreContext';\n// import { useClientCollection } from '@/contexts/ClientCollectionContext';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { AWS_HOLDER_IMAGE } from '@/utils/api';\n// import { COLORS } from '@/utils/theme';\n// import { router } from 'expo-router';\n// import React from 'react';\n// import { View, Text, Image, StyleSheet, TouchableOpacity, FlatList, Dimensions } from 'react-native';\n\n// const { width } = Dimensions.get('window');\n\n// const CollectionPageVTwo = () => {\n//   const { collections, selectedCollection, selectCollection } = useClientCollection();\n//   const { products, selectProduct } = useClientProduct();\n//   const { store } = useClientStore();\n\n//   // Handle selecting a product\n//   const handleProductSelect = (product: ProductModelProps) => {\n//     selectProduct(product);\n//     // Ensure navigation to the correct product route within the selected collection\n//     if (selectedCollection?.id && product.id) {\n//       router.push(`/collections/${selectedCollection.id}/products/${product.id}` as never);\n//     }\n//   };\n\n//   // Filter products based on the selected collection\n//   const filteredProducts = selectedCollection?.title === 'All'\n//     ? products\n//     : products.filter(product =>\n//         selectedCollection?.relatedProductIds.includes(product.id.toString())\n//       );\n\n//   return (\n//     <View style={styles.container}>\n//       {/* Collection Selection List */}\n//       <FlatList\n//         data={collections}\n//         horizontal\n//         showsHorizontalScrollIndicator={false}\n//         keyExtractor={(item) => item.id}\n//         renderItem={({ item }) => (\n//           <TouchableOpacity\n//             style={[\n//               styles.categoryButton,\n//               item.id === selectedCollection?.id && styles.selectedCollectionButton\n//             ]}\n//             onPress={() => selectCollection(item)}\n//           >\n//             <Text style={[\n//               styles.categoryText,\n//               item.id === selectedCollection?.id && styles.selectedCollectionText\n//             ]}>\n//               {item.title}\n//             </Text>\n//           </TouchableOpacity>\n//         )}\n//         contentContainerStyle={styles.categoryContainer}\n//         style={styles.categoryList}\n//       />\n\n//       {/* Promo Section */}\n//       <View style={styles.promoContainer}>\n//         <Image\n//           source={{ uri: store?.images?.welcome_image || AWS_HOLDER_IMAGE }}\n//           style={styles.promoImage}\n//         />\n//         <View style={styles.promoTextContainer}>\n//           <Text style={styles.promoTitle}>Promo for first purchase</Text>\n//           <Text style={styles.promoSubtitle}>Special Offers</Text>\n//           <Text style={styles.promoDiscount}>40% Off Prices</Text>\n//         </View>\n//       </View>\n\n//       {/* Products List */}\n//       <View style={styles.productListContainer}>\n//         <FlatList\n//           data={filteredProducts}\n//           numColumns={2}\n//           keyExtractor={(item) => String(item.id)}\n//           renderItem={({ item }) => (\n//             <View style={styles.productCard}>\n//               <TouchableOpacity onPress={() => handleProductSelect(item)}>\n//                 <Image source={{ uri: item.images[0] || AWS_HOLDER_IMAGE }} style={styles.productImage} />\n//                 <Text style={styles.productPrice}>{convertToCurrency(item.price)}</Text>\n//                 <Text style={styles.productName}>{item.name}</Text>\n//               </TouchableOpacity>\n//             </View>\n//           )}\n//           contentContainerStyle={styles.productContainer}\n//           ListEmptyComponent={<Text style={styles.emptyMessage}>No products available</Text>}\n//         />\n//       </View>\n//     </View>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#FFFFFF',\n//     paddingHorizontal: 10,\n//   },\n//   categoryList: {\n//     maxHeight: 50,\n//   },\n//   categoryContainer: {\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n//   categoryButton: {\n//     marginRight: 8,\n//     paddingVertical: 5,\n//     paddingHorizontal: 12,\n//     borderWidth: 1,\n//     borderColor: '#000000',\n//     borderRadius: 15,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     height: 30,\n//   },\n//   selectedCollectionButton: {\n//     backgroundColor: '#000',\n//   },\n//   categoryText: {\n//     fontSize: 13,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//   },\n//   selectedCollectionText: {\n//     color: '#FFFFFF',\n//   },\n//   promoContainer: {\n//     marginVertical: 10,\n//     borderRadius: 10,\n//     overflow: 'hidden',\n//     backgroundColor: '#F5F5F5',\n//   },\n//   promoImage: {\n//     width: '100%',\n//     height: 150,\n//     resizeMode: 'cover',\n//   },\n//   promoTextContainer: {\n//     position: 'absolute',\n//     top: 15,\n//     left: 20,\n//   },\n//   promoTitle: {\n//     fontSize: 20,\n//     fontWeight: 'bold',\n//     color: COLORS.white,\n//   },\n//   promoSubtitle: {\n//     fontSize: 14,\n//     color: COLORS.gray3,\n//     marginTop: 5,\n//   },\n//   promoDiscount: {\n//     fontSize: 16,\n//     color: '#FF6347',\n//     marginTop: 5,\n//   },\n//   productListContainer: {\n//     flex: 1,\n//   },\n//   productContainer: {\n//     paddingBottom: 20,\n//   },\n//   productCard: {\n//     flex: 1,\n//     margin: 10,\n//     borderRadius: 10,\n//     backgroundColor: '#FFFFFF',\n//     padding: 10,\n//     alignItems: 'center',\n//     borderWidth: 1,\n//     borderColor: '#E0E0E0',\n//   },\n//   productImage: {\n//     width: width / 2 - 40,\n//     height: 120,\n//     resizeMode: 'cover',\n//     borderRadius: 10,\n//     marginBottom: 10,\n//   },\n//   productPrice: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//   },\n//   productName: {\n//     fontSize: 14,\n//     color: '#333333',\n//     marginTop: 5,\n//   },\n//   emptyMessage: {\n//     textAlign: 'center',\n//     fontSize: 16,\n//     color: '#777777',\n//     marginTop: 20,\n//   },\n// });\n\n// export default CollectionPageVTwo;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// import { v4 as uuidv4 } from 'uuid';\n// const uuid = uuidv4(); // Generate the UUID\n\n// generateUUID.ts\nexport const generateUUID = (idLength: number): string => {\n  let result = '';\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const charactersLength = characters.length;\n  for (let i = 0; i < idLength; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};","import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Dimensions,\n  StyleSheet,\n  Alert,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\"; // Import Ionicons from Expo\nimport { COLORS } from \"@/utils/theme\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { router } from \"expo-router\";\nimport { useClientStore } from \"@/contexts/ClientStoreContext\";\n\nconst { width , height} = Dimensions.get(\"window\");\n\n\nconst UserLoginTextFields = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confirmedpassword, setConfirmedPassword] = useState(\"\");\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n    const {store} = useClientStore() \n\n  const [activeTabIsLogin, setActiveTabIsLogin] = useState(true);\n  const { onLogin, onRegister, onLogout, authState } = useAuth();\n  // const { data: store } = useFetchObject<StoreModelProps>(() => getStore(CONSTANTS.store_id))\n\n  const showAlert = (message: string) =>\n    Alert.alert(\"Error\", message, [{ text: \"OK\" }]);\n\n\n  const loginAction = async () => {\n    try {\n      const result = await onLogin!(store?.id ?? \"\", email, password);\n      if (result.error) {\n        showAlert(result.msg);\n      } else {\n        console.log(\"Login successful\");\n        try {\n          router.replace(\"/home\" as never);\n        } catch (navError) {\n          console.error(\"Navigation error:\", navError);\n        }\n      }\n    } catch (error: any) {\n      console.error(\"(6) Login error:\", error.message);\n      showAlert(\"Login failed. Please try again.\");\n    }\n  };\n    \n  return (\n    <View style={{height: height}}>\n          <View style={styles.inputContainer}>\n            <Ionicons name=\"mail-outline\" size={20} color={COLORS.darkGray} />\n            <TextInput\n              placeholder=\"Enter your email\"\n              //placeholderTextColor={COLORS.darkGray}\n              onChangeText={setEmail}\n              value={email}\n              style={styles.input}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoComplete=\"email\"\n              secureTextEntry={false} // Ensure this is set to false\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Ionicons\n              name=\"lock-closed-outline\"\n              size={20}\n              color={COLORS.darkGray}\n            />\n            <TextInput\n              placeholder=\"Enter your password\"\n              //placeholderTextColor={COLORS.darkGray}\n              onChangeText={setPassword}\n              value={password}\n              style={styles.input}\n              secureTextEntry={!showPassword} // Ensure this is set to false\n            />\n            <Ionicons name=\"eye-outline\" size={20} color={COLORS.darkGray} />\n          </View>\n\n          <TouchableOpacity>\n            <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.loginButton} onPress={loginAction}>\n            <Text style={styles.loginButtonText}>Login</Text>\n          </TouchableOpacity>\n        </View>\n  )\n}\n\nexport default UserLoginTextFields\n\n\nconst styles = StyleSheet.create({\n    container: {\n      paddingHorizontal: 20,\n      paddingTop: 20,\n      backgroundColor: COLORS.white,\n      alignItems: \"center\",\n    },\n    logo: {\n      width: 80,\n      height: 80,\n      marginTop: 50,\n      borderRadius: 13,\n    },\n    appName: {\n      fontSize: 24,\n      fontWeight: \"bold\",\n      color: COLORS.primary,\n      marginTop: 10,\n    },\n    welcomeText: {\n      fontSize: 20,\n      fontWeight: \"bold\",\n      color: COLORS.darkGray,\n      marginTop: 20,\n    },\n    descriptionText: {\n      fontSize: 14,\n      color: COLORS.darkGray,\n      textAlign: \"center\",\n      marginVertical: 10,\n    },\n    tabContainer: {\n      flexDirection: \"row\",\n      marginVertical: 20,\n    },\n    tab: {\n      flex: 1,\n      paddingBottom: 5,\n      alignItems: \"center\",\n    },\n    activeTab: {\n      borderBottomWidth: 2,\n      borderBottomColor: COLORS.primary,\n    },\n    tabText: {\n      fontSize: 16,\n      color: COLORS.darkGray,\n    },\n    activeTabText: {\n      color: COLORS.primary,\n    },\n    inputContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      backgroundColor: COLORS.lightGray,\n      padding: 15,\n      borderRadius: 5,\n      marginVertical: 10,\n      width: width - 40,\n    },\n    input: {\n      flex: 1,\n      marginLeft: 10,\n      color: COLORS.darkGray,\n    },\n    forgotPasswordText: {\n      alignSelf: \"flex-end\",\n      color: COLORS.primary,\n      marginTop: 10,\n      marginBottom: 20,\n    },\n    loginButton: {\n      backgroundColor: COLORS.primary,\n      padding: 15,\n      borderRadius: 5,\n      width: width - 40,\n      alignItems: \"center\",\n    },\n    signupButton: {\n      backgroundColor: COLORS.primary,\n      padding: 15,\n      borderRadius: 5,\n      width: width - 40,\n      alignItems: \"center\",\n      marginTop: 20,\n    },\n    loginButtonText: {\n      fontSize: 18,\n      color: COLORS.white,\n      fontWeight: \"bold\",\n    },\n    termsText: {\n      fontSize: 12,\n      color: COLORS.darkGray,\n      textAlign: \"left\",\n      marginLeft: 10,\n      marginRight: 20,\n    },\n    checkboxContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      marginVertical: 10,\n    },\n    passwordCriteria: {\n      color: COLORS.darkGray,\n      fontSize: 14,\n      marginTop: 5,\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n  });\n  \n","import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  Image,\n  Dimensions,\n  Alert,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\"; // Import Ionicons from Expo\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { UserProps } from \"@/models/UserProps\";\nimport { generateUUID } from \"@/hooks/generateUUID\";\nimport { router } from \"expo-router\";\nimport { COLORS } from \"@/utils/theme\";\nimport { useClientStore } from \"@/contexts/ClientStoreContext\";\n\n\nconst { width, height } = Dimensions.get(\"window\");\nconst UserRegisterTextFields = () => {\n\n    const {store} = useClientStore()\n\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confirmedpassword, setConfirmedPassword] = useState(\"\");\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  \n    const [activeTabIsLogin, setActiveTabIsLogin] = useState(false);\n    // const { data: store } = useFetchObject<StoreModelProps>(() =>\n    //   getStore(CONSTANTS.store_id)\n    // );\n    const { onLogin, onRegister, onLogout, authState } = useAuth();\n\n\n  const showAlert = (message: string) =>\n    Alert.alert(\"Error\", message, [{ text: \"OK\" }]);\n\n  const loginAction = async () => {\n    try {\n      const result = await onLogin!(store?.id ?? \"\", email, password);\n      if (result.error) {\n        showAlert(result.msg);\n      } else {\n        console.log(\"Login successful\");\n        try {\n          router.replace(\"/(tabs)\");\n        } catch (navError) {\n          console.error(\"Navigation error:\", navError);\n        }\n      }\n    } catch (error: any) {\n      console.error(\"(7) Login error:\", error.message);\n      showAlert(\"Login failed. Please try again.\");\n    }\n  };\n\n  const registerAction = async () => {\n    const user: UserProps = {\n      id: generateUUID(8),\n      name,\n      email,\n      password,\n      store_ids: [],\n      store_owner_id: \"\",\n      onboardingQ1: \"\",\n      onboardingQ2: \"\",\n      onboardingQ3: \"\",\n      onboardingQ4: \"\",\n      orders: [],\n      favoriteItems: [],\n      cart: [],\n      affiliate_link: \"\",\n      active: false,\n      role: \"\",\n      birthday: \"\",\n      todo_completed: false,\n      tableName: \"\",\n      username: \"\",\n      phone_number: \"\",\n      gender: \"\",\n      profile_image: \"\",\n      address_city: \"\",\n      address_state: \"\",\n      location_history: [],\n      current_notification: \"\",\n      notifications: [],\n      payment_due: 0,\n      payment_due_date: \"\",\n      payment_due_day: \"\",\n      payment_monthly_amount: 0,\n      device_id: \"\",\n      device_os_version: \"\",\n      device_model: \"\",\n      device_ip_address: \"\",\n      device_battery_level: \"\",\n      device_battery_statue: \"\",\n      device_network_connectio_type: \"\",\n      loyalty_date: \"\",\n      payment_history_total: 0,\n      subscription_id: \"\",\n      paid_subscriber: false,\n      newsletter_subscriber: false,\n      notification_subscriber: false,\n      left_review: false,\n      review_stars: [],\n      reviews: [],\n      testimonials: [],\n      notify_arn: \"\",\n      owner_notify_arn: \"\",\n    };\n\n    try {\n      const result = await onRegister(store?.id ?? \"\", user);\n      if (result.error ) {\n        showAlert(result.error);\n        // console.error(\"(3) Registration error:\", error.response);\n        // console.error(\"(3) Registration error:\", error.message);\n        // console.error(\"(3) Registration error:\", error);\n\n        return;\n      } else {\n        console.log(\"Registration successful\");\n        loginAction();\n      }\n    } catch (error: any) {\n      console.error(\"(1) Registration error:\", error.message);\n      console.error(\"(1) Registration error:\", error.response.message);\n      showAlert(`Registration failed. Please try again. ${error.response}`);\n    }\n  };\n\n  return (\n    <View style={{height: height}}>\n          <View style={styles.inputContainer}>\n            <Ionicons name=\"person-outline\" size={20} color={COLORS.darkGray} />\n            <TextInput\n              placeholder=\"Your name\"\n              //placeholderTextColor={COLORS.darkGray}\n              onChangeText={setName}\n              value={name}\n              style={styles.input}\n              secureTextEntry={false} // Ensure this is set to false\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Ionicons name=\"mail-outline\" size={20} color={COLORS.darkGray} />\n            <TextInput\n              placeholder=\"Enter your email\"\n              //placeholderTextColor={COLORS.darkGray}\n              onChangeText={setEmail}\n              value={email}\n              style={styles.input}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoComplete=\"email\"\n              secureTextEntry={false} // Ensure this is set to false\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Ionicons\n              name=\"lock-closed-outline\"\n              size={20}\n              color={COLORS.darkGray}\n            />\n            <TextInput\n              placeholder=\"Enter your password\"\n              //placeholderTextColor={COLORS.darkGray}\n              onChangeText={setPassword}\n              value={password}\n              style={styles.input}\n              secureTextEntry={!showPassword}\n            />\n            <TouchableOpacity\n              onPress={() => setShowPassword((prevState) => !prevState)}\n            >\n              <Ionicons\n                name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\n                size={20}\n                color={COLORS.darkGray}\n              />\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Ionicons\n              name=\"lock-closed-outline\"\n              size={20}\n              color={COLORS.darkGray}\n            />\n            <TextInput\n              placeholder=\"Confirm your password\"\n              onChangeText={setConfirmedPassword}\n              value={confirmedpassword}\n              style={styles.input}\n              secureTextEntry={!showConfirmPassword} // Ensure this is set to false\n            />\n\n            <TouchableOpacity\n              onPress={() => setShowConfirmPassword((prevState) => !prevState)}\n            >\n              <Ionicons\n                name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\n                size={20}\n                color={COLORS.darkGray}\n              />\n            </TouchableOpacity>\n          </View>\n\n          <Text style={styles.passwordCriteria}>\n            <Ionicons name=\"checkmark-outline\" size={16} color={COLORS.green} />{\" \"}\n            At least 8 characters\n          </Text>\n          <Text style={styles.passwordCriteria}>\n            <Ionicons name=\"checkmark-outline\" size={16} color={COLORS.green} />{\" \"}\n            At least 1 number\n          </Text>\n          <Text style={styles.passwordCriteria}>\n            <Ionicons name=\"checkmark-outline\" size={16} color={COLORS.green} />{\" \"}\n            Both upper and lower case letters\n          </Text>\n\n          <TouchableOpacity\n            style={styles.signupButton}\n            onPress={registerAction}\n          >\n            <Text style={styles.loginButtonText}>Sign Up</Text>\n          </TouchableOpacity>\n        </View>\n  )\n}\n\nexport default UserRegisterTextFields\n\n\nconst styles = StyleSheet.create({\n    container: {\n      paddingHorizontal: 20,\n      paddingTop: 20,\n      backgroundColor: COLORS.white,\n      alignItems: \"center\",\n    },\n    logo: {\n      width: 80,\n      height: 80,\n      marginTop: 50,\n      borderRadius: 13,\n    },\n    appName: {\n      fontSize: 24,\n      fontWeight: \"bold\",\n      color: COLORS.primary,\n      marginTop: 10,\n    },\n    welcomeText: {\n      fontSize: 20,\n      fontWeight: \"bold\",\n      color: COLORS.darkGray,\n      marginTop: 20,\n    },\n    descriptionText: {\n      fontSize: 14,\n      color: COLORS.darkGray,\n      textAlign: \"center\",\n      marginVertical: 10,\n    },\n    tabContainer: {\n      flexDirection: \"row\",\n      marginVertical: 20,\n    },\n    tab: {\n      flex: 1,\n      paddingBottom: 5,\n      alignItems: \"center\",\n    },\n    activeTab: {\n      borderBottomWidth: 2,\n      borderBottomColor: COLORS.primary,\n    },\n    tabText: {\n      fontSize: 16,\n      color: COLORS.darkGray,\n    },\n    activeTabText: {\n      color: COLORS.primary,\n    },\n    inputContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      backgroundColor: COLORS.lightGray,\n      padding: 15,\n      borderRadius: 5,\n      marginVertical: 10,\n      width: width - 40,\n    },\n    input: {\n      flex: 1,\n      marginLeft: 10,\n      color: COLORS.darkGray,\n    },\n    forgotPasswordText: {\n      alignSelf: \"flex-end\",\n      color: COLORS.primary,\n      marginTop: 10,\n      marginBottom: 20,\n    },\n    loginButton: {\n      backgroundColor: COLORS.primary,\n      padding: 15,\n      borderRadius: 5,\n      width: width - 40,\n      alignItems: \"center\",\n    },\n    signupButton: {\n      backgroundColor: COLORS.primary,\n      padding: 15,\n      borderRadius: 5,\n      width: width - 40,\n      alignItems: \"center\",\n      marginTop: 20,\n    },\n    loginButtonText: {\n      fontSize: 18,\n      color: COLORS.white,\n      fontWeight: \"bold\",\n    },\n    termsText: {\n      fontSize: 12,\n      color: COLORS.darkGray,\n      textAlign: \"left\",\n      marginLeft: 10,\n      marginRight: 20,\n    },\n    checkboxContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      marginVertical: 10,\n    },\n    passwordCriteria: {\n      color: COLORS.darkGray,\n      fontSize: 14,\n      marginTop: 5,\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n  });\n  ","import React, { FC, useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  Image,\n  Dimensions,\n  Alert,\n} from \"react-native\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { UserProps } from \"@/models/UserProps\";\nimport { generateUUID } from \"@/hooks/generateUUID\";\nimport { router } from \"expo-router\";\nimport { COLORS } from \"@/utils/theme\";\nimport UserLoginTextFields from \"@/components/views/UserLoginTextFields\";\nimport UserRegisterTextFields from \"@/components/views/UserRegisterTextFields\";\nimport { useClientStore } from \"@/contexts/ClientStoreContext\";\n\nconst { width , height } = Dimensions.get(\"window\");\n\n\nconst LoginComponentTwo = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmedpassword, setConfirmedPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const [activeTabIsLogin, setActiveTabIsLogin] = useState(true);\n  const { onLogin, onRegister, onLogout, authState } = useAuth();\n  // const { data: store } = useFetchObject<StoreModelProps>(() =>\n  //   getStore(CONSTANTS.store_id)\n  // );\n\n  const { store } = useClientStore()\n\n\n  const showAlert = (message: string) =>\n    Alert.alert(\"Error\", message, [{ text: \"OK\" }]);\n\n  const loginAction = async () => {\n    try {\n      const result = await onLogin!(store?.id ?? \"\", email, password);\n      if (result.error) {\n        showAlert(result.msg);\n      } else {\n        console.log(\"Login successful\");\n        try {\n          router.replace(\"/home\" as never);\n        } catch (navError) {\n          console.error(\"Navigation error:\", navError);\n        }\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      showAlert(\"Login failed. Please try again.\");\n    }\n  };\n\n  const registerAction = async () => {\n    const user: UserProps = {\n      id: generateUUID(8),\n      name,\n      email,\n      password,\n      store_ids: [],\n      store_owner_id: \"\",\n      onboardingQ1: \"\",\n      onboardingQ2: \"\",\n      onboardingQ3: \"\",\n      onboardingQ4: \"\",\n      orders: [],\n      favoriteItems: [],\n      cart: [],\n      affiliate_link: \"\",\n      active: false,\n      role: \"\",\n      birthday: \"\",\n      todo_completed: false,\n      tableName: \"\",\n      username: \"\",\n      phone_number: \"\",\n      gender: \"\",\n      profile_image: \"\",\n      address_city: \"\",\n      address_state: \"\",\n      location_history: [],\n      current_notification: \"\",\n      notifications: [],\n      payment_due: 0,\n      payment_due_date: \"\",\n      payment_due_day: \"\",\n      payment_monthly_amount: 0,\n      device_id: \"\",\n      device_os_version: \"\",\n      device_model: \"\",\n      device_ip_address: \"\",\n      device_battery_level: \"\",\n      device_battery_statue: \"\",\n      device_network_connectio_type: \"\",\n      loyalty_date: \"\",\n      payment_history_total: 0,\n      subscription_id: \"\",\n      paid_subscriber: false,\n      newsletter_subscriber: false,\n      notification_subscriber: false,\n      left_review: false,\n      review_stars: [],\n      reviews: [],\n      testimonials: [],\n      notify_arn: \"\",\n      owner_notify_arn: \"\",\n    };\n\n    try {\n      const result = await onRegister!(store?.id ?? \"\", user);\n      if (result.error) {\n        showAlert(result);\n        return;\n      } else {\n        console.log(\"Registration successful\");\n        loginAction();\n      }\n    } catch (error) {\n      console.error(\"(2) Registration error:\", error);\n      showAlert(\"Registration failed. Please try again.\");\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Image\n        source={{\n          uri: \"https://appsformankind-assets.s3.amazonaws.com/Store/Apps_For_Mankind/logo.png\",\n        }}\n        style={styles.logo}\n      />\n      <Text style={styles.welcomeText}>\n        Welcome to {store?.store_name ?? \"\"}\n      </Text>\n      <Text style={styles.descriptionText}>\n        Sign up or login below to manage your project, task, and productivity\n      </Text>\n\n      <View style={styles.tabContainer}>\n        <TouchableOpacity\n          style={[styles.tab, activeTabIsLogin && styles.activeTab]}\n          onPress={() => setActiveTabIsLogin(true)}\n        >\n          <Text\n            style={[styles.tabText, activeTabIsLogin && styles.activeTabText]}\n          >\n            Login\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[styles.tab, !activeTabIsLogin && styles.activeTab]}\n          onPress={() => setActiveTabIsLogin(false)}\n        >\n          <Text\n            style={[styles.tabText, !activeTabIsLogin && styles.activeTabText]}\n          >\n            Sign Up\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {activeTabIsLogin ? (\n       <UserLoginTextFields />\n      ) : (\n        <UserRegisterTextFields /> \n      )}\n    </View>\n  );\n};\n\nexport default LoginComponentTwo;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    backgroundColor: COLORS.white,\n    alignItems: \"center\",\n    height: height\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    marginTop: 50,\n    borderRadius: 13,\n  },\n  appName: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    color: COLORS.primary,\n    marginTop: 10,\n  },\n  welcomeText: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: COLORS.darkGray,\n    marginTop: 20,\n  },\n  descriptionText: {\n    fontSize: 14,\n    color: COLORS.darkGray,\n    textAlign: \"center\",\n    marginVertical: 10,\n  },\n  tabContainer: {\n    flexDirection: \"row\",\n    marginVertical: 20,\n  },\n  tab: {\n    flex: 1,\n    paddingBottom: 5,\n    alignItems: \"center\",\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: COLORS.primary,\n  },\n  tabText: {\n    fontSize: 16,\n    color: COLORS.darkGray,\n  },\n  activeTabText: {\n    color: COLORS.primary,\n  },\n  inputContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: COLORS.lightGray,\n    padding: 15,\n    borderRadius: 5,\n    marginVertical: 10,\n    width: width - 40,\n  },\n  input: {\n    flex: 1,\n    marginLeft: 10,\n    color: COLORS.darkGray,\n  },\n  forgotPasswordText: {\n    alignSelf: \"flex-end\",\n    color: COLORS.primary,\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  loginButton: {\n    backgroundColor: COLORS.primary,\n    padding: 15,\n    borderRadius: 5,\n    width: width - 40,\n    alignItems: \"center\",\n  },\n  signupButton: {\n    backgroundColor: COLORS.primary,\n    padding: 15,\n    borderRadius: 5,\n    width: width - 40,\n    alignItems: \"center\",\n    marginTop: 20,\n  },\n  loginButtonText: {\n    fontSize: 18,\n    color: COLORS.white,\n    fontWeight: \"bold\",\n  },\n  termsText: {\n    fontSize: 12,\n    color: COLORS.darkGray,\n    textAlign: \"left\",\n    marginLeft: 10,\n    marginRight: 20,\n  },\n  checkboxContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginVertical: 10,\n  },\n  passwordCriteria: {\n    color: COLORS.darkGray,\n    fontSize: 14,\n    marginTop: 5,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from \"react\";\n// import {\n//   View,\n//   Text,\n//   TextInput,\n//   TouchableOpacity,\n//   StyleSheet,\n//   Image,\n//   Dimensions,\n//   Alert,\n// } from \"react-native\";\n// import { Ionicons } from \"@expo/vector-icons\"; // Import Ionicons from Expo\n// import { useAuth } from \"@/contexts/AuthContext\";\n// import { UserProps } from \"@/models/UserProps\";\n// import { generateUUID } from \"@/hooks/generateUUID\";\n// import { router } from \"expo-router\";\n// import { COLORS } from \"@/utils/theme\";\n// import { CONSTANTS } from \"@/utils/constants\";\n// import useFetchObject from \"@/hooks/useFetchObject\";\n// import { StoreModelProps } from \"@/models/StoreModelProps\";\n// import { getStore } from \"@/api/storeApi\";\n\n// const { width } = Dimensions.get(\"window\");\n\n// const LoginComponentTwo = () => {\n//   const [name, setName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmedpassword, setConfirmedPassword] = useState(\"\");\n//   const [showPassword, setShowPassword] = useState(false);\n//   const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n//   const [activeTabIsLogin, setActiveTabIsLogin] = useState(true);\n//   const { onLogin, onRegister, onLogout, authState } = useAuth();\n//   const { data: store } = useFetchObject<StoreModelProps>(() =>\n//     getStore(CONSTANTS.store_id)\n//   );\n\n//   const showAlert = (message: string) =>\n//     Alert.alert(\"Error\", message, [{ text: \"OK\" }]);\n\n//   const loginAction = async () => {\n//     try {\n//       const result = await onLogin!(email, password);\n//       if (result.error) {\n//         showAlert(result.msg);\n//       } else {\n//         console.log(\"Login successful\");\n//         try {\n//           router.replace(\"/home\");\n//         } catch (navError) {\n//           console.error(\"Navigation error:\", navError);\n//         }\n//       }\n//     } catch (error) {\n//       console.error(\"Login error:\", error);\n//       showAlert(\"Login failed. Please try again.\");\n//     }\n//   };\n\n//   const registerAction = async () => {\n//     const user: UserProps = {\n//       id: generateUUID(8),\n//       name,\n//       email,\n//       password,\n//       store_ids: [],\n//       store_owner_id: \"\",\n//       onboardingQ1: \"\",\n//       onboardingQ2: \"\",\n//       onboardingQ3: \"\",\n//       onboardingQ4: \"\",\n//       orders: [],\n//       favoriteItems: [],\n//       cart: [],\n//       affiliate_link: \"\",\n//       active: false,\n//       role: \"\",\n//       birthday: \"\",\n//       todo_completed: false,\n//       tableName: \"\",\n//       username: \"\",\n//       phone_number: \"\",\n//       gender: \"\",\n//       profile_image: \"\",\n//       address_city: \"\",\n//       address_state: \"\",\n//       location_history: [],\n//       current_notification: \"\",\n//       notifications: [],\n//       payment_due: 0,\n//       payment_due_date: \"\",\n//       payment_due_day: \"\",\n//       payment_monthly_amount: 0,\n//       device_id: \"\",\n//       device_os_version: \"\",\n//       device_model: \"\",\n//       device_ip_address: \"\",\n//       device_battery_level: \"\",\n//       device_battery_statue: \"\",\n//       device_network_connectio_type: \"\",\n//       loyalty_date: \"\",\n//       payment_history_total: 0,\n//       subscription_id: \"\",\n//       paid_subscriber: false,\n//       newsletter_subscriber: false,\n//       notification_subscriber: false,\n//       left_review: false,\n//       review_stars: [],\n//       reviews: [],\n//       testimonials: [],\n//       notify_arn: \"\",\n//       owner_notify_arn: \"\",\n//     };\n\n//     try {\n//       const result = await onRegister!(user);\n//       if (result.error) {\n//         showAlert(result);\n//         return;\n//       } else {\n//         console.log(\"Registration successful\");\n//         loginAction();\n//       }\n//     } catch (error) {\n//       console.error(\"Registration error:\", error);\n//       showAlert(\"Registration failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       <Image\n//         source={{\n//           uri: \"https://appsformankind-assets.s3.amazonaws.com/Store/Apps_For_Mankind/logo.png\",\n//         }}\n//         style={styles.logo}\n//       />\n//       <Text style={styles.welcomeText}>\n//         Welcome to {store?.store_name ?? \"\"}\n//       </Text>\n//       <Text style={styles.descriptionText}>\n//         Sign up or login below to manage your project, task, and productivity\n//       </Text>\n\n//       <View style={styles.tabContainer}>\n//         <TouchableOpacity\n//           style={[styles.tab, activeTabIsLogin && styles.activeTab]}\n//           onPress={() => setActiveTabIsLogin(true)}\n//         >\n//           <Text\n//             style={[styles.tabText, activeTabIsLogin && styles.activeTabText]}\n//           >\n//             Login\n//           </Text>\n//         </TouchableOpacity>\n//         <TouchableOpacity\n//           style={[styles.tab, !activeTabIsLogin && styles.activeTab]}\n//           onPress={() => setActiveTabIsLogin(false)}\n//         >\n//           <Text\n//             style={[styles.tabText, !activeTabIsLogin && styles.activeTabText]}\n//           >\n//             Sign Up\n//           </Text>\n//         </TouchableOpacity>\n//       </View>\n\n//       {activeTabIsLogin ? (\n//         <View>\n//           <View style={styles.inputContainer}>\n//             <Ionicons name=\"mail-outline\" size={20} color={COLORS.darkGray} />\n//             <TextInput\n//               placeholder=\"Enter your email\"\n//               //placeholderTextColor={COLORS.darkGray}\n//               onChangeText={setEmail}\n//               value={email}\n//               style={styles.input}\n//               keyboardType=\"email-address\"\n//               autoCapitalize=\"none\"\n//               autoComplete=\"email\"\n//               secureTextEntry={false} // Ensure this is set to false\n//             />\n//           </View>\n\n//           <View style={styles.inputContainer}>\n//             <Ionicons\n//               name=\"lock-closed-outline\"\n//               size={20}\n//               color={COLORS.darkGray}\n//             />\n//             <TextInput\n//               placeholder=\"Enter your password\"\n//               //placeholderTextColor={COLORS.darkGray}\n//               onChangeText={setPassword}\n//               value={password}\n//               style={styles.input}\n//               secureTextEntry={!showPassword} // Ensure this is set to false\n//             />\n//             <Ionicons name=\"eye-outline\" size={20} color={COLORS.darkGray} />\n//           </View>\n\n//           <TouchableOpacity>\n//             <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n//           </TouchableOpacity>\n\n//           <TouchableOpacity style={styles.loginButton} onPress={loginAction}>\n//             <Text style={styles.loginButtonText}>Login</Text>\n//           </TouchableOpacity>\n//         </View>\n//       ) : (\n//         <View>\n//           <View style={styles.inputContainer}>\n//             <Ionicons name=\"person-outline\" size={20} color={COLORS.darkGray} />\n//             <TextInput\n//               placeholder=\"Your name\"\n//               //placeholderTextColor={COLORS.darkGray}\n//               onChangeText={setName}\n//               value={name}\n//               style={styles.input}\n//               secureTextEntry={false} // Ensure this is set to false\n//             />\n//           </View>\n\n//           <View style={styles.inputContainer}>\n//             <Ionicons name=\"mail-outline\" size={20} color={COLORS.darkGray} />\n//             <TextInput\n//               placeholder=\"Enter your email\"\n//               //placeholderTextColor={COLORS.darkGray}\n//               onChangeText={setEmail}\n//               value={email}\n//               style={styles.input}\n//               keyboardType=\"email-address\"\n//               autoCapitalize=\"none\"\n//               autoComplete=\"email\"\n//               secureTextEntry={false} // Ensure this is set to false\n//             />\n//           </View>\n\n//           <View style={styles.inputContainer}>\n//             <Ionicons\n//               name=\"lock-closed-outline\"\n//               size={20}\n//               color={COLORS.darkGray}\n//             />\n//             <TextInput\n//               placeholder=\"Enter your password\"\n//               //placeholderTextColor={COLORS.darkGray}\n//               onChangeText={setPassword}\n//               value={password}\n//               style={styles.input}\n//               secureTextEntry={!showPassword}\n//             />\n//             <TouchableOpacity\n//               onPress={() => setShowPassword((prevState) => !prevState)}\n//             >\n//               <Ionicons\n//                 name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\n//                 size={20}\n//                 color={COLORS.darkGray}\n//               />\n//             </TouchableOpacity>\n//           </View>\n\n//           <View style={styles.inputContainer}>\n//             <Ionicons\n//               name=\"lock-closed-outline\"\n//               size={20}\n//               color={COLORS.darkGray}\n//             />\n//             <TextInput\n//               placeholder=\"Confirm your password\"\n//               onChangeText={setConfirmedPassword}\n//               value={confirmedpassword}\n//               style={styles.input}\n//               secureTextEntry={!showConfirmPassword} // Ensure this is set to false\n//             />\n\n//             <TouchableOpacity\n//               onPress={() => setShowConfirmPassword((prevState) => !prevState)}\n//             >\n//               <Ionicons\n//                 name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\n//                 size={20}\n//                 color={COLORS.darkGray}\n//               />\n//             </TouchableOpacity>\n//           </View>\n\n//           <Text style={styles.passwordCriteria}>\n//             <Ionicons name=\"checkmark-outline\" size={16} color={COLORS.green} />{\" \"}\n//             At least 8 characters\n//           </Text>\n//           <Text style={styles.passwordCriteria}>\n//             <Ionicons name=\"checkmark-outline\" size={16} color={COLORS.green} />{\" \"}\n//             At least 1 number\n//           </Text>\n//           <Text style={styles.passwordCriteria}>\n//             <Ionicons name=\"checkmark-outline\" size={16} color={COLORS.green} />{\" \"}\n//             Both upper and lower case letters\n//           </Text>\n\n//           <TouchableOpacity\n//             style={styles.signupButton}\n//             onPress={registerAction}\n//           >\n//             <Text style={styles.loginButtonText}>Sign Up</Text>\n//           </TouchableOpacity>\n//         </View>\n//       )}\n//     </View>\n//   );\n// };\n\n// export default LoginComponentTwo;\n\n// const styles = StyleSheet.create({\n//   container: {\n//     paddingHorizontal: 20,\n//     paddingTop: 20,\n//     backgroundColor: COLORS.white,\n//     alignItems: \"center\",\n//   },\n//   logo: {\n//     width: 80,\n//     height: 80,\n//     marginTop: 50,\n//     borderRadius: 13,\n//   },\n//   appName: {\n//     fontSize: 24,\n//     fontWeight: \"bold\",\n//     color: COLORS.primary,\n//     marginTop: 10,\n//   },\n//   welcomeText: {\n//     fontSize: 20,\n//     fontWeight: \"bold\",\n//     color: COLORS.darkGray,\n//     marginTop: 20,\n//   },\n//   descriptionText: {\n//     fontSize: 14,\n//     color: COLORS.darkGray,\n//     textAlign: \"center\",\n//     marginVertical: 10,\n//   },\n//   tabContainer: {\n//     flexDirection: \"row\",\n//     marginVertical: 20,\n//   },\n//   tab: {\n//     flex: 1,\n//     paddingBottom: 5,\n//     alignItems: \"center\",\n//   },\n//   activeTab: {\n//     borderBottomWidth: 2,\n//     borderBottomColor: COLORS.primary,\n//   },\n//   tabText: {\n//     fontSize: 16,\n//     color: COLORS.darkGray,\n//   },\n//   activeTabText: {\n//     color: COLORS.primary,\n//   },\n//   inputContainer: {\n//     flexDirection: \"row\",\n//     alignItems: \"center\",\n//     backgroundColor: COLORS.lightGray,\n//     padding: 15,\n//     borderRadius: 5,\n//     marginVertical: 10,\n//     width: width - 40,\n//   },\n//   input: {\n//     flex: 1,\n//     marginLeft: 10,\n//     color: COLORS.darkGray,\n//   },\n//   forgotPasswordText: {\n//     alignSelf: \"flex-end\",\n//     color: COLORS.primary,\n//     marginTop: 10,\n//     marginBottom: 20,\n//   },\n//   loginButton: {\n//     backgroundColor: COLORS.primary,\n//     padding: 15,\n//     borderRadius: 5,\n//     width: width - 40,\n//     alignItems: \"center\",\n//   },\n//   signupButton: {\n//     backgroundColor: COLORS.primary,\n//     padding: 15,\n//     borderRadius: 5,\n//     width: width - 40,\n//     alignItems: \"center\",\n//     marginTop: 20,\n//   },\n//   loginButtonText: {\n//     fontSize: 18,\n//     color: COLORS.white,\n//     fontWeight: \"bold\",\n//   },\n//   termsText: {\n//     fontSize: 12,\n//     color: COLORS.darkGray,\n//     textAlign: \"left\",\n//     marginLeft: 10,\n//     marginRight: 20,\n//   },\n//   checkboxContainer: {\n//     flexDirection: \"row\",\n//     alignItems: \"center\",\n//     marginVertical: 10,\n//   },\n//   passwordCriteria: {\n//     color: COLORS.darkGray,\n//     fontSize: 14,\n//     marginTop: 5,\n//     flexDirection: \"row\",\n//     alignItems: \"center\",\n//   },\n// });\n","import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\nimport { ProductModelProps } from \"@/models/ProductModelProps\";\n\n// Define the context type\ninterface FavoriteContextType {\n  favorites: Partial<ProductModelProps>[];\n  addToFavorite: (item: Partial<ProductModelProps>) => Promise<void>;\n  decreaseFromFavorite: (item: Partial<ProductModelProps>) => void;\n  deleteItemFromFavorite: (item: Partial<ProductModelProps>) => void;\n  totalSum: number;\n  totalTax: number;\n  totalShipping: number;\n  grandTotal: number;\n  quantity: number;\n  clearData: () => void;\n}\n\nexport const FavoriteContext = createContext<FavoriteContextType | undefined>(undefined);\n\nexport const useFavorite = (): FavoriteContextType => {\n  const context = useContext(FavoriteContext);\n  if (!context) {\n    throw new Error(\"useFavorite must be used within a FavoriteProvider\");\n  }\n  return context;\n};\n\ninterface FavoriteProviderProps {\n  children: ReactNode;\n  storage: {\n    getItem: (key: string) => Promise<string | null>;\n    setItem: (key: string, value: string) => Promise<void>;\n    removeItem: (key: string) => Promise<void>;\n  };\n  storageKey: string;\n}\n\nexport const FavoriteProvider: React.FC<FavoriteProviderProps> = ({ children, storage, storageKey }) => {\n  const [favorites, setFavorites] = useState<Partial<ProductModelProps>[]>([]);\n  const [totalSum, setTotalSum] = useState<number>(0);\n  const [totalShipping, setTotalShipping] = useState<number>(10);\n  const [quantity, setQuantity] = useState<number>(0);\n\n  // Load favorites from provided storage when the component mounts\n  useEffect(() => {\n    const loadFavorites = async () => {\n      try {\n        const storedFavorites = await storage.getItem(storageKey);\n        if (storedFavorites) {\n          const parsedFavorites = JSON.parse(storedFavorites);\n          setFavorites(parsedFavorites);\n          calculateTotalSum(parsedFavorites);\n          setQuantity(parsedFavorites.reduce((sum: number, item: Partial<ProductModelProps>) => sum + (item.quantity || 0), 0));\n        }\n      } catch (error) {\n        console.error(\"Failed to load favorites from storage:\", error);\n      }\n    };\n    loadFavorites();\n  }, [storage, storageKey]);\n\n  // Save favorites to provided storage whenever they are updated\n  useEffect(() => {\n    const saveFavorites = async () => {\n      try {\n        if (favorites.length > 0) {\n          await storage.setItem(storageKey, JSON.stringify(favorites));\n        }\n      } catch (error) {\n        console.error(\"Failed to save favorites to storage:\", error);\n      }\n    };\n    saveFavorites();\n  }, [favorites, storage, storageKey]);\n\n  const addToFavorite = async (item: Partial<ProductModelProps>) => {\n    let updatedFavorites = [...favorites];\n    const itemExistIndex = updatedFavorites.findIndex((favorite) => favorite.id === item.id);\n\n    if (itemExistIndex !== -1) {\n      updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) + 1;\n    } else {\n      updatedFavorites = [...updatedFavorites, { ...item, quantity: 1 }];\n    }\n\n    setFavorites(updatedFavorites);\n    calculateTotalSum(updatedFavorites);\n    setQuantity((prev) => prev + 1);\n  };\n\n  const decreaseFromFavorite = (item: Partial<ProductModelProps>) => {\n    const itemExistIndex = favorites.findIndex((favorite) => favorite.id === item.id);\n    if (itemExistIndex !== -1) {\n      const updatedFavorites = [...favorites];\n      if ((updatedFavorites[itemExistIndex].quantity || 0) > 1) {\n        updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) - 1;\n      } else {\n        updatedFavorites.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n      }\n\n      setFavorites(updatedFavorites);\n      calculateTotalSum(updatedFavorites);\n      setQuantity((prev) => prev - 1);\n    }\n  };\n\n  const deleteItemFromFavorite = (item: Partial<ProductModelProps>) => {\n    const updatedFavorites = favorites.filter((favorite) => favorite.id !== item.id);\n    setFavorites(updatedFavorites);\n    calculateTotalSum(updatedFavorites);\n    setQuantity((prev) => prev - (item.quantity || 0));\n  };\n\n  const clearData = () => {\n    setFavorites([]);\n    setTotalSum(0);\n    setQuantity(0);\n    storage.removeItem(storageKey); // Clear from storage as well\n  };\n\n  // Calculate total sum\n  const calculateTotalSum = (favorites: Partial<ProductModelProps>[]) => {\n    const total = favorites.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n    setTotalSum(total);\n  };\n\n  const value: FavoriteContextType = {\n    favorites,\n    addToFavorite,\n    decreaseFromFavorite,\n    totalSum,\n    totalTax: totalSum * 0.08875,\n    totalShipping,\n    grandTotal: totalSum + totalSum * 0.08875 + totalShipping,\n    quantity,\n    deleteItemFromFavorite,\n    clearData,\n  };\n\n  return <FavoriteContext.Provider value={value}>{children}</FavoriteContext.Provider>;\n};\n\n\n// stores it in the view temportay\n// import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\n// import { useFocusEffect } from \"@react-navigation/native\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\";\n// import AsyncStorage from \"@react-native-async-storage/async-storage\"; // Import AsyncStorage\n\n// const FAVORITES_KEY = 'user_favorites'; // Key for storing favorites in AsyncStorage\n\n// // Define the context type\n// interface FavoriteContextType {\n//   favorites: Partial<ProductModelProps>[];\n//   addToFavorite: (item: Partial<ProductModelProps>) => Promise<void>;\n//   decreaseFromFavorite: (item: Partial<ProductModelProps>) => void;\n//   deleteItemFromFavorite: (item: Partial<ProductModelProps>) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   clearData: () => void;\n// }\n\n// export const FavoriteContext = createContext<FavoriteContextType | undefined>(undefined);\n\n// export const useFavorite = (): FavoriteContextType => {\n//   const context = useContext(FavoriteContext);\n//   if (!context) {\n//     throw new Error(\"useFavorite must be used within a FavoriteProvider\");\n//   }\n//   return context;\n// };\n\n// export const FavoriteProvider = ({ children }: { children: ReactNode }) => {\n//   const [favorites, setFavorites] = useState<Partial<ProductModelProps>[]>([]);\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10);\n//   const [quantity, setQuantity] = useState<number>(0);\n\n//   // Load favorites from AsyncStorage when the component mounts\n//   useEffect(() => {\n//     const loadFavorites = async () => {\n//       try {\n//         const storedFavorites = await AsyncStorage.getItem(FAVORITES_KEY);\n//         if (storedFavorites) {\n//           setFavorites(JSON.parse(storedFavorites));\n//         }\n//       } catch (error) {\n//         console.error(\"Failed to load favorites from storage:\", error);\n//       }\n//     };\n//     loadFavorites();\n//   }, []);\n\n//   // Save favorites to AsyncStorage whenever they are updated\n//   useEffect(() => {\n//     const saveFavorites = async () => {\n//       try {\n//         await AsyncStorage.setItem(FAVORITES_KEY, JSON.stringify(favorites));\n//       } catch (error) {\n//         console.error(\"Failed to save favorites to storage:\", error);\n//       }\n//     };\n//     saveFavorites();\n//   }, [favorites]);\n\n//   const addToFavorite = async (item: Partial<ProductModelProps>) => {\n//     let updatedFavorites = [...favorites];\n//     const itemExistIndex = updatedFavorites.findIndex((favorite) => favorite.id === item.id);\n\n//     if (itemExistIndex !== -1) {\n//       updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) + 1;\n//     } else {\n//       updatedFavorites = [...updatedFavorites, { ...item, quantity: 1 }];\n//     }\n\n//     setFavorites(updatedFavorites);\n//     calculateTotalSum(updatedFavorites);\n//     setQuantity((prev) => prev + 1);\n//   };\n\n//   const decreaseFromFavorite = (item: Partial<ProductModelProps>) => {\n//     const itemExistIndex = favorites.findIndex((favorite) => favorite.id === item.id);\n//     if (itemExistIndex !== -1) {\n//       const updatedFavorites = [...favorites];\n//       if ((updatedFavorites[itemExistIndex].quantity || 0) > 1) {\n//         updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) - 1;\n//       } else {\n//         updatedFavorites.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//       }\n\n//       setFavorites(updatedFavorites);\n//       calculateTotalSum(updatedFavorites);\n//       setQuantity((prev) => prev - 1);\n//     }\n//   };\n\n//   const deleteItemFromFavorite = (item: Partial<ProductModelProps>) => {\n//     const updatedFavorites = favorites.filter((favorite) => favorite.id !== item.id);\n//     setFavorites(updatedFavorites);\n//     calculateTotalSum(updatedFavorites);\n//     setQuantity((prev) => prev - (item.quantity || 0));\n//   };\n\n//   const clearData = () => {\n//     setFavorites([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//     AsyncStorage.removeItem(FAVORITES_KEY); // Clear from storage as well\n//   };\n\n//   // Calculate total sum\n//   const calculateTotalSum = (favorites: Partial<ProductModelProps>[]) => {\n//     const total = favorites.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n//     setTotalSum(total);\n//   };\n\n//   const value: FavoriteContextType = {\n//     favorites,\n//     addToFavorite,\n//     decreaseFromFavorite,\n//     totalSum,\n//     totalTax: totalSum * 0.08875,\n//     totalShipping,\n//     grandTotal: totalSum + totalSum * 0.08875 + totalShipping,\n//     quantity,\n//     deleteItemFromFavorite,\n//     clearData,\n//   };\n\n//   return <FavoriteContext.Provider value={value}>{children}</FavoriteContext.Provider>;\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode } from \"react\";\n// import { useFocusEffect } from \"@react-navigation/native\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\"; \n\n// // Define the context type\n// interface FavoriteContextType {\n//   favorites: Partial<ProductModelProps>[];\n//   addToFavorite: (item: Partial<ProductModelProps>) => Promise<void>;\n//   decreaseFromFavorite: (item: Partial<ProductModelProps>) => void;\n//   deleteItemFromFavorite: (item: Partial<ProductModelProps>) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   clearData: (authUser: any) => void;\n// }\n\n// export const FavoriteContext = createContext<FavoriteContextType | undefined>(undefined);\n\n// export const useFavorite = (): FavoriteContextType => {\n//   const context = useContext(FavoriteContext);\n//   if (!context) {\n//     throw new Error(\"useFavorite must be used within a FavoriteProvider\");\n//   }\n//   return context;\n// };\n\n// export const FavoriteProvider = ({ children }: { children: ReactNode }) => {\n//   const [favorites, setFavorites] = useState<Partial<ProductModelProps>[]>([]); // Initialize state with an empty favorite\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n//   const [quantity, setQuantity] = useState<number>(0);\n\n//   const totalTax = totalSum * 0.08875; // Tax calculation\n//   const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n//   useFocusEffect(\n//     React.useCallback(() => {\n//       // Load or calculate initial values when the favorite context is first used\n//       calculateTotalSum(favorites);\n//       setQuantity(favorites.reduce((sum, item) => sum + (item.quantity || 0), 0));\n//     }, [favorites]) // Runs when the favorite is updated\n//   );\n\n//   const addToFavorite = async (item: Partial<ProductModelProps>) => {\n//     try {\n//       let updatedFavorites = [...favorites];\n//       const itemExistIndex = updatedFavorites.findIndex((favorite) => favorite.id === item.id);\n\n//       if (itemExistIndex !== -1) {\n//         updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) + 1; // Increment quantity\n//       } else {\n//         updatedFavorites = [...updatedFavorites, { ...item, quantity: 1 }];\n//       }\n\n//       setFavorites(updatedFavorites);\n//       calculateTotalSum(updatedFavorites);\n//       setQuantity((prev) => prev + 1);\n\n//       // Ensure to await the user profile update\n//       //  error adding item -- needed editing \n//       // await updateSingleUserItem({ favorite: updatedFavorites, user: authUser });\n\n\n\n\n\n//     } catch (error) {\n//       console.error(\"Error adding item to favorite:\", error);\n//       // You can add further error handling here, e.g., show a notification to the user\n//     }\n//   };\n\n//   const decreaseFromFavorite = (item: Partial<ProductModelProps>) => {\n//     const itemExistIndex = favorites.findIndex((favorite) => favorite.id === item.id);\n//     if (itemExistIndex !== -1) {\n//       const updatedFavorites = [...favorites];\n//       if ((updatedFavorites[itemExistIndex].quantity || 0) > 1) {\n//         updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) - 1;\n//       } else {\n//         updatedFavorites.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//       }\n\n//       setFavorites(updatedFavorites);\n//       calculateTotalSum(updatedFavorites);\n//       setQuantity((prev) => prev - 1);\n//       // updateSingleUserItem({ favorite: updatedFavorites, user: authUser }); // Update user profile favorite\n//     }\n//   };\n\n//   const deleteItemFromFavorite = (item: Partial<ProductModelProps>) => {\n//     const updatedFavorites = favorites.filter((favorite) => favorite.id !== item.id);\n//     setFavorites(updatedFavorites);\n//     calculateTotalSum(updatedFavorites);\n//     setQuantity((prev) => prev - (item.quantity || 0));\n//   };\n\n//   const clearData = (authUser: any) => {\n//     setFavorites([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//     // updateSingleUserItem({ favorite: [], user: authUser }); // Clear favorite in user profile\n//   };\n\n//   // Calculate total sum\n//   const calculateTotalSum = (favorites: Partial<ProductModelProps>[]) => {\n//     const total = favorites.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n//     setTotalSum(total);\n//   };\n\n//   const value: FavoriteContextType = {\n//     favorites,\n//     addToFavorite,\n//     decreaseFromFavorite,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromFavorite,\n//     clearData,\n//   };\n\n//   return (\n//     <FavoriteContext.Provider value={value}>\n//       {children}\n//     </FavoriteContext.Provider>\n//   );\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { createContext, useContext, useState, ReactNode } from \"react\";\n// import { useFocusEffect } from \"@react-navigation/native\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\"; \n\n// // Define the context type\n// interface FavoriteContextType {\n//   favorites: Partial<ProductModelProps>[];\n//   addToFavorite: (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => Promise<void>;\n//   decreaseFromFavorite: (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => void;\n//   deleteItemFromFavorite: (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => void;\n//   totalSum: number;\n//   totalTax: number;\n//   totalShipping: number;\n//   grandTotal: number;\n//   quantity: number;\n//   clearData: (authUser: any, updateSingleUserItem: any) => void;\n// }\n\n// export const FavoriteContext = createContext<FavoriteContextType | undefined>(undefined);\n\n// export const useFavorite = (): FavoriteContextType => {\n//   const context = useContext(FavoriteContext);\n//   if (!context) {\n//     throw new Error(\"useFavorite must be used within a FavoriteProvider\");\n//   }\n//   return context;\n// };\n\n// export const FavoriteProvider = ({ children }: { children: ReactNode }) => {\n//   const [favorites, setFavorites] = useState<Partial<ProductModelProps>[]>([]); // Initialize state with an empty favorite\n//   const [totalSum, setTotalSum] = useState<number>(0);\n//   const [totalShipping, setTotalShipping] = useState<number>(10); // Example shipping cost\n//   const [quantity, setQuantity] = useState<number>(0);\n\n//   const totalTax = totalSum * 0.08875; // Tax calculation\n//   const grandTotal = totalSum + totalTax + totalShipping; // Grand total calculation\n\n//   useFocusEffect(\n//     React.useCallback(() => {\n//       // Load or calculate initial values when the favorite context is first used\n//       calculateTotalSum(favorites);\n//       setQuantity(favorites.reduce((sum, item) => sum + (item.quantity || 0), 0));\n//     }, [favorites]) // Runs when the favorite is updated\n//   );\n\n//   const addToFavorite = async (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => {\n//     try {\n//       let updatedFavorites = [...favorites];\n//       const itemExistIndex = updatedFavorites.findIndex((favorite) => favorite.id === item.id);\n\n//       if (itemExistIndex !== -1) {\n//         updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) + 1; // Increment quantity\n//       } else {\n//         updatedFavorites = [...updatedFavorites, { ...item, quantity: 1 }];\n//       }\n\n//       setFavorites(updatedFavorites);\n//       calculateTotalSum(updatedFavorites);\n//       setQuantity((prev) => prev + 1);\n\n//       // Ensure to await the user profile update\n//       //  error adding item -- needed editing \n//       // await updateSingleUserItem({ favorite: updatedFavorites, user: authUser });\n\n\n\n\n\n//     } catch (error) {\n//       console.error(\"Error adding item to favorite:\", error);\n//       // You can add further error handling here, e.g., show a notification to the user\n//     }\n//   };\n\n//   const decreaseFromFavorite = (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => {\n//     const itemExistIndex = favorites.findIndex((favorite) => favorite.id === item.id);\n//     if (itemExistIndex !== -1) {\n//       const updatedFavorites = [...favorites];\n//       if ((updatedFavorites[itemExistIndex].quantity || 0) > 1) {\n//         updatedFavorites[itemExistIndex].quantity = (updatedFavorites[itemExistIndex].quantity || 0) - 1;\n//       } else {\n//         updatedFavorites.splice(itemExistIndex, 1); // Remove item if quantity <= 1\n//       }\n\n//       setFavorites(updatedFavorites);\n//       calculateTotalSum(updatedFavorites);\n//       setQuantity((prev) => prev - 1);\n//       updateSingleUserItem({ favorite: updatedFavorites, user: authUser }); // Update user profile favorite\n//     }\n//   };\n\n//   const deleteItemFromFavorite = (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => {\n//     const updatedFavorites = favorites.filter((favorite) => favorite.id !== item.id);\n//     setFavorites(updatedFavorites);\n//     calculateTotalSum(updatedFavorites);\n//     setQuantity((prev) => prev - (item.quantity || 0));\n//     updateSingleUserItem({ favorite: updatedFavorites, user: authUser }); // Update user profile favorite\n//   };\n\n//   const clearData = (authUser: any, updateSingleUserItem: any) => {\n//     setFavorites([]);\n//     setTotalSum(0);\n//     setQuantity(0);\n//     updateSingleUserItem({ favorite: [], user: authUser }); // Clear favorite in user profile\n//   };\n\n//   // Calculate total sum\n//   const calculateTotalSum = (favorites: Partial<ProductModelProps>[]) => {\n//     const total = favorites.reduce((sum, item) => sum + (item.price || 0) * (item.quantity || 0), 0);\n//     setTotalSum(total);\n//   };\n\n//   const value: FavoriteContextType = {\n//     favorites,\n//     addToFavorite,\n//     decreaseFromFavorite,\n//     quantity,\n//     totalSum,\n//     totalTax,\n//     totalShipping,\n//     grandTotal,\n//     deleteItemFromFavorite,\n//     clearData,\n//   };\n\n//   return (\n//     <FavoriteContext.Provider value={value}>\n//       {children}\n//     </FavoriteContext.Provider>\n//   );\n// };\n\n\n","import React, { FC, useEffect, useState } from 'react';\nimport { View, Text, Image, StyleSheet, TouchableOpacity, Dimensions, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { COLORS } from '@/utils/theme'; // Assuming you have a COLORS file\nimport { AWS_HOLDER_IMAGE } from '@/utils/api';\nimport { useClientProduct } from '@/contexts/ClientProductContext';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport convertToCurrency from '@/hooks/convertToCurrency';\nimport { useFavorite } from '@/contexts/FavoriteContext';\nimport { useTheme } from \"@/contexts/ThemeContext\"\n\nconst { width, height } = Dimensions.get('window');\n\nexport interface ProductDetailsPageVThreeProps {\n  showSize: boolean\n}\n\nconst ProductDetailsPageVThree: FC<ProductDetailsPageVThreeProps> = (props) => {\n  const [selectedSize, setSelectedSize] = useState<number | null>(null);\n  const [isFavorite, setIsFavorite] = useState<boolean>(false); // State for heart icon toggle\n  const { selectedProduct } = useClientProduct();\n  const { authState, updateSingleUserItem} = useAuth(); // Access authState and updateSingleUserItem\n  const { addToCart } = useCart();\n  const { colors } = useTheme();\n  const { addToFavorite, favorites } = useFavorite();\n\n  const sizes = [6, 6.5, 7, 7.5, 8]; // Example sizes\n\n  const handlePress = () => {\n    if (selectedProduct) {\n      const partialProduct: Partial<ProductModelProps> = {\n        id: selectedProduct.id,\n        name: selectedProduct.name,\n        price: selectedProduct.price,\n        images: selectedProduct.images,\n        quantity: 1, // Default quantity\n        color: 'default', // Add color if necessary\n        size: String(selectedSize) ?? 'default', // Add size if necessary\n      };\n      addToCart(partialProduct); // Pass authUser and updateSingleUserItem\n    }\n  };\n// Check if product is already a favorite when favorites or selectedProduct changes\nuseEffect(() => {\n  if (selectedProduct && favorites.some((fav) => fav.id === selectedProduct.id)) {\n    setIsFavorite(true);\n  } else {\n    setIsFavorite(false);\n  }\n}, [favorites, selectedProduct]); // Dependency array: Runs when favorites or selectedProduct changes\n\nconst toggleFavorite = async () => {\n  console.log(\"Fav selected 3\")\n  if (selectedProduct) {\n    const currentFavorites = authState?.user?.favoriteItems || [];\n\n    // Check if the product is already a favorite\n    const updatedFavorites = currentFavorites.includes(selectedProduct.id)\n      ? currentFavorites.filter((itemId) => itemId !== selectedProduct.id) // Remove from favorites\n      : [...currentFavorites, selectedProduct.id]; // Add to favorites\n\n    setIsFavorite(!isFavorite); // Toggle UI state\n\n    // Call the `updateSingleUserItem` function with the updated favorites list\n    // await updateSingleUserItem('favoriteItems', updatedFavorites);\n\n    // Add the product to the favorites list in the context\n    addToFavorite(selectedProduct);\n  }\n};\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  scrollContainer: {\n    paddingBottom: 120, // Space for the fixed Add to Cart button\n  },\n  heartIconWrapper: {\n    position: 'absolute',\n    top: 16,\n    right: 16,\n    zIndex: 10, // Keep it on top\n  },\n  imageCarousel: {\n    height: width,\n  },\n  productImage: {\n    width: width,\n    height: width,\n    resizeMode: 'cover',\n  },\n  productInfo: {\n    padding: 16,\n  },\n  productName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: colors.pageText\n  },\n  productColor: {\n    fontSize: 14,\n    color: '#666',\n    marginTop: 4,\n  },\n  priceDescription: {\n    padding: 16,\n  },\n  price: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: colors.pageText\n  },\n  description: {\n    fontSize: 14,\n    color: colors.pageText, //'#555',\n    marginTop: 8,\n  },\n  sizeLabel: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: colors.pageText, // '#000',\n    paddingHorizontal: 16,\n    paddingTop: 16,\n  },\n  sizeSelector: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingHorizontal: 16,\n    marginTop: 8,\n  },\n  sizeOption: {\n    borderRadius: 50,\n    borderWidth: 1,\n    borderColor: colors.border, // '#ddd',\n    padding: 12,\n    width: 50,\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  selectedSizeOption: {\n    backgroundColor: '#000',\n    borderColor: '#000',\n  },\n  sizeText: {\n    fontSize: 16,\n    color: '#000',\n  },\n  selectedSizeText: {\n    color: '#fff',\n  },\n  fixedBottomButtonContainer: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    // backgroundColor: 'transpart',\n  },\n  addToCartButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: colors.buttonBackground, //'#000',\n    paddingVertical: 16,\n    borderRadius: 50,\n  },\n  addToCartButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: colors.buttonText,// '#fff',\n    marginRight: 10,\n  },\n});\n\n  return (\n    <View style={styles.container}>\n      {/* Heart Icon (Favorite) */}\n      <View style={styles.heartIconWrapper}>\n        <TouchableOpacity onPress={toggleFavorite}>\n          <Ionicons\n            name={isFavorite ? \"heart\" : \"heart-outline\"} // Toggle between filled and outline\n            size={24}\n            color={isFavorite ? \"black\" : \"black\"} // Set black when active\n          />\n        </TouchableOpacity>\n      </View>\n\n      {/* Product Scrollable Content */}\n      <ScrollView contentContainerStyle={styles.scrollContainer}>\n        {/* Product Image Carousel */}\n        <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} style={styles.imageCarousel}>\n          {selectedProduct?.images?.map((imageUri, index) => (\n            <Image key={index} source={{ uri: imageUri || AWS_HOLDER_IMAGE }} style={styles.productImage} />\n          ))}\n        </ScrollView>\n\n        {/* Product Info */}\n        <View style={styles.productInfo}>\n          <Text style={styles.productName}>{selectedProduct?.name}</Text>\n          <Text style={styles.productColor}>Color: {selectedProduct?.color}</Text>\n        </View>\n\n        {/* Price and Description */}\n        <View style={styles.priceDescription}>\n          <Text style={styles.price}>{convertToCurrency(selectedProduct?.price ?? 0) }</Text>\n          <Text style={styles.description}>\n            {selectedProduct?.description}\n          </Text>\n        </View>\n{/* Size Selector */}\n{props.showSize ? (\n  <>\n    <Text style={styles.sizeLabel}>PICK YOUR SIZE</Text>\n    <View style={styles.sizeSelector}>\n      {sizes.map((size, index) => (\n        <TouchableOpacity\n          key={index}\n          style={[styles.sizeOption, selectedSize === size && styles.selectedSizeOption]}\n          onPress={() => setSelectedSize(size)}\n        >\n          <Text style={[styles.sizeText, selectedSize === size && styles.selectedSizeText]}>{size}</Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n  </>\n) : (\n  <View />\n)}\n\n        \n       \n      </ScrollView>\n  \n\n      {/* Add to Cart Button - Fixed at the bottom */}\n      <View style={styles.fixedBottomButtonContainer}>\n        <TouchableOpacity style={styles.addToCartButton} onPress={handlePress}>\n          <Text style={styles.addToCartButtonText}>Add to Cart</Text>\n          <Ionicons name=\"cart-outline\" size={24} color={colors.primary} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\n\nexport default ProductDetailsPageVThree;\n\n\n\n// cart button in scroll view\n// import React, { useState } from 'react';\n// import { View, Text, Image, StyleSheet, TouchableOpacity, Dimensions, ScrollView } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { COLORS } from '@/utils/theme'; // Assuming you have a COLORS file\n// import { AWS_HOLDER_IMAGE } from '@/utils/api';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { useCart } from '@/contexts/CartContext';\n\n// const { width } = Dimensions.get('window');\n\n// const ProductDetailsPageVThree: React.FC = () => {\n//   const [selectedSize, setSelectedSize] = useState<number | null>(null);\n//   const [isFavorite, setIsFavorite] = useState<boolean>(false); // State for heart icon toggle\n//   const { selectedProduct } = useClientProduct();\n//   const { authState, updateSingleUserItem } = useAuth(); // Access authState and updateSingleUserItem\n//   const { addToCart } = useCart();\n\n//   const sizes = [6, 6.5, 7, 7.5, 8]; // Example sizes\n\n//   const handlePress = () => {\n//     if (selectedProduct) {\n//       const partialProduct: Partial<ProductModelProps> = {\n//         id: selectedProduct.id,\n//         name: selectedProduct.name,\n//         price: selectedProduct.price,\n//         images: selectedProduct.images,\n//         quantity: 1, // Default quantity\n//         color: 'default', // Add color if necessary\n//         size: String(selectedSize) ?? 'default', // Add size if necessary\n//       };\n//       addToCart(partialProduct); // Pass authUser and updateSingleUserItem\n//     }\n//   };\n\n//   const toggleFavorite = () => {\n//     setIsFavorite(!isFavorite); // Toggle the heart icon\n//   };\n\n//   return (\n//     <ScrollView contentContainerStyle={styles.container}>\n//       {/* Heart Icon (Favorite) */}\n//       <View style={styles.heartIconWrapper}>\n//         <TouchableOpacity onPress={toggleFavorite}>\n//           <Ionicons\n//             name={isFavorite ? \"heart\" : \"heart-outline\"} // Toggle between filled and outline\n//             size={24}\n//             color={isFavorite ? \"black\" : \"black\"} // Set black when active\n//           />\n//         </TouchableOpacity>\n//       </View>\n\n//       {/* Product Image Carousel */}\n//       <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} style={styles.imageCarousel}>\n//         {selectedProduct?.images?.map((imageUri, index) => (\n//           <Image key={index} source={{ uri: imageUri || AWS_HOLDER_IMAGE }} style={styles.productImage} />\n//         ))}\n//       </ScrollView>\n\n//       {/* Product Info */}\n//       <View style={styles.productInfo}>\n//         <Text style={styles.productName}>Nike Air Max 720</Text>\n//         <Text style={styles.productColor}>Color: Black Anthracite</Text>\n//       </View>\n\n//       {/* Price and Description */}\n//       <View style={styles.priceDescription}>\n//         <Text style={styles.price}>$180</Text>\n//         <Text style={styles.description}>\n//           The Nike Air Max 720 goes bigger than ever before with Nike's tallest Air unit yet, offering more air underfoot for unimaginable, all-day comfort.\n//         </Text>\n//       </View>\n\n//       {/* Size Selector */}\n//       <Text style={styles.sizeLabel}>PICK YOUR SIZE</Text>\n//       <View style={styles.sizeSelector}>\n//         {sizes.map((size, index) => (\n//           <TouchableOpacity\n//             key={index}\n//             style={[styles.sizeOption, selectedSize === size && styles.selectedSizeOption]}\n//             onPress={() => setSelectedSize(size)}\n//           >\n//             <Text style={[styles.sizeText, selectedSize === size && styles.selectedSizeText]}>{size}</Text>\n//           </TouchableOpacity>\n//         ))}\n//       </View>\n\n//       {/* Add to Cart Button */}\n//       <TouchableOpacity style={styles.addToCartButton} onPress={handlePress}>\n//         <Text style={styles.addToCartButtonText}>Add to Cart</Text>\n//         <Ionicons name=\"cart-outline\" size={24} color=\"white\" />\n//       </TouchableOpacity>\n//     </ScrollView>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     backgroundColor: '#F5F5F5',\n//     paddingBottom: 40,\n//   },\n//   heartIconWrapper: {\n//     position: 'absolute',\n//     top: 16,\n//     right: 16,\n//     zIndex: 10, // Keep it on top\n//   },\n//   imageCarousel: {\n//     height: width,\n//   },\n//   productImage: {\n//     width: width,\n//     height: width,\n//     resizeMode: 'cover',\n//   },\n//   productInfo: {\n//     padding: 16,\n//   },\n//   productName: {\n//     fontSize: 24,\n//     fontWeight: 'bold',\n//     color: '#000',\n//   },\n//   productColor: {\n//     fontSize: 14,\n//     color: '#666',\n//     marginTop: 4,\n//   },\n//   priceDescription: {\n//     padding: 16,\n//   },\n//   price: {\n//     fontSize: 28,\n//     fontWeight: 'bold',\n//     color: '#000',\n//   },\n//   description: {\n//     fontSize: 14,\n//     color: '#555',\n//     marginTop: 8,\n//   },\n//   sizeLabel: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#000',\n//     paddingHorizontal: 16,\n//     paddingTop: 16,\n//   },\n//   sizeSelector: {\n//     flexDirection: 'row',\n//     justifyContent: 'space-around',\n//     paddingHorizontal: 16,\n//     marginTop: 8,\n//   },\n//   sizeOption: {\n//     borderRadius: 50,\n//     borderWidth: 1,\n//     borderColor: '#ddd',\n//     padding: 12,\n//     width: 50,\n//     height: 50,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   selectedSizeOption: {\n//     backgroundColor: '#000',\n//     borderColor: '#000',\n//   },\n//   sizeText: {\n//     fontSize: 16,\n//     color: '#000',\n//   },\n//   selectedSizeText: {\n//     color: '#fff',\n//   },\n//   addToCartButton: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     backgroundColor: '#000',\n//     paddingVertical: 16,\n//     marginHorizontal: 16,\n//     borderRadius: 50,\n//     marginTop: 24,\n//   },\n//   addToCartButtonText: {\n//     fontSize: 18,\n//     fontWeight: 'bold',\n//     color: '#fff',\n//     marginRight: 10,\n//   },\n// });\n\n// export default ProductDetailsPageVThree;\n\n\n// simple\n// import React, { FC, useState } from 'react';\n// import { View, Text, Image, StyleSheet, ScrollView } from 'react-native';\n// import { useCart } from '@/contexts/CartContext';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import GlitterButton from '@/components/buttons/GlitterButtom';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useAuth } from '@/contexts/AuthContext';\n\n// const ProductDetailsPageVThree: FC = () => {\n//   const [selectedColor, setSelectedColor] = useState<string | null>(null);\n//   const [selectedSize, setSelectedSize] = useState<string | null>(null);\n//   const { addToCart } = useCart();\n//   const { selectedProduct } = useClientProduct();\n//   const { authState, updateSingleUserItem } = useAuth(); // Access authState and updateSingleUserItem\n\n//   const handlePress = () => {\n//     if (selectedProduct) {\n//       const partialProduct: Partial<ProductModelProps> = {\n//         id: selectedProduct.id,\n//         name: selectedProduct.name,\n//         price: selectedProduct.price,\n//         images: selectedProduct.images,\n//         quantity: 1, // Default quantity\n//         color: selectedColor ?? 'default', // Add color if necessary\n//         size: selectedSize ?? 'default', // Add size if necessary\n//       };\n//       addToCart(partialProduct); // Pass authUser and updateSingleUserItem\n//     }\n//   };\n\n//   const description = selectedProduct?.description ?? \"\";\n\n//   return (\n//     <View style={{ backgroundColor: 'white' }}>\n//       <ScrollView contentContainerStyle={styles.container}>\n//         <View style={styles.imageContainer}>\n//           <Image \n//             source={{ uri: selectedProduct?.images[0] }} // Replace with actual image URI\n//             style={styles.productImage}\n//           />\n//           <View style={styles.textOverlay}>\n//             <Text style={styles.overlayTitle}>{selectedProduct?.name}</Text>\n//             <Text style={styles.overlaySubtitle}>{description}</Text>\n//           </View>\n//         </View>\n        \n//         <View style={styles.section}>\n//           <View style={styles.productInfo}>\n//             <Text style={styles.productTitle}>{selectedProduct?.name}</Text>\n//             <Text style={styles.productSubtitle}>\n//               {description.length > 11 ? description.slice(0, 11) + '...' : description}\n//             </Text>\n//           </View>\n//         </View>\n\n//         <View style={styles.section}>\n//           <View style={styles.priceSection}>\n//             <Text style={styles.priceLabel}>Price</Text>\n//             <Text style={styles.divider}>|</Text>\n//             <View style={styles.priceInfo}>\n//               <Text style={styles.price}>\n//                 {convertToCurrency(selectedProduct?.price ?? 10000)}\n//               </Text>\n//               <Text style={styles.description}>{description}</Text>\n//             </View>\n//           </View>\n//         </View>\n\n//         <GlitterButton onPress={handlePress} buttonText={'Add To Cart'} />\n//       </ScrollView>\n//     </View>\n//   );\n// };\n\n// export default ProductDetailsPageVThree;\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flexGrow: 1,\n//     backgroundColor: '#FFFFFF',\n//     padding: 16,\n//   },\n//   imageContainer: {\n//     position: 'relative',\n//   },\n//   productImage: {\n//     width: '100%',\n//     height: 400,\n//     borderRadius: 10,\n//     marginBottom: 20,\n//   },\n//   textOverlay: {\n//     position: 'absolute',\n//     top: 20,\n//     left: 20,\n//     right: 20,\n//   },\n//   overlayTitle: {\n//     fontSize: 24,\n//     fontWeight: 'bold',\n//     color: '#FFFFFF',\n//     marginBottom: 5,\n//   },\n//   overlaySubtitle: {\n//     fontSize: 16,\n//     color: '#FFFFFF',\n//   },\n//   productInfo: {\n//     marginBottom: 20,\n//   },\n//   productTitle: {\n//     fontSize: 22,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//   },\n//   productSubtitle: {\n//     fontSize: 16,\n//     color: '#7D7D7D',\n//     marginTop: 5,\n//   },\n//   section: {\n//     borderWidth: 1,\n//     borderColor: '#E0E0E0',\n//     borderRadius: 10,\n//     padding: 16,\n//     marginBottom: 20,\n//   },\n//   priceSection: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//   },\n//   priceLabel: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//     marginRight: 10, // Added margin to separate label from price\n//   },\n//   divider: {\n//     fontSize: 16,\n//     color: '#E0E0E0',\n//     marginHorizontal: 10, // Divider spacing\n//   },\n//   priceInfo: {\n//     flex: 1,\n//   },\n//   price: {\n//     fontSize: 28,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//     marginBottom: 5,\n//   },\n//   description: {\n//     fontSize: 14,\n//     color: '#7D7D7D',\n//   },\n// });\n\n\n// import React, { FC, useState } from 'react';\n// import { View, Text, Image, StyleSheet, ScrollView } from 'react-native';\n// import { COLORS, SIZES } from '@/utils/theme';\n// import { useCart } from '@/contexts/CartContext';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n// import GlitterButton from '@/components/buttons/GlitterButtom';\n\n// const ProductDetailsPageVThree: FC = () => {\n//   const [selectedColor, setSelectedColor] = useState<string | null>(null);\n//   const [selectedSize, setSelectedSize] = useState<string | null>(null);\n//   const { addToCart } = useCart();\n//   const { selectedProduct } = useClientProduct();\n\n//   const [isPressed, setIsPressed] = useState(false);\n\n//   const handlePress = () => {\n//     if (selectedProduct) {\n//       const partialProduct: Partial<typeof selectedProduct> = {\n//         ...selectedProduct,\n//         quantity: 1, // Default quantity\n//         color: selectedColor ?? 'default', // Add color if necessary\n//         size: selectedSize ?? 'default', // Add size if necessary\n//       };\n//       addToCart(partialProduct); // Add the product to the cart\n//       setIsPressed(true);\n\n//       // Reset animation state after some time\n//       setTimeout(() => setIsPressed(false), 500);\n//     }\n//   };\n\n//   const description = selectedProduct?.description ?? \"\";\n\n//   return (\n//     <View style={{ backgroundColor: 'white' }}>\n//       <ScrollView contentContainerStyle={styles.container}>\n//         <View style={styles.imageContainer}>\n//           <Image \n//             source={{ uri: selectedProduct?.images[0] }} // Replace with actual image URI\n//             style={styles.productImage}\n//           />\n//           <View style={styles.textOverlay}>\n//             <Text style={styles.overlayTitle}>{selectedProduct?.name}</Text>\n//             <Text style={styles.overlaySubtitle}>{description}</Text>\n//           </View>\n//         </View>\n        \n//         <View style={styles.section}>\n//           <View style={styles.productInfo}>\n//             <Text style={styles.productTitle}>{selectedProduct?.name}</Text>\n//             <Text style={styles.productSubtitle}>\n//               {description.length > 11 ? description.slice(0, 11) + '...' : description}\n//             </Text>\n//           </View>\n//         </View>\n\n//         <View style={styles.section}>\n//           <View style={styles.priceSection}>\n//             <Text style={styles.priceLabel}>Price</Text>\n//             <Text style={styles.divider}>|</Text>\n//             <View style={styles.priceInfo}>\n//               <Text style={styles.price}>\n//                 {convertToCurrency(selectedProduct?.price ?? 10000)}\n//               </Text>\n//               <Text style={styles.description}>{description}</Text>\n//             </View>\n//           </View>\n//         </View>\n\n//         <GlitterButton onPress={handlePress} buttonText={'Add To Cart'} />\n//       </ScrollView>\n//     </View>\n//   );\n// };\n\n// export default ProductDetailsPageVThree;\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flexGrow: 1,\n//     backgroundColor: '#FFFFFF',\n//     padding: 16,\n//   },\n//   imageContainer: {\n//     position: 'relative',\n//   },\n//   productImage: {\n//     width: '100%',\n//     height: 400,\n//     borderRadius: 10,\n//     marginBottom: 20,\n//   },\n//   textOverlay: {\n//     position: 'absolute',\n//     top: 20,\n//     left: 20,\n//     right: 20,\n//   },\n//   productInfo: {\n//     marginBottom: 20,\n//   },\n//   productTitle: {\n//     fontSize: 22,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//   },\n//   productSubtitle: {\n//     fontSize: 16,\n//     color: '#7D7D7D',\n//     marginTop: 5,\n//   },\n//   overlayTitle: {\n//     fontSize: 24,\n//     fontWeight: 'bold',\n//     color: '#FFFFFF',\n//     marginBottom: 5,\n//   },\n//   overlaySubtitle: {\n//     fontSize: 16,\n//     color: '#FFFFFF',\n//   },\n//   section: {\n//     borderWidth: 1,\n//     borderColor: '#E0E0E0',\n//     borderRadius: 10,\n//     padding: 16,\n//     marginBottom: 20,\n//   },\n//   priceSection: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//   },\n//   priceLabel: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//     marginRight: 10, // Added margin to separate label from price\n//   },\n//   divider: {\n//     fontSize: 16,\n//     color: '#E0E0E0',\n//     marginHorizontal: 10, // Divider spacing\n//   },\n//   priceInfo: {\n//     flex: 1,\n//   },\n//   price: {\n//     fontSize: 28,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//     marginBottom: 5,\n//   },\n \n\n\n\n\n\n\n// import React, { FC, useContext, useState } from 'react';\n// import { View, Text, Image, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { COLORS, SIZES } from '@/utils/theme'; // Adjust based on your theme structure\n// import { CartContext } from '@/contexts/CartContext';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// // import SizesView from '@/components/card/SizesView';\n// import ProductColorPickerView from '@/components/views/ProductColorPickerView';\n// import SizesView from '@/components/views/SizesView';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import convertToCurrency from '@/hooks/convertToCurrency';\n\n// const ProductDetailsPageVThree: FC<ProductModelProps> = (props) => {\n//   const [selectedColor, setSelectedColor] = useState<string | null>(null);\n//   const [selectedSize, setSelectedSize] = useState<string | null>(null);\n//   const { addToCart } = useContext(CartContext);\n//   const { selectedProduct } = useClientProduct();\n\n//   const colors = ['#F5F5DC', '#000000', '#A0522D'];\n//   const sizes = ['S', 'M', 'L', 'XL', 'XXL'];\n\n//   const description = selectedProduct?.description ?? \"\"\n//   return (\n//     <View style={{backgroundColor: \"white\"}}>\n//     <ScrollView contentContainerStyle={styles.container}>\n//       <Image \n//         source={{ uri: selectedProduct?.images[0] }} // Replace with actual image URI\n//         style={styles.productImage}\n//       />\n      \n//       <View style={styles.section}>\n//         <View style={styles.productInfo}>\n//           <Text style={styles.productTitle}>{selectedProduct?.name}</Text>\n//           <Text style={styles.productSubtitle}>{description.length > 11 ? description.slice(0, 11) + '...' : description}\n//           </Text>\n//         </View>\n//       </View>\n\n\n\n\n// {/* Variants  */}\n// {/* <ProductColorPickerView colors={colors} selectedColor={selectedColor} onColorSelect={setSelectedColor} /> */}    \n// {/* <SizesView sizes={sizes} selectedSize={selectedSize} onSizeSelect={setSelectedSize} /> */}\n\n\n//       <View style={styles.section}>\n//       <View style={styles.priceSection}>\n//         <Text style={styles.priceLabel}>Price</Text>\n\n//         <Text style={styles.divider}>|</Text>\n//         <View style={styles.priceInfo}>\n//         <Text style={styles.price}>{ convertToCurrency(selectedProduct?.price ?? 10000) }</Text>\n\n//           <Text style={styles.description}>\n//             {selectedProduct?.description ?? \"\"}\n//           </Text>\n//         </View>\n//       </View>\n//     </View>\n//       <TouchableOpacity style={styles.buyButton} onPress={() => {\n//           if (selectedProduct) {\n//             addToCart(selectedProduct);\n\n//           }\n//       }}>\n//         <Text style={styles.buyButtonText}>Add To Cart</Text>\n//       </TouchableOpacity>\n//     </ScrollView>\n//     </View>\n//   );\n// };\n\n// export default ProductDetailsPageVThree;\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flexGrow: 1,\n//     backgroundColor: '#FFFFFF',\n//     padding: 16,\n//   },\n//    divider: {\n//     fontSize: 16,\n//     color: '#E0E0E0',\n//     marginHorizontal: 10, // Divider spacing\n//   },\n//   productImage: {\n//     width: '100%',\n//     height: 400,\n//     borderRadius: 10,\n//     marginBottom: 20,\n//   },\n//   section: {\n//     borderWidth: 1,\n//     borderColor: '#E0E0E0',\n//     borderRadius: 10,\n//     padding: 16,\n//     marginBottom: 20,\n//   },\n//   productInfo: {\n//     marginBottom: 20,\n//   },\n//   productTitle: {\n//     fontSize: 22,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//   },\n//   productSubtitle: {\n//     fontSize: 16,\n//     color: '#7D7D7D',\n//     marginTop: 5,\n//   },\n//   sectionTitle: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//     marginBottom: 10,\n//   },\n//   colorOptions: {\n//     flexDirection: 'row',\n//   },\n//   colorCircle: {\n//     width: 30,\n//     height: 30,\n//     borderRadius: 15,\n//     marginRight: 10,\n//     borderWidth: 1,\n//     borderColor: '#E0E0E0',\n//   },\n//   selectedColorCircle: {\n//     borderWidth: 2,\n//     borderColor: '#000000',\n//   },\n//   sizeOptions: {\n//     flexDirection: 'row',\n//     justifyContent: 'space-between',\n//   },\n//   sizeButton: {\n//     paddingVertical: 8,\n//     paddingHorizontal: 16,\n//     borderWidth: 1,\n//     borderColor: '#E0E0E0',\n//     borderRadius: 5,\n//   },\n//   selectedSizeButton: {\n//     backgroundColor: '#000000',\n//   },\n//   sizeText: {\n//     fontSize: 14,\n//     color: '#000000',\n//   },\n//   selectedSizeText: {\n//     color: '#FFFFFF',\n//   },\n//   priceSection: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     justifyContent: 'space-between',\n//   },\n//   priceLabel: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//   },\n//   priceInfo: {\n//     flex: 1, // Allows priceInfo to take up remaining space\n//   },\n//   price: {\n//     fontSize: 28,\n//     fontWeight: 'bold',\n//     color: '#000000',\n//     marginRight: 10,\n//   },\n//   descriptionContainer: {\n//     flex: 1,\n//   },\n//   description: {\n//     fontSize: 14,\n//     color: '#7D7D7D',\n//     flexWrap: 'wrap', // Allows text to wrap within the container\n//   },\n//   buyButton: {\n//     backgroundColor: '#FFFFFF',\n//     borderWidth: 2,\n//     borderColor: '#000000',\n//     borderRadius: 25,\n//     paddingVertical: 15,\n//     alignItems: 'center',\n//     marginTop: 20, // Added margin to ensure it's visible\n//   },\n//   buyButtonText: {\n//     color: '#000000',\n//     fontSize: 18,\n//     fontWeight: 'bold',\n//   },\n// });\n","\n\n// good\n// import React, { useState } from 'react';\n// import { View, Text, Image, StyleSheet, TouchableOpacity, Dimensions, ScrollView } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { COLORS } from '@/utils/theme'; // Assuming you have a COLORS file\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { useCart } from '@/contexts/CartContext';\n\n// const { width } = Dimensions.get('window');\n\n// const ProductDetailsPageVFour: React.FC = () => {\n//   const [selectedSize, setSelectedSize] = useState<number | null>(null);\n//   const [isFavorite, setIsFavorite] = useState(false); // Control heart button toggle\n//   const { selectedProduct } = useClientProduct();\n//   const { authState, updateSingleUserItem } = useAuth();\n//   const { addToCart } = useCart();\n\n//   const sizes = [6, 6.5, 7, 7.5, 8]; // Example sizes\n\n//   const handlePress = () => {\n//     if (selectedProduct) {\n//       const partialProduct: Partial<ProductModelProps> = {\n//         id: selectedProduct.id,\n//         name: selectedProduct.name,\n//         price: selectedProduct.price,\n//         images: selectedProduct.images,\n//         quantity: 1,\n//         color: 'default',\n//         size: String(selectedSize) ?? 'default',\n//       };\n//       addToCart(partialProduct);\n//     }\n//   };\n\n//   // Toggle the heart (favorite) icon\n//   const toggleFavorite = () => {\n//     setIsFavorite(!isFavorite);\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       {/* Product Image Carousel */}\n//       <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} style={styles.imageCarousel}>\n//         {selectedProduct?.images.map((imageUri, index) => (\n//           <Image key={index} source={{ uri: imageUri }} style={styles.productImage} />\n//         ))}\n//       </ScrollView>\n\n//       {/* Heart Icon on the Right */}\n//       <View style={styles.header}>\n//         <TouchableOpacity onPress={toggleFavorite}>\n//           <Ionicons\n//             name={isFavorite ? 'heart' : 'heart-outline'}\n//             size={24}\n//             color={isFavorite ? 'black' : 'white'} // Toggle color on press\n//           />\n//         </TouchableOpacity>\n//       </View>\n\n//       {/* Modal for Bottom Section */}\n//       <View style={styles.modalContent}>\n//         {/* Product Info */}\n//         <View style={styles.productInfo}>\n//           <Text style={styles.productName}>Nike Air Max 720</Text>\n//           <Text style={styles.productColor}>Color: Black Anthracite</Text>\n//         </View>\n\n//         {/* Price and Description */}\n//         <View style={styles.priceDescription}>\n//           <Text style={styles.price}>$180</Text>\n//           <Text style={styles.description}>\n//             The Nike Air Max 720 goes bigger than ever before with Nike's tallest Air unit yet, offering more air underfoot for unimaginable, all-day comfort.\n//           </Text>\n//         </View>\n\n//         {/* Size Selector */}\n//         <Text style={styles.sizeLabel}>PICK YOUR SIZE</Text>\n//         <View style={styles.sizeSelector}>\n//           {sizes.map((size, index) => (\n//             <TouchableOpacity\n//               key={index}\n//               style={[styles.sizeOption, selectedSize === size && styles.selectedSizeOption]}\n//               onPress={() => setSelectedSize(size)}\n//             >\n//               <Text style={[styles.sizeText, selectedSize === size && styles.selectedSizeText]}>{size}</Text>\n//             </TouchableOpacity>\n//           ))}\n//         </View>\n\n\n\n\n\n\n\n// // ProductDetails.tsx\n// import React, { useState } from 'react';\n// import { View, Text, Image, StyleSheet, ScrollView, Dimensions, TouchableOpacity } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { COLORS } from '@/utils/theme';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { useCart } from '@/contexts/CartContext';\n// import AFMBottomSheet from '@/components/bottom-sheet/AFMBottomSheet'; // Import custom bottom sheet\n// import { useAuth } from '@/contexts/AuthContext';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n\n// const { width } = Dimensions.get('window');\n\n// const ProductDetails: React.FC = () => {\n//   const [selectedSize, setSelectedSize] = useState<number | null>(null);\n//   const { selectedProduct } = useClientProduct();\n//   const { addToCart } = useCart();\n//   const { authState, updateSingleUserItem } = useAuth(); // Access authState and updateSingleUserItem\n\n//   const sizes = [6, 6.5, 7, 7.5, 8]; // Example sizes\n\n// //   const handleAddToCart = () => {\n// //     if (selectedProduct) {\n// //       addToCart({\n// //         id: selectedProduct.id,\n// //         name: selectedProduct.name,\n// //         price: selectedProduct.price,\n// //         images: selectedProduct.images,\n// //         quantity: 1,\n// //         size: String(selectedSize) ?? 'default',\n// //       });\n// //     }\n// //   };\n\n//     const handleAddToCart = () => {\n//     if (selectedProduct) {\n//       const partialProduct: Partial<ProductModelProps> = {\n//         id: selectedProduct.id,\n//         name: selectedProduct.name,\n//         price: selectedProduct.price,\n//         images: selectedProduct.images,\n//         quantity: 1,\n//         color: 'default',\n//         size: String(selectedSize) ?? 'default',\n//       };\n//       addToCart(partialProduct);\n//     }\n//   };\n\n\n//   return (\n//     <View style={styles.container}>\n//       <ScrollView contentContainerStyle={styles.productContainer}>\n//         {/* Product Image Carousel */}\n//         <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} style={styles.imageCarousel}>\n//           {selectedProduct?.images.map((image, index) => (\n//             <Image key={index} source={{ uri: image }} style={styles.productImage} />\n//           ))}\n//         </ScrollView>\n\n//         {/* Product Info */}\n//         <View style={styles.productInfo}>\n//           <Text style={styles.productName}>{selectedProduct?.name}</Text>\n//           <Text style={styles.productColor}>Color: Black Anthracite</Text>\n//         </View>\n//       </ScrollView>\n\n//       {/* Custom Bottom Sheet */}\n//       <AFMBottomSheet>\n//         <View style={styles.sheetContent}>\n//           {/* Price and Description */}\n//           <Text style={styles.price}>${selectedProduct?.price}</Text>\n//           <Text style={styles.description}>\n//             {selectedProduct?.description}\n//           </Text>\n\n//           {/* Size Selector */}\n//           <Text style={styles.sizeLabel}>PICK YOUR SIZE</Text>\n//           <View style={styles.sizeSelector}>\n//             {sizes.map((size) => (\n//               <TouchableOpacity\n//                 key={size}\n//                 style={[styles.sizeOption, selectedSize === size && styles.selectedSizeOption]}\n//                 onPress={() => setSelectedSize(size)}\n//               >\n//                 <Text style={[styles.sizeText, selectedSize === size && styles.selectedSizeText]}>{size}</Text>\n//               </TouchableOpacity>\n//             ))}\n//           </View>\n\n//           {/* Add to Cart Button */}\n//           <TouchableOpacity style={styles.addToCartButton} onPress={handleAddToCart}>\n//             <Text style={styles.addToCartButtonText}>Add to Cart</Text>\n//             <Ionicons name=\"cart-outline\" size={24} color=\"white\" />\n//           </TouchableOpacity>\n//         </View>\n//       </AFMBottomSheet>\n//     </View>\n//   );\n// };\n\n// export default ProductDetails;\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#fff',\n//   },\n//   productContainer: {\n//     paddingBottom: 100, // Space for the bottom sheet\n//   },\n//   imageCarousel: {\n//     height: width,\n//   },\n//   productImage: {\n//     width: width,\n//     height: width,\n//     resizeMode: 'cover',\n//   },\n//   productInfo: {\n//     padding: 16,\n//   },\n//   productName: {\n//     fontSize: 24,\n//     fontWeight: 'bold',\n//   },\n//   productColor: {\n//     fontSize: 16,\n//     color: '#666',\n//     marginTop: 8,\n//   },\n//   sheetContent: {\n//     padding: 16,\n//   },\n//   price: {\n//     fontSize: 28,\n//     fontWeight: 'bold',\n//   },\n//   description: {\n//     fontSize: 14,\n//     color: '#555',\n//     marginTop: 8,\n//   },\n//   sizeLabel: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     marginTop: 16,\n//   },\n//   sizeSelector: {\n//     flexDirection: 'row',\n//     justifyContent: 'space-between',\n//     marginTop: 8,\n//   },\n//   sizeOption: {\n//     borderRadius: 50,\n//     borderWidth: 1,\n//     borderColor: '#ddd',\n//     padding: 12,\n//     width: 50,\n//     height: 50,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   selectedSizeOption: {\n//     backgroundColor: '#000',\n//     borderColor: '#000',\n//   },\n//   sizeText: {\n//     fontSize: 16,\n//   },\n//   selectedSizeText: {\n//     color: '#fff',\n//   },\n//   addToCartButton: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     backgroundColor: '#000',\n//     paddingVertical: 16,\n//     marginTop: 24,\n//     borderRadius: 50,\n//   },\n//   addToCartButtonText: {\n//     fontSize: 18,\n//     fontWeight: 'bold',\n//     color: '#fff',\n//     marginRight: 10,\n//   },\n// });\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState } from 'react';\nimport { View, Text, Image, StyleSheet, TouchableOpacity, Dimensions, ScrollView } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { COLORS } from '@/utils/theme'; \nimport { useClientProduct } from '@/contexts/ClientProductContext';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { MotiView } from 'moti';\nimport { useFavorite } from '@/contexts/FavoriteContext';\n\nconst { width } = Dimensions.get('window');\n\nconst ProductDetails: React.FC = () => {\n  const [selectedSize, setSelectedSize] = useState<number | null>(null);\n  const [isFavorite, setIsFavorite] = useState(false); \n  const { selectedProduct } = useClientProduct();\n  const { authState, updateSingleUserItem } = useAuth();\n  const { addToCart } = useCart();\n  const { addToFavorite } = useFavorite();\n\n  const sizes = [6, 6.5, 7, 7.5, 8]; \n\n  const handlePress = () => {\n    console.log(\"Fav selected 4\")\n\n    if (selectedProduct) {\n      // const partialProduct: Partial<ProductModelProps> = {\n      //   id: selectedProduct.id,\n      //   name: selectedProduct.name,\n      //   price: selectedProduct.price,\n      //   images: selectedProduct.images,\n      //   quantity: 1,\n      //   color: 'default',\n      //   size: String(selectedSize) ?? 'default',\n      // };\n      addToCart(selectedProduct);\n    }\n  };\n\n  const toggleFavorite = () => {\n    setIsFavorite(!isFavorite);\n  \n    console.log(\"Fav selected 4 Item favorted 4 - check favorites\")\n    // Get the current favorite items and append the selected product's ID\n    const currentFavorites = authState?.user?.favoriteItems || [];\n    \n    if (selectedProduct) { \n    // Check if the product is already a favorite\n    // const updatedFavorites = currentFavorites.includes(selectedProduct?.id)\n    //   ? currentFavorites.filter(itemId => itemId !== selectedProduct?.id) // Remove if already in favorites\n    //   : [...currentFavorites, selectedProduct?.id]; // Add to favorites if not in the list\n  \n    // Update the favoriteItems with the new list (api)\n    // updateSingleUserItem(\"favoriteItems\", updatedFavorites);\n\n    addToFavorite(selectedProduct);\n    \n    }\n  };\n  \n\n  \n  return (\n    <View style={styles.container}>\n      {/* Product Image Carousel */}\n      <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} style={styles.imageCarousel}>\n        {selectedProduct?.images.map((imageUri, index) => (\n          <Image key={index} source={{ uri: imageUri }} style={styles.productImage} />\n        ))}\n      </ScrollView>\n\n      {/* Heart Icon on the Right */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={toggleFavorite}>\n          <Ionicons\n            name={isFavorite ? 'heart' : 'heart-outline'}\n            size={24}\n            color={isFavorite ? 'black' : 'white'} \n          />\n        </TouchableOpacity>\n      </View>\n\n      {/* Bottom Modal Section with Animation */}\n      <MotiView\n        from={{ translateY: 300 }} \n        animate={{ translateY: 0 }} \n        transition={{ type: 'timing', duration: 600 }} \n        style={styles.modalContent}\n      >\n        {/* Product Info */}\n        <View style={styles.productInfo}>\n          <Text style={styles.productName}>Nike Air Max 720</Text>\n          <Text style={styles.productColor}>Color: Black Anthracite</Text>\n        </View>\n\n        {/* Price and Description */}\n        <View style={styles.priceDescription}>\n          <Text style={styles.price}>$180</Text>\n          <Text style={styles.description}>\n            The Nike Air Max 720 goes bigger than ever before with Nike's tallest Air unit yet, offering more air underfoot for unimaginable, all-day comfort.\n          </Text>\n        </View>\n\n        {/* Size Selector */}\n        <Text style={styles.sizeLabel}>PICK YOUR SIZE</Text>\n        <View style={styles.sizeSelector}>\n          {sizes.map((size, index) => (\n            <TouchableOpacity\n              key={index}\n              style={[styles.sizeOption, selectedSize === size && styles.selectedSizeOption]}\n              onPress={() => setSelectedSize(size)}\n            >\n              <Text style={[styles.sizeText, selectedSize === size && styles.selectedSizeText]}>{size}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        {/* Add to Cart Button */}\n        <TouchableOpacity style={styles.addToCartButton} onPress={handlePress}>\n          <Text style={styles.addToCartButtonText}>Add to Cart</Text>\n          <Ionicons name=\"cart-outline\" size={24} color=\"white\" />\n        </TouchableOpacity>\n      </MotiView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000', \n  },\n  header: {\n    position: 'absolute',\n    top: 40,\n    right: 20,\n    zIndex: 1,\n  },\n  imageCarousel: {\n    height: width, \n  },\n  productImage: {\n    width: width,\n    height: width,\n    resizeMode: 'cover', \n  },\n  modalContent: {\n    backgroundColor: 'black',\n    borderTopLeftRadius: 30,\n    borderTopRightRadius: 30,\n    paddingTop: 20,\n    paddingBottom: 40,\n    paddingHorizontal: 16,\n    marginTop: -20, \n  },\n  productInfo: {\n    paddingBottom: 16,\n  },\n  productName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n  productColor: {\n    fontSize: 14,\n    color: '#999',\n    marginTop: 4,\n  },\n  priceDescription: {\n    paddingBottom: 16,\n  },\n  price: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n  description: {\n    fontSize: 14,\n    color: '#aaa',\n    marginTop: 8,\n  },\n  sizeLabel: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'white',\n    marginBottom: 8,\n  },\n  sizeSelector: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginBottom: 24,\n  },\n  sizeOption: {\n    borderRadius: 50,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    padding: 12,\n    width: 50,\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  selectedSizeOption: {\n    backgroundColor: 'white',\n    borderColor: 'white',\n  },\n  sizeText: {\n    fontSize: 16,\n    color: 'white',\n  },\n  selectedSizeText: {\n    color: 'black',\n  },\n  addToCartButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    paddingVertical: 16,\n    borderRadius: 50,\n  },\n  addToCartButtonText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'black',\n    marginRight: 10,\n  },\n});\n\nexport default ProductDetails;\n\n\n\n\n\n// good\n// import React, { useState } from 'react';\n// import { View, Text, Image, StyleSheet, TouchableOpacity, Dimensions, ScrollView } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { COLORS } from '@/utils/theme'; // Assuming you have a COLORS file\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { useCart } from '@/contexts/CartContext';\n\n// const { width } = Dimensions.get('window');\n\n// const ProductDetailsPageVFour: React.FC = () => {\n//   const [selectedSize, setSelectedSize] = useState<number | null>(null);\n//   const [isFavorite, setIsFavorite] = useState(false); // Control heart button toggle\n//   const { selectedProduct } = useClientProduct();\n//   const { authState, updateSingleUserItem } = useAuth();\n//   const { addToCart } = useCart();\n\n//   const sizes = [6, 6.5, 7, 7.5, 8]; // Example sizes\n\n//   const handlePress = () => {\n//     if (selectedProduct) {\n//       const partialProduct: Partial<ProductModelProps> = {\n//         id: selectedProduct.id,\n//         name: selectedProduct.name,\n//         price: selectedProduct.price,\n//         images: selectedProduct.images,\n//         quantity: 1,\n//         color: 'default',\n//         size: String(selectedSize) ?? 'default',\n//       };\n//       addToCart(partialProduct);\n//     }\n//   };\n\n//   // Toggle the heart (favorite) icon\n//   const toggleFavorite = () => {\n//     setIsFavorite(!isFavorite);\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       {/* Product Image Carousel */}\n//       <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} style={styles.imageCarousel}>\n//         {selectedProduct?.images.map((imageUri, index) => (\n//           <Image key={index} source={{ uri: imageUri }} style={styles.productImage} />\n//         ))}\n//       </ScrollView>\n\n//       {/* Heart Icon on the Right */}\n//       <View style={styles.header}>\n//         <TouchableOpacity onPress={toggleFavorite}>\n//           <Ionicons\n//             name={isFavorite ? 'heart' : 'heart-outline'}\n//             size={24}\n//             color={isFavorite ? 'black' : 'white'} // Toggle color on press\n//           />\n//         </TouchableOpacity>\n//       </View>\n\n//       {/* Modal for Bottom Section */}\n//       <View style={styles.modalContent}>\n//         {/* Product Info */}\n//         <View style={styles.productInfo}>\n//           <Text style={styles.productName}>Nike Air Max 720</Text>\n//           <Text style={styles.productColor}>Color: Black Anthracite</Text>\n//         </View>\n\n//         {/* Price and Description */}\n//         <View style={styles.priceDescription}>\n//           <Text style={styles.price}>$180</Text>\n//           <Text style={styles.description}>\n//             The Nike Air Max 720 goes bigger than ever before with Nike's tallest Air unit yet, offering more air underfoot for unimaginable, all-day comfort.\n//           </Text>\n//         </View>\n\n//         {/* Size Selector */}\n//         <Text style={styles.sizeLabel}>PICK YOUR SIZE</Text>\n//         <View style={styles.sizeSelector}>\n//           {sizes.map((size, index) => (\n//             <TouchableOpacity\n//               key={index}\n//               style={[styles.sizeOption, selectedSize === size && styles.selectedSizeOption]}\n//               onPress={() => setSelectedSize(size)}\n//             >\n//               <Text style={[styles.sizeText, selectedSize === size && styles.selectedSizeText]}>{size}</Text>\n//             </TouchableOpacity>\n//           ))}\n//         </View>\n\n//         {/* Add to Cart Button */}\n//         <TouchableOpacity style={styles.addToCartButton} onPress={handlePress}>\n//           <Text style={styles.addToCartButtonText}>Add to Cart</Text>\n//           <Ionicons name=\"cart-outline\" size={24} color=\"white\" />\n//         </TouchableOpacity>\n//       </View>\n//     </View>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#000', // Background black to avoid white gaps\n//   },\n//   header: {\n//     position: 'absolute',\n//     top: 40,\n//     right: 20,\n//     zIndex: 1,\n//   },\n//   imageCarousel: {\n//     height: width, // Match width to make it square\n//   },\n//   productImage: {\n//     width: width,\n//     height: width,\n//     resizeMode: 'cover', // Cover the entire area\n//   },\n//   modalContent: {\n//     backgroundColor: 'black',\n//     borderTopLeftRadius: 30,\n//     borderTopRightRadius: 30,\n//     paddingTop: 20,\n//     paddingBottom: 40,\n//     paddingHorizontal: 16,\n//     marginTop: -20, // Ensure no gap between image and modal\n//   },\n//   productInfo: {\n//     paddingBottom: 16,\n//   },\n//   productName: {\n//     fontSize: 24,\n//     fontWeight: 'bold',\n//     color: 'white',\n//   },\n//   productColor: {\n//     fontSize: 14,\n//     color: '#999',\n//     marginTop: 4,\n//   },\n//   priceDescription: {\n//     paddingBottom: 16,\n//   },\n//   price: {\n//     fontSize: 28,\n//     fontWeight: 'bold',\n//     color: 'white',\n//   },\n//   description: {\n//     fontSize: 14,\n//     color: '#aaa',\n//     marginTop: 8,\n//   },\n//   sizeLabel: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: 'white',\n//     marginBottom: 8,\n//   },\n//   sizeSelector: {\n//     flexDirection: 'row',\n//     justifyContent: 'space-around',\n//     marginBottom: 24,\n//   },\n//   sizeOption: {\n//     borderRadius: 50,\n//     borderWidth: 1,\n//     borderColor: '#ddd',\n//     padding: 12,\n//     width: 50,\n//     height: 50,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   selectedSizeOption: {\n//     backgroundColor: 'white',\n//     borderColor: 'white',\n//   },\n//   sizeText: {\n//     fontSize: 16,\n//     color: 'white',\n//   },\n//   selectedSizeText: {\n//     color: 'black',\n//   },\n//   addToCartButton: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     backgroundColor: 'white',\n//     paddingVertical: 16,\n//     borderRadius: 50,\n//   },\n//   addToCartButtonText: {\n//     fontSize: 18,\n//     fontWeight: 'bold',\n//     color: 'black',\n//     marginRight: 10,\n//   },\n// });\n\n// export default ProductDetailsPageVFour;\n\n\n\n\n\n\n\n// cool siding animation\n// import React, { useState } from 'react';\n// import { View, Text, Image, StyleSheet, TouchableOpacity, Dimensions, ScrollView, Modal } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { COLORS } from '@/utils/theme';\n// import { AWS_HOLDER_IMAGE } from '@/utils/api';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { useCart } from '@/contexts/CartContext';\n\n// const { width } = Dimensions.get('window');\n\n// const ProductDetails: React.FC = () => {\n//   const [selectedSize, setSelectedSize] = useState<number | null>(null);\n//   const { selectedProduct } = useClientProduct();\n//   const { authState, updateSingleUserItem } = useAuth();\n//   const { addToCart } = useCart();\n//   const [isModalVisible, setIsModalVisible] = useState(true); // Control the modal\n\n//   const sizes = [6, 6.5, 7, 7.5, 8];\n\n//   const handlePress = () => {\n//     if (selectedProduct) {\n//       const partialProduct: Partial<ProductModelProps> = {\n//         id: selectedProduct.id,\n//         name: selectedProduct.name,\n//         price: selectedProduct.price,\n//         images: selectedProduct.images,\n//         quantity: 1,\n//         color: 'default',\n//         size: String(selectedSize) ?? 'default',\n//       };\n//       addToCart(partialProduct);\n//     }\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       {/* Product Image Carousel */}\n//       <ScrollView horizontal pagingEnabled showsHorizontalScrollIndicator={false} style={styles.imageCarousel}>\n//         <Image source={{ uri: AWS_HOLDER_IMAGE }} style={styles.productImage} />\n//       </ScrollView>\n\n//       {/* Heart Icon on the Right */}\n//       <View style={styles.header}>\n//         <TouchableOpacity>\n//           <Ionicons name=\"heart-outline\" size={24} color=\"black\" />\n//         </TouchableOpacity>\n//       </View>\n\n//       {/* Modal for Bottom Section */}\n//       <Modal\n//         animationType=\"slide\"\n//         transparent={true}\n//         visible={isModalVisible}\n//         onRequestClose={() => setIsModalVisible(false)}\n//       >\n//         <View style={styles.modalContainer}>\n//           <View style={styles.modalContent}>\n//             {/* Product Info */}\n//             <View style={styles.productInfo}>\n//               <Text style={styles.productName}>Nike Air Max 720</Text>\n//               <Text style={styles.productColor}>Color: Black Anthracite</Text>\n//             </View>\n\n//             {/* Price and Description */}\n//             <View style={styles.priceDescription}>\n//               <Text style={styles.price}>$180</Text>\n//               <Text style={styles.description}>\n//                 The Nike Air Max 720 goes bigger than ever before with Nike's tallest Air unit yet, offering more air underfoot for unimaginable, all-day comfort.\n//               </Text>\n//             </View>\n\n//             {/* Size Selector */}\n//             <Text style={styles.sizeLabel}>PICK YOUR SIZE</Text>\n//             <View style={styles.sizeSelector}>\n//               {sizes.map((size, index) => (\n//                 <TouchableOpacity\n//                   key={index}\n//                   style={[styles.sizeOption, selectedSize === size && styles.selectedSizeOption]}\n//                   onPress={() => setSelectedSize(size)}\n//                 >\n//                   <Text style={[styles.sizeText, selectedSize === size && styles.selectedSizeText]}>{size}</Text>\n//                 </TouchableOpacity>\n//               ))}\n//             </View>\n\n//             {/* Add to Cart Button */}\n//             <TouchableOpacity style={styles.addToCartButton} onPress={handlePress}>\n//               <Text style={styles.addToCartButtonText}>Add to Cart</Text>\n//               <Ionicons name=\"cart-outline\" size={24} color=\"white\" />\n//             </TouchableOpacity>\n//           </View>\n//         </View>\n//       </Modal>\n//     </View>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#F5F5F5',\n//   },\n//   header: {\n//     position: 'absolute',\n//     top: 40,\n//     right: 20,\n//     zIndex: 1,\n//   },\n//   imageCarousel: {\n//     height: width,\n//   },\n//   productImage: {\n//     width: width,\n//     height: width,\n//     resizeMode: 'cover',\n//   },\n//   modalContainer: {\n//     flex: 1,\n//     justifyContent: 'flex-end',\n//   },\n//   modalContent: {\n//     backgroundColor: 'black', // Inverted colors\n//     borderTopLeftRadius: 30,\n//     borderTopRightRadius: 30,\n//     paddingTop: 20,\n//     paddingBottom: 40,\n//     paddingHorizontal: 16,\n//   },\n//   productInfo: {\n//     paddingBottom: 16,\n//   },\n//   productName: {\n//     fontSize: 24,\n//     fontWeight: 'bold',\n//     color: 'white',\n//   },\n//   productColor: {\n//     fontSize: 14,\n//     color: '#999',\n//     marginTop: 4,\n//   },\n//   priceDescription: {\n//     paddingBottom: 16,\n//   },\n//   price: {\n//     fontSize: 28,\n//     fontWeight: 'bold',\n//     color: 'white',\n//   },\n//   description: {\n//     fontSize: 14,\n//     color: '#aaa',\n//     marginTop: 8,\n//   },\n//   sizeLabel: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: 'white',\n//     marginBottom: 8,\n//   },\n//   sizeSelector: {\n//     flexDirection: 'row',\n//     justifyContent: 'space-around',\n//     marginBottom: 24,\n//   },\n//   sizeOption: {\n//     borderRadius: 50,\n//     borderWidth: 1,\n//     borderColor: '#ddd',\n//     padding: 12,\n//     width: 50,\n//     height: 50,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   selectedSizeOption: {\n//     backgroundColor: 'white',\n//     borderColor: 'white',\n//   },\n//   sizeText: {\n//     fontSize: 16,\n//     color: 'white',\n//   },\n//   selectedSizeText: {\n//     color: 'black',\n//   },\n//   addToCartButton: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//     backgroundColor: 'white',\n//     paddingVertical: 16,\n//     borderRadius: 50,\n//   },\n//   addToCartButtonText: {\n//     fontSize: 18,\n//     fontWeight: 'bold',\n//     color: 'black',\n//     marginRight: 10,\n//   },\n// });\n\n// export default ProductDetails;\n\n\n// styling issues \n","import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  Image,\n  Dimensions,\n  Alert,\n} from \"react-native\";\nimport { COLORS } from \"@/utils/theme\";\nimport UserLoginTextFields from \"@/components/views/UserLoginTextFields\";\nimport UserRegisterTextFields from \"@/components/views/UserRegisterTextFields\";\nimport { useClientStore } from \"@/contexts/ClientStoreContext\";\n\nconst { width } = Dimensions.get(\"window\");\n\nconst RegisterComponentTwo = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmedpassword, setConfirmedPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const [activeTabIsLogin, setActiveTabIsLogin] = useState(false);\n  // const { data: store } = useFetchObject<StoreModelProps>(() =>\n  //   getStore(CONSTANTS.store_id)\n  // );\n\n  const { store } = useClientStore()\n\n\n  return (\n    <View style={styles.container}>\n      <Image\n        source={{\n          uri: \"https://appsformankind-assets.s3.amazonaws.com/Store/Apps_For_Mankind/logo.png\",\n        }}\n        style={styles.logo}\n      />\n      <Text style={styles.welcomeText}>\n        Welcome to {store?.store_name ?? \"\"}\n      </Text>\n      <Text style={styles.descriptionText}>\n        Sign up or login below to manage your project, task, and productivity\n      </Text>\n\n      <View style={styles.tabContainer}>\n        <TouchableOpacity\n          style={[styles.tab, activeTabIsLogin && styles.activeTab]}\n          onPress={() => setActiveTabIsLogin(true)}\n        >\n          <Text\n            style={[styles.tabText, activeTabIsLogin && styles.activeTabText]}\n          >\n            Login\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[styles.tab, !activeTabIsLogin && styles.activeTab]}\n          onPress={() => setActiveTabIsLogin(false)}\n        >\n          <Text\n            style={[styles.tabText, !activeTabIsLogin && styles.activeTabText]}\n          >\n            Sign Up\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {activeTabIsLogin ? (\n       <UserLoginTextFields />\n      ) : (\n       <UserRegisterTextFields />\n      )}\n    </View>\n  );\n};\n\nexport default RegisterComponentTwo;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 20,\n    paddingTop: 20,\n    backgroundColor: COLORS.white,\n    alignItems: \"center\",\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    marginTop: 50,\n    borderRadius: 13,\n  },\n  appName: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    color: COLORS.primary,\n    marginTop: 10,\n  },\n  welcomeText: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: COLORS.darkGray,\n    marginTop: 20,\n  },\n  descriptionText: {\n    fontSize: 14,\n    color: COLORS.darkGray,\n    textAlign: \"center\",\n    marginVertical: 10,\n  },\n  tabContainer: {\n    flexDirection: \"row\",\n    marginVertical: 20,\n  },\n  tab: {\n    flex: 1,\n    paddingBottom: 5,\n    alignItems: \"center\",\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: COLORS.primary,\n  },\n  tabText: {\n    fontSize: 16,\n    color: COLORS.darkGray,\n  },\n  activeTabText: {\n    color: COLORS.primary,\n  },\n  inputContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: COLORS.lightGray,\n    padding: 15,\n    borderRadius: 5,\n    marginVertical: 10,\n    width: width - 40,\n  },\n  input: {\n    flex: 1,\n    marginLeft: 10,\n    color: COLORS.darkGray,\n  },\n  forgotPasswordText: {\n    alignSelf: \"flex-end\",\n    color: COLORS.primary,\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  loginButton: {\n    backgroundColor: COLORS.primary,\n    padding: 15,\n    borderRadius: 5,\n    width: width - 40,\n    alignItems: \"center\",\n  },\n  signupButton: {\n    backgroundColor: COLORS.primary,\n    padding: 15,\n    borderRadius: 5,\n    width: width - 40,\n    alignItems: \"center\",\n    marginTop: 20,\n  },\n  loginButtonText: {\n    fontSize: 18,\n    color: COLORS.white,\n    fontWeight: \"bold\",\n  },\n  termsText: {\n    fontSize: 12,\n    color: COLORS.darkGray,\n    textAlign: \"left\",\n    marginLeft: 10,\n    marginRight: 20,\n  },\n  checkboxContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginVertical: 10,\n  },\n  passwordCriteria: {\n    color: COLORS.darkGray,\n    fontSize: 14,\n    marginTop: 5,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n","import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';\nimport { Ionicons, MaterialIcons, FontAwesome5 } from '@expo/vector-icons';\nimport { Link, router } from 'expo-router';\nimport BannerVOne from '@/components/banner/BannerVOne';\nimport { useAuth } from '@/contexts/AuthContext';\nimport MyButton from '@/components/buttons/MyButton';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nconst SettingsPage = () => {\n  const { colors } = useTheme(); // Directly access colors from the theme\n   const { authState , onLogout } = useAuth()\n\n  const handleLogOut = async () => {\n    if (onLogout) {\n      try {\n        await onLogout();\n        router.replace('/welcome' as never); // Navigate to the welcome screen after logout\n      } catch (error) {\n        console.error('Logout failed:', error);\n      }\n    } else {\n      console.error('Logout function is not defined');\n    }\n  };\n\n\n  const styles = createStyles(colors); // Create styles using dynamic colors from the theme\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.upperSection}></View>\n      <ScrollView contentContainerStyle={styles.content}>\n        <Text style={styles.title}>Settings</Text>\n\n        <BannerVOne />\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>General</Text>\n          \n          <Link href={'/profile' as never} asChild>\n            <TouchableOpacity style={styles.option}>\n              <FontAwesome5 name=\"user\" size={20} color={colors.title} />\n              <Text style={styles.optionText}>Profile information</Text>\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.title} />\n            </TouchableOpacity>\n          </Link>\n\n          <Link href={'/appearance' as never} asChild>\n            <TouchableOpacity style={styles.option}>\n              <Ionicons name=\"color-palette-outline\" size={20} color={colors.title} />\n              <Text style={styles.optionText}>Appearance</Text>\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.title} />\n            </TouchableOpacity>\n          </Link>\n\n          <Link href={'/favorites' as never} asChild>\n            <TouchableOpacity style={styles.option}>\n              <Ionicons name=\"heart-outline\" size={20} color={colors.title} />\n              <Text style={styles.optionText}>Favorites</Text>\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.title} />\n            </TouchableOpacity>\n          </Link>\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Application</Text>\n          \n          <Link href={'/privacy-policy' as never} asChild>\n            <TouchableOpacity style={styles.option}>\n              <Ionicons name=\"alert-circle-outline\" size={20} color={colors.title} />\n              <Text style={styles.optionText}>Privacy Policy</Text>\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.title} />\n            </TouchableOpacity>\n          </Link>\n\n          <Link href={'/terms-of-use' as never} asChild>\n            <TouchableOpacity style={styles.option}>\n              <Ionicons name=\"help-circle-outline\" size={20} color={colors.title} />\n              <Text style={styles.optionText}>Terms of Use</Text>\n              <Ionicons name=\"chevron-forward\" size={20} color={colors.title} />\n            </TouchableOpacity>\n          </Link>\n        </View>\n\n        <MyButton\n          title=\"Log out\"\n          onPress={handleLogOut}\n          buttonStyle={styles.logoutButton}\n          textStyle={styles.logoutText}\n        />\n      </ScrollView>\n    </View>\n  );\n};\n\nconst createStyles = (colors: any) => {\n  return StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: colors.background, // Dynamic background color\n    },\n    upperSection: {},\n    title: {\n      fontSize: 32,\n      fontWeight: 'bold',\n      color: colors.title, // Dynamic text color\n      textAlign: 'left',\n      marginVertical: 20,\n      marginLeft: 16,\n      paddingBottom: 20,\n    },\n    content: {\n      paddingHorizontal: 20,\n      paddingBottom: 20,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 0.3,\n      shadowRadius: 10,\n      elevation: 4, // for Android shadow\n      marginTop: 12,\n    },\n    section: {\n      marginBottom: 30,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      color: colors.title, // Dynamic text color\n      marginBottom: 10,\n    },\n    option: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingVertical: 15,\n      borderBottomWidth: 1,\n      borderBottomColor: colors.border, // Dynamic border color\n    },\n    optionText: {\n      flex: 1,\n      fontSize: 16,\n      color: colors.title, // Dynamic text color\n      marginLeft: 10,\n    },\n    logoutButton: {\n      backgroundColor: colors.card, // Dynamic card color\n      padding: 15,\n      borderRadius: 10,\n      alignItems: 'center',\n      borderWidth: 1,\n      borderColor: colors.title, // Dynamic border color\n      marginTop: 20,\n    },\n    logoutText: {\n      color: colors.title, // Dynamic text color\n      fontSize: 16,\n    },\n  });\n};\n\nexport default SettingsPage;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';\n// import { Ionicons, MaterialIcons, FontAwesome5 } from '@expo/vector-icons';\n// import { Link} from 'expo-router';\n// import BannerVOne from '@/components/banner/BannerVOne';\n// import { useAuth } from '@/contexts/AuthContext';\n// import MyButton from '@/components/buttons/MyButton';\n// // import CustomButton from '@/components/buttons/WhiteButton';\n// // import MyButton from '@/components/buttons/WhiteButton';\n\n// const SettingsPage = () => {\n//   // const insets = useSafeAreaInsets();\n\n//   // const { authState , onLogout } = useAuth()\n\n//   const handleLogOut = async () => {\n//     // if (onLogout) {\n//     //   try {\n//     //     await onLogout();\n//     //     router.replace('/welcome' as never); // Navigate to the welcome screen after logout\n//     //   } catch (error) {\n//     //     console.error('Logout failed:', error);\n//     //   }\n//     // } else {\n//     //   console.error('Logout function is not defined');\n//     // }\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       {/* <Stack.Screen options={{headerShown: false}} /> */}\n//      <View  style={styles.upperSection}>\n//       {/* <View style={styles.divider}/> */}\n//      {/* <View style={{paddingBottom: 20}}/> */}\n//      </View>\n//      <ScrollView contentContainerStyle={styles.content}>\n//      <Text style={styles.title}>Settings</Text>\n\n//       <BannerVOne />\n     \n//         <View style={styles.section}>\n//           <Text style={styles.sectionTitle}>General</Text>\n          \n//           <Link href={'/profile' as never} asChild>\n//             <TouchableOpacity style={styles.option}>\n//               <FontAwesome5 name=\"user\" size={20} color=\"black\" />\n//               <Text style={styles.optionText}>Profile information</Text>\n//               <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//             </TouchableOpacity>\n//           </Link>\n\n// {/* \n//           <Link href={'settings/profile-information' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <MaterialIcons name=\"payment\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>Payment methods</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n//           </Link> */}\n\n//           <Link href={'/appearance' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <Ionicons name=\"color-palette-outline\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>Appearance</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n//           </Link> \n\n//           <Link href={'/favorites' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <Ionicons name=\"color-palette-outline\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>Favorites</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n//           </Link>\n// {/* \n//           <Link href={'settings/profile-information' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <Ionicons name=\"notifications-outline\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>Notifications</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n//           </Link> */}\n\n//         </View>\n\n//         {/* <View style={styles.section}>\n//           <Text style={styles.sectionTitle}>Support</Text>\n//           <Link href={'/report-an-issue' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <Ionicons name=\"alert-circle-outline\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>Report an issue</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n//           </Link>\n\n//           <Link href={'/faq' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <Ionicons name=\"help-circle-outline\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>term</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n\n//           </Link>\n\n//         </View> */}\n\n\n\n// <View style={styles.section}>\n//           <Text style={styles.sectionTitle}>Application</Text>\n//           <Link href={'/privacy-policy' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <Ionicons name=\"alert-circle-outline\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>Privacy Policy</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n//           </Link>\n\n//           <Link href={'/terms-of-use' as never} asChild>\n//           <TouchableOpacity style={styles.option}>\n//             <Ionicons name=\"help-circle-outline\" size={20} color=\"black\" />\n//             <Text style={styles.optionText}>Terms of use</Text>\n//             <Ionicons name=\"chevron-forward\" size={20} color=\"black\" />\n//           </TouchableOpacity>\n          \n//           </Link>\n\n//         </View>\n//         <MyButton\n//         title=\"Log out\"\n//         onPress={handleLogOut}\n//         buttonStyle={styles.logoutButton}\n//         textStyle={styles.logoutText}\n//       />\n//       </ScrollView>\n//     </View>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#FFFFFF',\n//   },\n//   upperSection: {\n  \n//   },\n//   divider: {\n//     height: 1,\n//     backgroundColor: '#EAEAEA',\n//     // paddingBottom: 20\n//     // marginBottom: 20,\n//   },\n\n//   title: {\n//     fontSize: 32,\n//     fontWeight: 'bold',\n//     color: '#000',\n//     textAlign: 'left',\n//     marginVertical: 20,\n//     marginLeft: 16,\n//     paddingBottom: 20,\n//   },\n//   content: {\n//     paddingHorizontal: 20,\n//     paddingBottom: 20,\n//     shadowColor: '#000',\n//     shadowOffset: { width: 0, height: 4 },\n//     shadowOpacity: 0.3,\n//     shadowRadius: 10,\n//     elevation: 4, // for Android shadow\n//     marginTop: 12,\n\n//   },\n//   section: {\n//     marginBottom: 30,\n//   },\n//   sectionTitle: {\n//     fontSize: 18,\n//     fontWeight: '600',\n//     color: '#000',\n//     marginBottom: 10,\n//   },\n//   option: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     paddingVertical: 15,\n//     borderBottomWidth: 1,\n//     borderBottomColor: '#EAEAEA',\n//   },\n//   optionText: {\n//     flex: 1,\n//     fontSize: 16,\n//     color: '#000',\n//     marginLeft: 10,\n//   },\n//   logoutButton: {\n//     backgroundColor: '#FFFFFF',\n//     padding: 15,\n//     borderRadius: 10,\n//     alignItems: 'center',\n//     borderWidth: 1,\n//     borderColor: '#000',\n//     marginTop: 20,\n//   },\n//   logoutText: {\n//     color: '#000',\n//     fontSize: 16,\n//   },\n// });\n\n// export default SettingsPage;\n","import { Button, Image, StyleSheet, Text, TextInput, View, Alert , Modal} from 'react-native';\nimport React, { useEffect, useState } from 'react';\nimport { router, SplashScreen, Stack, useNavigation, useRouter } from 'expo-router';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { UserProps } from '@/models/UserProps';\nimport { generateUUID } from '@/hooks/generateUUID';\nimport { useClientStore } from '@/contexts/ClientStoreContext';\n\nconst LoginComponentOne = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { onLogin, onRegister, onLogout , authState } = useAuth();\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigation = useNavigation();\n  const [openModal , setOpenModal] = useState(false)\n\n  const {store} = useClientStore()\n\n\n\n  const showAlert = (message: string) => Alert.alert(\"Error\", message, [{ text: \"OK\" }]);\n\n  const loginAction = async () => {\n    try {\n      const result = await onLogin!(store?.id ?? \"\",email, password);\n      if (result.error) {\n        showAlert(result.msg);\n      } else {\n        console.log(\"Login successful\");\n        // Wrap navigation.goBack in a try-catch block\n        try {\n        router.replace('/home' as never)\n\n        } catch (navError) {\n          console.error(\"Navigation error:\", navError);\n        }\n      }\n    } catch (error: any) {\n      console.error(\"(5) Login error:\", error.message);\n      showAlert(\"Login failed. Please try again.\");\n    }\n  };\n\n  const registerAction = async () => {\n    const user: UserProps = {\n      id: generateUUID(8),\n      name,\n      email,\n      password,\n      store_ids: [],\n      store_owner_id: '',\n      onboardingQ1: '',\n      onboardingQ2: '',\n      onboardingQ3: '',\n      onboardingQ4: '',\n      orders: [],\n      favoriteItems: [],\n      cart: [],\n      affiliate_link: '',\n      active: false,\n      role: '',\n      birthday: '',\n      todo_completed: false,\n      tableName: '',\n      username: '',\n      phone_number: '',\n      gender: '',\n      profile_image: '',\n      address_city: '',\n      address_state: '',\n      location_history: [],\n      current_notification: '',\n      notifications: [],\n      payment_due: 0,\n      payment_due_date: '',\n      payment_due_day: '',\n      payment_monthly_amount: 0,\n      device_id: '',\n      device_os_version: '',\n      device_model: '',\n      device_ip_address: '',\n      device_battery_level: '',\n      device_battery_statue: '',\n      device_network_connectio_type: '',\n      loyalty_date: '',\n      payment_history_total: 0,\n      subscription_id: '',\n      paid_subscriber: false,\n      newsletter_subscriber: false,\n      notification_subscriber: false,\n      left_review: false,\n      review_stars: [],\n      reviews: [],\n      testimonials: [],\n      notify_arn: '',\n      owner_notify_arn: ''\n    };\n\n    try {\n      const result = await onRegister!(store?.id ?? \"\", user);\n      if (result.error) {\n        showAlert(result);\n        return;\n      } else {\n        console.log(\"Registration successful\");\n        // Call the loginAction after successful registration\n        loginAction();\n      }\n    } catch (error : any) {\n      console.error(\"(1) Registration error:\", error.message);\n      showAlert(\"Registration failed. Please try again.\");\n    }\n  };\n\n  return (\n    \n    // <Modal visible={openModal} >\n    <View style={styles.container}>\n            <Stack.Screen  options={{ title: 'Login'  }}  />\n\n      {/* <Modal visible={openModal} transparent={true} animationType='fade' > */}\n      <View style={styles.imgContainer}>\n        <Image source={{ uri: 'https://appsformankind-assets.s3.amazonaws.com/Products/Oak_and_Ivy/Furniture_8.jpg' }} style={styles.img} />\n      </View>\n      <View style={styles.form}>\n        <TextInput style={styles.input} placeholder=\"Name\" onChangeText={setName} value={name} />\n        <TextInput style={styles.input} placeholder=\"Email\" onChangeText={setEmail} value={email} />\n        <TextInput style={styles.input} placeholder=\"Password\" secureTextEntry onChangeText={setPassword} value={password} />\n        <Button onPress={loginAction} title=\"Sign in\" />\n        <Button onPress={registerAction} title=\"Create Account\" />\n        <Button onPress={onLogout} title=\"Logout\" />\n        {/* <Text>{authState?.authenticated ? \"TRUE\": \"FALSE\"}</Text> */}\n\n      </View>\n      {/* </Modal> */}\n    </View>\n   \n    \n  );\n};\n\nexport default LoginComponentOne;\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    width: '100%',\n  },\n  imgContainer: {\n    marginLeft: 8,\n    height: 200,\n    width: 200,\n    borderRadius: 6,\n    paddingTop: 30,\n  },\n  img: {\n    height: 200,\n    width: 200,\n    borderRadius: 100,\n  },\n  form: {\n    paddingTop: 50,\n    gap: 10,\n    width: '60%',\n  },\n  input: {\n    height: 44,\n    borderWidth: 1,\n    borderRadius: 4,\n    padding: 10,\n    backgroundColor: \"#fff\",\n  },\n});\n\n\n\n\n\n","import React, { useEffect, useState } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ImageBackground,\n  TouchableOpacity,\n  StatusBar,\n  Modal,\n  Dimensions,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport LoginComponentOne from \"../login/LoginComponentOne\";\nimport { CONSTANTS } from \"@/utils/constants\";\nimport {\n  ClientStoreProvider,\n  useClientStore,\n} from \"@/contexts/ClientStoreContext\";\nimport { router } from \"expo-router\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nconst { width, height } = Dimensions.get(\"screen\");\n\n// export default function WelcomePageTwo() {\nconst WelcomePageTwo = () => {\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [modalVisible, setModalVisible] = useState(false);\n  const { store } = useClientStore();\n  const { authState } = useAuth();\n\n  // const welcomeImage = store?.images?.welcome_image ?? \"\";\n\n  return (\n    <View style={styles.container}>\n      <StatusBar\n        barStyle=\"dark-content\"\n        translucent\n        backgroundColor=\"transparent\"\n      />\n\n      <ImageBackground\n        source={{\n          uri: \"https://appsformankind-assets.s3.amazonaws.com/Store/Jays_Sea_Moss/waterfall.jpg\",\n        }}\n        style={styles.backgroundImage}\n        resizeMode=\"cover\"\n      >\n        <View style={styles.overlay}>\n          <View style={styles.header}>\n            <Text style={styles.logoText}>{store?.store_name}</Text>\n            <Text style={styles.tagline}>\n              Nature's Superfood, Your Ultimate Wellness Companion.\n            </Text>\n          </View>\n\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity\n              style={styles.buttonPrimary}\n              onPress={() => {\n                console.log(authState?.authenticated);\n                router.push(\"/login\" as never);\n              }}\n            >\n              <Ionicons name=\"log-in-outline\" size={20} color=\"black\" />\n              <Text style={styles.buttonPrimaryText}>Proceed to Login</Text>\n              <Ionicons name=\"arrow-forward\" size={20} color=\"black\" />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.buttonSecondary}\n              onPress={() => router.push(\"/register\" as never)}\n            >\n              <Ionicons name=\"person-add-outline\" size={20} color=\"white\" />\n              <Text style={styles.buttonSecondaryText}>New User? Sign Up</Text>\n              <Ionicons name=\"arrow-forward\" size={20} color=\"white\" />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </ImageBackground>\n\n      {/* Modal for Login */}\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => setModalVisible(false)}\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalContent}>\n            <TouchableOpacity\n              style={styles.closeButton}\n              onPress={() => setModalVisible(false)}\n            >\n              <Ionicons name=\"close-outline\" size={24} color=\"black\" />\n            </TouchableOpacity>\n            <LoginComponentOne />\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nexport default WelcomePageTwo\n\n\n\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#F5F5F5\",\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#F5F5F5\",\n  },\n  backgroundImage: {\n    flex: 1,\n    width: \"100%\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  overlay: {\n    flex: 1,\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0, 0, 0, 0.3)\", // Dark overlay for text visibility\n    paddingTop: 60,\n    paddingBottom: 40,\n    width: width,\n  },\n  header: {\n    alignItems: \"center\",\n  },\n  logoText: {\n    fontSize: 40,\n    fontWeight: \"bold\",\n    color: \"white\",\n  },\n  tagline: {\n    fontSize: 16,\n    color: \"white\",\n    textAlign: \"center\",\n    paddingHorizontal: 20,\n    marginTop: 10,\n  },\n  buttonContainer: {\n    width: \"100%\",\n    alignItems: \"center\",\n  },\n  buttonPrimary: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 30,\n    width: \"90%\",\n    justifyContent: \"space-between\",\n    marginBottom: 15,\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 5,\n    elevation: 5,\n  },\n  buttonPrimaryText: {\n    color: \"black\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  buttonSecondary: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: \"black\",\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 30,\n    width: \"90%\",\n    justifyContent: \"space-between\",\n  },\n  buttonSecondaryText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  noImageContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  noImageText: {\n    fontSize: 16,\n    color: \"gray\",\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\", // Semi-transparent background\n  },\n  modalContent: {\n    width: \"90%\",\n    padding: 20,\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    elevation: 10,\n  },\n  closeButton: {\n    alignSelf: \"flex-end\",\n  },\n});\n\n// import React from 'react';\n// import { View, Text, StyleSheet, ImageBackground, TouchableOpacity, StatusBar, Dimensions } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n// import { useClientStore } from '@/contexts/ClientStoreContext';\n\n// const { width, height } = Dimensions.get(\"screen\");\n\n// export default function WelcomePageTwo() {\n\n//   const { store } = useClientStore();\n\n//   const welcomeImage = store?.images?.welcome_image ?? \"\";\n\n//   return (\n//     <View style={styles.container}>\n//       <StatusBar barStyle=\"dark-content\" translucent backgroundColor=\"transparent\" />\n\n//       {welcomeImage ? (\n//         <ImageBackground\n//           source={{ uri: welcomeImage }}\n//           style={styles.backgroundImage}\n//           resizeMode=\"cover\"\n//         >\n//           <View style={styles.overlay}>\n//             <View style={styles.header}>\n//               <Text style={styles.logoText}>{store?.store_name}</Text>\n//               <Text style={styles.tagline}>Nature's Superfood, Your Ultimate Wellness Companion.</Text>\n//             </View>\n\n//             <View style={styles.buttonContainer}>\n//               <TouchableOpacity style={styles.buttonPrimary} onPress={() => {}}>\n//                 <Ionicons name=\"log-in-outline\" size={20} color=\"black\" />\n//                 <Text style={styles.buttonPrimaryText}>Proceed to Login</Text>\n//                 <Ionicons name=\"arrow-forward\" size={20} color=\"black\" />\n//               </TouchableOpacity>\n\n//               <TouchableOpacity style={styles.buttonSecondary} onPress={() => {}}>\n//                 <Ionicons name=\"person-add-outline\" size={20} color=\"white\" />\n//                 <Text style={styles.buttonSecondaryText}>New User? Sign Up</Text>\n//                 <Ionicons name=\"arrow-forward\" size={20} color=\"white\" />\n//               </TouchableOpacity>\n//             </View>\n//           </View>\n//         </ImageBackground>\n//       ) : (\n//         <View style={styles.noImageContainer}>\n//           <Text style={styles.noImageText}>No image available</Text>\n//         </View>\n//       )}\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     backgroundColor: '#F5F5F5',\n//   },\n//   backgroundImage: {\n//     flex: 1,\n//     width: '100%',\n//     height: '100%',\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   overlay: {\n//     flex: 1,\n//     justifyContent: 'space-between',\n//     alignItems: 'center',\n//     backgroundColor: 'rgba(0, 0, 0, 0.3)', // Dark overlay for text visibility\n//     paddingTop: 60,\n//     paddingBottom: 40,\n//     width: width\n//   },\n//   header: {\n//     alignItems: 'center',\n//   },\n//   logoText: {\n//     fontSize: 40,\n//     fontWeight: 'bold',\n//     color: 'white',\n//   },\n//   tagline: {\n//     fontSize: 16,\n//     color: 'white',\n//     textAlign: 'center',\n//     paddingHorizontal: 20,\n//     marginTop: 10,\n//   },\n//   buttonContainer: {\n//     width: '100%',\n//     alignItems: 'center',\n//   },\n//   buttonPrimary: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     backgroundColor: 'white',\n//     paddingVertical: 15,\n//     paddingHorizontal: 30,\n//     borderRadius: 30,\n//     width: '90%',\n//     justifyContent: 'space-between',\n//     marginBottom: 15,\n//     shadowColor: '#000',\n//     shadowOffset: { width: 0, height: 2 },\n//     shadowOpacity: 0.2,\n//     shadowRadius: 5,\n//     elevation: 5,\n//   },\n//   buttonPrimaryText: {\n//     color: 'black',\n//     fontSize: 18,\n//     fontWeight: 'bold',\n//   },\n//   buttonSecondary: {\n//     flexDirection: 'row',\n//     alignItems: 'center',\n//     backgroundColor: 'black',\n//     paddingVertical: 15,\n//     paddingHorizontal: 30,\n//     borderRadius: 30,\n//     width: '90%',\n//     justifyContent: 'space-between',\n//   },\n//   buttonSecondaryText: {\n//     color: 'white',\n//     fontSize: 18,\n//     fontWeight: 'bold',\n//   },\n//   noImageContainer: {\n//     flex: 1,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   noImageText: {\n//     fontSize: 16,\n//     color: 'gray',\n//   },\n// });\n","import React from 'react';\nimport { StyleSheet, Text, ScrollView, View } from 'react-native';\nimport { COLORS, SIZES } from '@/utils/theme';\nimport { useClientStore } from '@/contexts/ClientStoreContext';\n// import { useClientStore,  COLORS, SIZES } from \"@dhuntleypro/afm-library\"\n\nconst TermsOfUsePage = () => {\n  const { store } = useClientStore();\n  const storeName = store?.store_name || 'Your Store Name';\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* <Text style={styles.heading}>Terms of Use</Text> */}\n      <Text style={styles.paragraph}>\n        Welcome to {storeName}. By accessing or using our website or app, you agree to be bound by the following terms and conditions.\n      </Text>\n\n      <Text style={styles.subheading}>1. Acceptance of Terms</Text>\n      <Text style={styles.paragraph}>\n        By accessing our website, you agree to these Terms of Use. If you do not agree, you must not use our site.\n      </Text>\n\n      <Text style={styles.subheading}>2. Changes to Terms</Text>\n      <Text style={styles.paragraph}>\n        {storeName} reserves the right to update or modify these terms at any time without prior notice. Your continued use of the site constitutes your acceptance of the new terms.\n      </Text>\n\n      <Text style={styles.subheading}>3. Use of the Site</Text>\n      <Text style={styles.paragraph}>\n        You agree to use our site for lawful purposes only. Prohibited activities include, but are not limited to:\n      </Text>\n      <View style={styles.list}>\n        <Text style={styles.listItem}>• Violating any laws or regulations.</Text>\n        <Text style={styles.listItem}>• Infringing upon our intellectual property rights or the rights of others.</Text>\n        <Text style={styles.listItem}>• Transmitting harmful or malicious software.</Text>\n      </View>\n\n      <Text style={styles.subheading}>4. Account Information</Text>\n      <Text style={styles.paragraph}>\n        When you create an account, you agree to provide accurate and complete information. You are responsible for maintaining the confidentiality of your account and password.\n      </Text>\n\n      <Text style={styles.subheading}>5. Product Information</Text>\n      <Text style={styles.paragraph}>\n        We strive to display accurate product descriptions and pricing. However, {storeName} does not guarantee that these details are error-free.\n      </Text>\n\n      <Text style={styles.subheading}>6. Intellectual Property</Text>\n      <Text style={styles.paragraph}>\n        All content on this site, including text, graphics, logos, and images, is the property of {storeName} and is protected by copyright laws.\n      </Text>\n\n      <Text style={styles.subheading}>7. Termination</Text>\n      <Text style={styles.paragraph}>\n        We reserve the right to terminate your access to the site at any time, without notice, for any reason, including violation of these terms.\n      </Text>\n\n      <Text style={styles.subheading}>8. Limitation of Liability</Text>\n      <Text style={styles.paragraph}>\n        {storeName} is not liable for any damages arising from the use of our site or products. This includes, but is not limited to, direct, indirect, incidental, or punitive damages.\n      </Text>\n\n      <Text style={styles.subheading}>9. Governing Law</Text>\n      <Text style={styles.paragraph}>\n        These terms are governed by the laws of [Your Jurisdiction]. Any disputes arising from these terms or your use of the site will be resolved in the courts of [Your Jurisdiction].\n      </Text>\n    </ScrollView>\n  );\n};\n\nexport default TermsOfUsePage;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: COLORS.lightWhite,\n  },\n  heading: {\n    fontSize: SIZES.large,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  subheading: {\n    fontSize: SIZES.medium,\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 10,\n  },\n  paragraph: {\n    fontSize: SIZES.small,\n    lineHeight: 22,\n    color: COLORS.darkGray,\n  },\n  list: {\n    paddingLeft: 20,\n    marginBottom: 10,\n  },\n  listItem: {\n    fontSize: SIZES.small,\n    lineHeight: 22,\n    color: COLORS.darkGray,\n  },\n});","import React from 'react';\nimport { StyleSheet, Text, ScrollView, View } from 'react-native';\nimport { COLORS, SIZES } from '@/utils/theme';\nimport { useClientStore } from '@/contexts/ClientStoreContext';\n\nconst PrivacyPolicyPage = () => {\n  const { store } = useClientStore();\n  const storeName = store?.store_name || 'Your Store Name';\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* <Text style={styles.heading}>Privacy Policy</Text> */}\n      <Text style={styles.paragraph}>\n        At {storeName}, we are committed to protecting your privacy. This Privacy Policy outlines how we collect, use, and protect your personal information.\n      </Text>\n\n      <Text style={styles.subheading}>1. Information Collection</Text>\n      <Text style={styles.paragraph}>\n        We collect information that you provide to us when you register on our site, place an order, subscribe to our newsletter, or fill out a form. This may include your name, email address, mailing address, phone number, and payment information.\n      </Text>\n\n      <Text style={styles.subheading}>2. Use of Information</Text>\n      <Text style={styles.paragraph}>\n        The information we collect may be used in the following ways:\n      </Text>\n      <View style={styles.list}>\n        <Text style={styles.listItem}>• To personalize your experience and respond to your individual needs.</Text>\n        <Text style={styles.listItem}>• To improve our website based on the information and feedback we receive from you.</Text>\n        <Text style={styles.listItem}>• To process transactions efficiently.</Text>\n        <Text style={styles.listItem}>• To send periodic emails related to your order or other products and services.</Text>\n      </View>\n\n      <Text style={styles.subheading}>3. Sharing of Information</Text>\n      <Text style={styles.paragraph}>\n        We do not sell, trade, or otherwise transfer your personally identifiable information to outside parties, except to trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential.\n      </Text>\n\n      <Text style={styles.subheading}>4. Security</Text>\n      <Text style={styles.paragraph}>\n        We implement a variety of security measures to maintain the safety of your personal information. Your personal information is contained behind secured networks and is only accessible by a limited number of persons who have special access rights to such systems.\n      </Text>\n\n      <Text style={styles.subheading}>5. User Rights</Text>\n      <Text style={styles.paragraph}>\n        You have the right to access, update, or delete your personal information at any time. You may also opt-out of receiving future communications from us by following the unsubscribe instructions included in each email.\n      </Text>\n\n      <Text style={styles.subheading}>6. Cookies</Text>\n      <Text style={styles.paragraph}>\n        We use cookies to enhance your experience, gather general visitor information, and track visits to our website. You can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies via your browser settings.\n      </Text>\n\n      <Text style={styles.subheading}>7. Changes to this Policy</Text>\n      <Text style={styles.paragraph}>\n        {storeName} reserves the right to update this Privacy Policy at any time. We will notify you of any significant changes by updating the date at the top of this document or via email if you have an account with us.\n      </Text>\n\n      <Text style={styles.subheading}>8. Contact Us</Text>\n      <Text style={styles.paragraph}>\n        If you have any questions about this Privacy Policy, please contact us at [Your Contact Information].\n      </Text>\n    </ScrollView>\n  );\n};\n\nexport default PrivacyPolicyPage;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: COLORS.lightWhite,\n  },\n  heading: {\n    fontSize: SIZES.large,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  subheading: {\n    fontSize: SIZES.medium,\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 10,\n  },\n  paragraph: {\n    fontSize: SIZES.small,\n    lineHeight: 22,\n    color: COLORS.darkGray,\n  },\n  list: {\n    paddingLeft: 20,\n    marginBottom: 10,\n  },\n  listItem: {\n    fontSize: SIZES.small,\n    lineHeight: 22,\n    color: COLORS.darkGray,\n  },\n});","import { StyleSheet, Text, View } from 'react-native'\nimport React from 'react'\n\nconst CookiesPage = () => {\n  return (\n    <View>\n      <Text>CookiesPage</Text>\n    </View>\n  )\n}\n\nexport default CookiesPage\n\nconst styles = StyleSheet.create({})","import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  Dimensions,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nconst { width } = Dimensions.get('window');\n\ninterface AppearanceOption {\n  label: string;\n  mode: 'light' | 'dark' | 'system';\n}\n\nconst options: AppearanceOption[] = [\n  { label: 'Light', mode: 'light' },\n  { label: 'Dark', mode: 'dark' },\n  { label: 'System', mode: 'system' },\n];\n\nconst AppearanceSelection: React.FC = () => {\n  const { setTheme, theme } = useTheme();\n  const handleSelection = (mode: AppearanceOption['mode']) => {\n    setTheme(mode);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>APPEARANCE</Text>\n      <View style={styles.optionsContainer}>\n        {options.map((option) => (\n          <TouchableOpacity\n            key={option.mode}\n            style={[\n              styles.option,\n              theme === option.mode && styles.selectedOption,\n            ]}\n            onPress={() => handleSelection(option.mode)}\n          >\n            <View style={styles.optionContent}>\n              <View style={[styles.preview, theme === option.mode && styles.selectedPreview]}>\n                <Text style={styles.previewText}>Aa</Text>\n              </View>\n              <Text style={styles.optionLabel}>{option.label}</Text>\n              {theme === option.mode && (\n                <Ionicons name=\"checkmark-circle\" size={24} color=\"green\" style={styles.checkIcon} />\n              )}\n            </View>\n          </TouchableOpacity>\n        ))}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#888',\n    marginBottom: 10,\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  option: {\n    width: (width - 60) / 3, // Ensures the three options fit horizontally\n    alignItems: 'center',\n    padding: 10,\n    borderRadius: 10,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    backgroundColor: '#f7f7f7',\n  },\n  selectedOption: {\n    borderColor: 'black',\n    backgroundColor: '#EDEDED',\n  },\n  optionContent: {\n    alignItems: 'center',\n  },\n  preview: {\n    width: 50,\n    height: 50,\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#ddd',\n  },\n  selectedPreview: {\n    backgroundColor: '#333',\n  },\n  previewText: {\n    fontSize: 18,\n    color: 'black',\n  },\n  optionLabel: {\n    marginTop: 10,\n    fontSize: 14,\n    color: 'black',\n  },\n  checkIcon: {\n    position: 'absolute',\n    right: 5,\n    top: 5,\n  },\n});\n\nexport default AppearanceSelection;\n\n\n// import React, { useState } from 'react';\n// import {\n//   View,\n//   Text,\n//   TouchableOpacity,\n//   StyleSheet,\n//   Dimensions,\n// } from 'react-native';\n// import { Ionicons } from '@expo/vector-icons';\n\n// const { width } = Dimensions.get('window');\n\n// interface AppearanceOption {\n//   label: string;\n//   mode: 'light' | 'dark' | 'system';\n// }\n\n// const options: AppearanceOption[] = [\n//   { label: 'Light', mode: 'light' },\n//   { label: 'Dark', mode: 'dark' },\n//   { label: 'System', mode: 'system' },\n// ];\n\n// const AppearanceSelection: React.FC = () => {\n//   const [selectedMode, setSelectedMode] = useState<AppearanceOption['mode']>('system');\n\n//   const handleSelection = (mode: AppearanceOption['mode']) => {\n//     setSelectedMode(mode);\n//     // Implement theme changing logic here, such as updating context or calling a theme switching function\n//   };\n\n//   return (\n//     <View style={styles.container}>\n//       <Text style={styles.title}>APPEARANCE</Text>\n//       <View style={styles.optionsContainer}>\n//         {options.map((option) => (\n//           <TouchableOpacity\n//             key={option.mode}\n//             style={[\n//               styles.option,\n//               selectedMode === option.mode && styles.selectedOption,\n//             ]}\n//             onPress={() => handleSelection(option.mode)}\n//           >\n//             <View style={styles.optionContent}>\n//               <View style={[styles.preview, selectedMode === option.mode && styles.selectedPreview]}>\n//                 <Text style={styles.previewText}>Aa</Text>\n//               </View>\n//               <Text style={styles.optionLabel}>{option.label}</Text>\n//               {selectedMode === option.mode && (\n//                 <Ionicons name=\"checkmark-circle\" size={24} color=\"black\" style={styles.checkIcon} />\n//               )}\n//             </View>\n//           </TouchableOpacity>\n//         ))}\n//       </View>\n//     </View>\n//   );\n// };\n\n// const styles = StyleSheet.create({\n//   container: {\n//     padding: 20,\n//   },\n//   title: {\n//     fontSize: 16,\n//     fontWeight: 'bold',\n//     color: '#888',\n//     marginBottom: 10,\n//   },\n//   optionsContainer: {\n//     flexDirection: 'row',\n//     justifyContent: 'space-between',\n//   },\n//   option: {\n//     width: (width - 60) / 3, // Ensures the three options fit horizontally\n//     alignItems: 'center',\n//     padding: 10,\n//     borderRadius: 10,\n//     borderColor: '#ddd',\n//     borderWidth: 1,\n//     backgroundColor: '#f7f7f7',\n//   },\n//   selectedOption: {\n//     borderColor: 'black',\n//     backgroundColor: '#EDEDED',\n//   },\n//   optionContent: {\n//     alignItems: 'center',\n//   },\n//   preview: {\n//     width: 50,\n//     height: 50,\n//     borderRadius: 10,\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//     backgroundColor: '#ddd',\n//   },\n//   selectedPreview: {\n//     backgroundColor: '#333',\n//   },\n//   previewText: {\n//     fontSize: 18,\n//     color: 'black',\n//   },\n//   optionLabel: {\n//     marginTop: 10,\n//     fontSize: 14,\n//     color: 'black',\n//   },\n//   checkIcon: {\n//     position: 'absolute',\n//     right: 5,\n//     top: 5,\n//   },\n// });\n\n// export default AppearanceSelection;\n","import { StyleSheet, Text, View } from 'react-native'\nimport React from 'react'\n\nconst FAQPage = () => {\n  return (\n    <View>\n      <Text>faqPage</Text>\n    </View>\n  )\n}\n\nexport default FAQPage\n\nconst styles = StyleSheet.create({})","import { Image, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\nimport React, { FC, useContext, useState } from \"react\";\nimport { COLORS, SIZES } from \"@/utils/theme\";\n// import { ProductModelProps } from '../../models/ProductModelProps'\nimport convertToCurrency from \"@/hooks/convertToCurrency\";\n// import {  useFavorite } from '../../contexts/FavoriteContext'\nimport { Ionicons, SimpleLineIcons } from \"@expo/vector-icons\";\n// import { stripeConverter } from '../../hook/stripeConverter'\n// import { useAuth } from '../../contexts/AuthContext'\n// import { createPaymentIntent } from '../../api/paymentApi'\nimport { CONSTANTS } from \"@/utils/constants\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useFavorite } from \"@/contexts/FavoriteContext\";\nimport { useTheme } from \"@react-navigation/native\";\n\nconst FavoriteCard = ({ item }: any) => {\n  const {colors} = useTheme()\n  const {\n    deleteItemFromFavorite,\n    addToFavorite,\n    decreaseFromFavorite,\n    totalSum,\n  } = useFavorite();\n  const [quantity, setQuantity] = useState(item.quantity);\n  const { authState, onLogout } = useAuth();\n  const [paymentStatus, setPaymentStatus] = useState(\"ijiij\");\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 10,\n    flexDirection: \"row\",\n  },\n  img: {\n    height: 125,\n    width: \"25%\",\n    borderRadius: 10,\n  },\n  cardContent: {\n    flex: 1,\n    marginHorizontal: 10,\n  },\n  title: {\n    fontSize: 15,\n    color: colors.text,\n  },\n  price: {\n    color: \"#797979\",\n    marginVertical: 7,\n    fontSize: 18,\n  },\n  circleSizeContainer: {\n    flexDirection: \"row\",\n  },\n  circle: {\n    height: 32,\n    width: 32,\n    borderRadius: 16,\n    backgroundColor: \"#444444\",\n  },\n  sizeCircle: {\n    backgroundColor: \"white\",\n    height: 32,\n    width: 32,\n    borderRadius: 16,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  sizeText: {\n    fontSize: 18,\n    fontWeight: \"500\",\n  },\n  rating: {\n    top: SIZES.large,\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    // marginHorizontal: SIZES.large\n  },\n  ratingText: {\n    color: COLORS.gray,\n    fontFamily: \"medium\",\n    paddingHorizontal: SIZES.xSmall,\n  },\n});\n\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.img}\n        source={{ uri: item.image ? item.image : CONSTANTS.holderImage }}\n      />\n      <View style={styles.cardContent}>\n        <Text style={styles.title}>{item.name}</Text>\n        <Text style={styles.price}>\n          {convertToCurrency(item.price)} \n        </Text>\n        {/* <Text style={styles.price}>{convertToCurrency(item.price * item.quantity) }</Text> */}\n\n        {/* <View style={styles.circleSizeContainer}>\n                <View style={styles.circle} />\n            </View>  */}\n\n        <View style={styles.rating}></View>\n      </View>\n      <TouchableOpacity onPress={() => deleteItemFromFavorite(item)}>\n        <Ionicons\n          name=\"trash-outline\"\n          size={SIZES.xLarge}\n          color={colors.text}\n        />\n      </TouchableOpacity>\n\n      <View></View>\n    </View>\n  );\n};\n\nexport default FavoriteCard;\n\n\n// import React from 'react';\n// import { TouchableOpacity, View, Text, Image } from 'react-native';\n// import { useFavorite } from '@/contexts/FavoriteContext';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// // Update the FavoriteCard component to accept these props\n// const FavoriteCard: React.FC<{\n//     item: Partial<ProductModelProps>;\n//     deleteItemFromFavorite: (item: Partial<ProductModelProps>, authUser: any, updateSingleUserItem: any) => void;\n//     triggerValueChange: boolean;\n//   }> = ({ item, deleteItemFromFavorite, triggerValueChange }) => {\n//     // Handle favorite toggle logic here, if necessary\n\n//     return (\n//       <View style={{ padding: 10 }}>\n//         {/* Example UI for the favorite item */}\n//         {item.image && (\n//           <Image source={{ uri: item.image }} style={{ width: 100, height: 100 }} />\n//         )}\n//         <Text>{item.name || 'Unnamed Product'}</Text>\n//         <Text>{item.price || 'Price Unavailable'}</Text>\n\n//         {/* Heart Icon */}\n//         <TouchableOpacity onPress={() => deleteItemFromFavorite(item, null, null)}>\n//           <Text>{'♡'}</Text> {/* Display filled heart if favorite */}\n//         </TouchableOpacity>\n//       </View>\n//     );\n//   };\n\n//   export default FavoriteCard;\n","import React, { useContext, useState } from \"react\";\nimport {\n  Image,\n  StyleSheet,\n  FlatList,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { useFavorite } from \"@/contexts/FavoriteContext\";\n// import FavoriteHeader from '@/components/other/headers/FavoriteHeader';\nimport { generalStyles } from \"@/components/other/general/Styles\";\n// import CartCard from \"@/components/cart/CartCard\";\nimport convertToCurrency from \"@/hooks/convertToCurrency\";\nimport { CONSTANTS } from \"@/utils/constants\";\nimport FavoriteCard from \"@/components/card/fovorite/FavoritrCard\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\n// import PaymentPayScreen from './PaymentPayScreen';\n\n// Define the FavoritePageVOne component\nconst FavoritesPageVOne: React.FC = () => {\n  const {\n    favorites,\n    totalSum,\n    totalShipping,\n    totalTax,\n    grandTotal,\n    deleteItemFromFavorite,\n  } = useFavorite();\n  const [triggerValueChange, setTriggerValueChange] = useState(false);\n\n  const { colors } = useTheme();\n  // Stylesheet for the component\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      padding: 15,\n      color: colors.title\n    },\n    priceContainer: {\n      marginTop: 40,\n    },\n    priceAndTitle: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      marginHorizontal: 20,\n      marginVertical: 10,\n      color: colors.title, // '#757575',\n\n    },\n    text: {\n      color: colors.title, // '#757575',\n      fontSize: 14,\n    },\n    divider: {\n      borderWidth: 1,\n      borderColor: colors.cardBorder, // '#C0C0C0',\n      borderRadius: 15,\n      marginVertical: 10,\n    },\n  });\n  return (\n    <View style={styles.container}>\n      {favorites.length <= 0 ? (\n        <View style={generalStyles.center}>\n          <Text>Please add items to the favorite</Text>\n        </View>\n      ) : (\n        <>\n          <FlatList\n            data={favorites}\n            showsVerticalScrollIndicator={false}\n            keyExtractor={(item) => String(item.id)} // Convert item.id to string to ensure it's a valid key\n            contentContainerStyle={{ paddingBottom: 100 }}\n            renderItem={({ item }) => (\n              <FavoriteCard\n                item={item}\n                deleteItemFromFavorite={deleteItemFromFavorite}\n                triggerValueChange={triggerValueChange}\n              />\n            )}\n          />\n          <View style={{ paddingBottom: 50 }} />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default FavoritesPageVOne;\n","import React, { useState } from 'react';\nimport { SafeAreaView, View, TextInput, TouchableOpacity, Text, FlatList, StyleSheet, Dimensions } from 'react-native';\nimport { Feather, Ionicons } from '@expo/vector-icons';\n// import { getProducts } from '../../../api/productsApi';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { COLORS, SIZES } from '@/utils/theme';\nimport { CONSTANTS } from '@/utils/constants';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport {ProductCardV2} from '@/components/card/product/ProductCardV2';\nimport { useClientProduct } from '@/contexts/ClientProductContext';\n\nconst { width } = Dimensions.get('window');\n\nconst CollectionProductSearchScreen = () => {\n  const { authState } = useAuth();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState<ProductModelProps[]>([]);\n\n  const storeID = authState?.user ? authState.user.store_owner_id : '';\n  const email = authState?.user ? authState.user.email : '';\n\n  const { products } = useClientProduct();\n\n  const handleSearch = (text: string) => {\n    try {\n      setSearchTerm(text);\n      const results = products.filter((product: ProductModelProps) =>\n        product.name.toLowerCase().includes(text.toLowerCase())\n      );\n      setSearchResults(results);\n    } catch (error) {\n      console.log(\"Failed to get products\", error);\n    }\n  };\n\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <View style={styles.searchContainer}>\n        <TouchableOpacity>\n          <Ionicons \n            name='camera-outline' \n            size={SIZES.xLarge} \n            style={styles.searchIcon}\n          />\n        </TouchableOpacity>\n\n        <View style={styles.searchWrapper}>\n          <TextInput \n            style={styles.searchInput} \n            value={searchTerm}\n            onChangeText={handleSearch}\n            placeholder='What are you looking for 1'\n          />\n        </View>\n\n        <View>\n          <TouchableOpacity style={styles.searchBtn} onPress={() => handleSearch(searchTerm)}>\n            <Feather name='search' size={24} color={COLORS.offwhite}/>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Search result */}\n      <FlatList\n        keyExtractor={(item: ProductModelProps) => item.id}\n        data={searchTerm === '' ? products : (searchResults.length === 0 ? products : searchResults)}\n        renderItem={({ item }) => (\n          <View style={styles.gridLayout}>\n            <ProductCardV2 {...item} />\n          </View>\n        )}\n        numColumns={2}\n        columnWrapperStyle={styles.row}\n        contentContainerStyle={{ paddingHorizontal: 12 }}\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default CollectionProductSearchScreen;\n\nexport const styles = StyleSheet.create({\n  gridLayout: {\n    flex: 1,\n    margin: 8, // Adjust the margin to space items evenly\n  },\n  row: {\n    justifyContent: 'space-between', // Ensure even spacing between items\n  },\n  searchContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignContent: \"center\",\n    marginHorizontal: SIZES.small,\n    backgroundColor: COLORS.secondary,\n    borderRadius: SIZES.medium,\n    marginVertical: SIZES.medium,\n    height: 50\n  },\n  searchIcon: {\n    marginHorizontal: 10,\n    color: COLORS.gray,\n    marginTop: SIZES.small\n  },\n  searchWrapper:{ \n    flex: 1,\n    backgroundColor: COLORS.secondary,\n    marginRight: SIZES.small,\n    borderRadius: SIZES.small\n  },\n  searchInput: {\n    fontFamily: \"regular\",\n    width: \"100%\",\n    height: \"100%\",\n    paddingHorizontal: SIZES.small\n  },\n  searchBtn: {\n    width: 50,\n    height: \"100%\",\n    borderRadius: SIZES.medium,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: COLORS.primary\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { SafeAreaView, View, TextInput, TouchableOpacity, Text, FlatList, StyleSheet, Dimensions } from 'react-native';\n// import { Feather, Ionicons } from '@expo/vector-icons';\n// import { getProducts } from '../../../api/productsApi';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { COLORS, SIZES } from '@/utils/theme';\n// // import ProductListItem from './ProductListItem';\n// import { CONSTANTS } from '@/utils/constants';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// // import { useClientProduct } from '@/contexts/ClientProductContext';\n// import ProductListItem from './ProductSearchTile';\n// import ProductCardV2 from '../../library/card/ProductCardV2';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n\n// const { width } = Dimensions.get('window');\n\n\n// const ProductSearchScreen = () => {\n//   const { authState } = useAuth();\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [searchResults, setSearchResults] = useState<ProductModelProps[]>([]);\n\n//   const storeID = authState?.user ? authState.user.store_owner_id : '';\n//   const email = authState?.user ? authState.user.email : '';\n\n//   const { products } = useClientProduct();\n\n//   const handleSearch = (text: string) => {\n//     try {\n//       setSearchTerm(text);\n//       const results = products.filter((product: ProductModelProps) =>\n//         product.name.toLowerCase().includes(text.toLowerCase())\n//       );\n//       setSearchResults(results);\n//     } catch (error) {\n//       console.log(\"Failed to get products\", error);\n//     }\n//   };\n\n//   return (\n//     <SafeAreaView style={{ flex: 1 }}>\n//       <View style={styles.searchContainer}>\n//         <TouchableOpacity>\n//           <Ionicons \n//             name='camera-outline' \n//             size={SIZES.xLarge} \n//             style={styles.searchIcon}\n//           />\n//         </TouchableOpacity>\n\n//         <View style={styles.searchWrapper}>\n//           <TextInput \n//             style={styles.searchInput} \n//             value={searchTerm}\n//             onChangeText={handleSearch}\n//             placeholder='What are you looking for'\n//           />\n//         </View>\n\n//         <View>\n//           <TouchableOpacity style={styles.searchBtn} onPress={() => handleSearch(searchTerm)}>\n//             <Feather name='search' size={24} color={COLORS.offwhite}/>\n//           </TouchableOpacity>\n//         </View>\n//       </View>\n\n//       {/* Search result */}\n//       {searchTerm === '' ? (\n//         <FlatList\n//           keyExtractor={(item: ProductModelProps) => item.id}\n//           data={products}\n//           // renderItem={({ item }) => <ProductListItem {...item} />}\n//           renderItem={({ item }) => (\n          \n//             <View style={styles.gridLayout}>\n//           <ProductCardV2 {...item} />\n//           </View>\n\n//           )}\n//           contentContainerStyle={{ marginHorizontal: 12 }}\n//         />\n//       ) : (\n//         <FlatList\n//           keyExtractor={(item: ProductModelProps) => item.id}\n//           data={searchResults.length === 0 ? products : searchResults}\n//           // renderItem={({ item }) => <ProductListItem {...item} />}\n//           renderItem={({ item }) => (\n          \n//             <View style={styles.gridLayout}>\n//           <ProductCardV2 {...item} />\n//           </View>\n\n//           )}\n//           contentContainerStyle={{ marginHorizontal: 12 }}\n//         />\n//       )}\n//     </SafeAreaView>\n//   );\n// };\n\n// export default ProductSearchScreen;\n\n// export const styles = StyleSheet.create({\n//   gridLayout: {\n//     width: (width / 2) - 18, // Adjust the width to leave space for margins\n//     marginBottom: 12,\n//   },\n//     searchContainer: {\n//         flexDirection: \"row\",\n//         justifyContent: \"center\",\n//         alignContent: \"center\",\n//         marginHorizontal: SIZES.small,\n//         backgroundColor: COLORS.secondary,\n//         borderRadius: SIZES.medium,\n//         marginVertical: SIZES.medium,\n//         height: 50\n\n//     },\n//     searchIcon: {\n//         marginHorizontal: 10,\n//         color: COLORS.gray,\n//         marginTop: SIZES.small\n//     },\n//     searchWrapper:{ \n//         flex: 1,\n//         backgroundColor: COLORS.secondary,\n//         marginRight: SIZES.small,\n//         borderRadius: SIZES.small\n//     },\n//     searchInput: {\n//         fontFamily: \"regular\",\n//         width: \"100%\",\n//         height: \"100%\",\n//         paddingHorizontal: SIZES.small\n//     },\n//     searchBtn: {\n//         width: 50,\n//         height: \"100%\",\n//         borderRadius: SIZES.medium,\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//         backgroundColor: COLORS.primary\n//     }\n// })\n","import React, { useState } from 'react';\nimport { SafeAreaView, View, TextInput, TouchableOpacity, FlatList, StyleSheet, Dimensions } from 'react-native';\nimport { Feather, Ionicons } from '@expo/vector-icons';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { COLORS, SIZES } from '@/utils/theme';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { useClientProduct } from '@/contexts/ClientProductContext';\nimport ProductGridCardVOne from '@/components/card/product/ProductGridCardVOne';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nconst { width } = Dimensions.get('window');\n\nconst ProductSearchScreen = () => {\n  const { authState } = useAuth();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState<ProductModelProps[]>([]);\n\n  const { products } = useClientProduct();\n  const { colors } = useTheme();\n\n  const handleSearch = (text: string) => {\n    try {\n      setSearchTerm(text);\n      const results = products.filter((product: ProductModelProps) =>\n        product.name.toLowerCase().includes(text.toLowerCase())\n      );\n      setSearchResults(results);\n    } catch (error) {\n      console.log('Failed to get products', error);\n    }\n  };\n\n  const styles = StyleSheet.create({\n    searchContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: SIZES.medium,\n      backgroundColor: colors.background,\n    },\n    searchIcon: {\n      marginRight: SIZES.small,\n      color: colors.title,\n    },\n    searchWrapper: {\n      flex: 1,\n      backgroundColor: colors.cardBackground,\n      borderRadius: SIZES.medium,\n      marginRight: SIZES.small,\n      height: 40,\n      justifyContent: 'center',\n    },\n    searchInput: {\n      paddingLeft: SIZES.small,\n      color: colors.title,\n    },\n    searchBtn: {\n      backgroundColor: COLORS.primary,\n      padding: SIZES.small,\n      borderRadius: SIZES.medium,\n    },\n    flatListContent: {\n      paddingHorizontal: 16, // Adjust padding to make it even on both sides\n    },\n    row: {\n      justifyContent: 'space-between', // Ensure items are evenly spaced between columns\n    },\n    container: {\n      width: (width / 2) - 24, // Half of the screen width minus some padding to fit two items per row\n      height: 250,\n      marginBottom: 16, // Space between rows\n      backgroundColor: colors.cardBackground,\n      borderRadius: 10,\n      borderWidth: 1,\n      borderColor: colors.border,\n      overflow: 'hidden',\n    },\n    gridLayout: {\n      marginBottom: 16,\n    },\n    imageContainer: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 10,\n      overflow: 'hidden',\n      marginTop: 10,\n    },\n    image: {\n      width: 140,\n      height: 140,\n      borderRadius: 10,\n      resizeMode: 'cover',\n    },\n    details: {\n      padding: 10,\n    },\n    title: {\n      fontFamily: 'bold',\n      fontSize: 14,\n      marginBottom: 2,\n      height: 35,\n      color: colors.title,\n    },\n    supplier: {\n      fontFamily: 'regular',\n      fontSize: 12,\n      color: colors.title,\n    },\n    price: {\n      fontFamily: 'bold',\n      fontSize: 16,\n      color: colors.title,\n    },\n    addBtn: {\n      position: 'absolute',\n      bottom: 10,\n      right: 10,\n    },\n  });\n\n  return (\n    <View>\n      <View style={styles.searchContainer}>\n        <TouchableOpacity>\n          <Ionicons name=\"search\" size={SIZES.xLarge} style={styles.searchIcon} />\n        </TouchableOpacity>\n\n        <View style={styles.searchWrapper}>\n          <TextInput\n            style={styles.searchInput}\n            value={searchTerm}\n            onChangeText={handleSearch}\n            placeholder=\"What are you looking for\"\n            placeholderTextColor={colors.subtitle}\n          />\n        </View>\n\n        <View>\n          <TouchableOpacity style={styles.searchBtn} onPress={() => handleSearch(searchTerm)}>\n            <Feather name=\"search\" size={24} color={COLORS.offwhite} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Search result */}\n      <FlatList\n        keyExtractor={(item: ProductModelProps) => item.id}\n        data={searchTerm === '' ? products : (searchResults.length === 0 ? products : searchResults)}\n        renderItem={({ item }) => (\n          <ProductGridCardVOne product={item} viewTypeGrid={true} />\n        )}\n        numColumns={2}\n        columnWrapperStyle={styles.row} // Ensure even spacing between columns\n        contentContainerStyle={styles.flatListContent} // Padding for both sides of the list\n      />\n    </View>\n  );\n};\n\nexport default ProductSearchScreen;\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { SafeAreaView, View, TextInput, TouchableOpacity, FlatList, StyleSheet, Dimensions } from 'react-native';\n// import { Feather, Ionicons } from '@expo/vector-icons';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { COLORS, SIZES } from '@/utils/theme';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import ProductGridCardVOne from '@/components/card/product/ProductGridCardVOne';\n// import { useTheme } from '@/contexts/ThemeContext';\n\n// const { width } = Dimensions.get('window');\n\n// const ProductSearchScreen = () => {\n//   const { authState } = useAuth();\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [searchResults, setSearchResults] = useState<ProductModelProps[]>([]);\n\n//   const storeID = authState?.user ? authState.user.store_owner_id : '';\n//   const email = authState?.user ? authState.user.email : '';\n\n//   const { products } = useClientProduct();\n//   const { colors } = useTheme();\n\n//   const handleSearch = (text: string) => {\n//     try {\n//       setSearchTerm(text);\n//       const results = products.filter((product: ProductModelProps) =>\n//         product.name.toLowerCase().includes(text.toLowerCase())\n//       );\n//       setSearchResults(results);\n//     } catch (error) {\n//       console.log('Failed to get products', error);\n//     }\n//   };\n\n//   const styles = StyleSheet.create({\n//     searchContainer: {\n//       flexDirection: 'row',\n//       alignItems: 'center',\n//       padding: SIZES.medium,\n//       backgroundColor: colors.background,\n//     },\n//     searchIcon: {\n//       marginRight: SIZES.small,\n//       color: colors.title,\n//     },\n//     searchWrapper: {\n//       flex: 1,\n//       backgroundColor: colors.cardBackground,\n//       borderRadius: SIZES.medium,\n//       marginRight: SIZES.small,\n//       height: 40,\n//       justifyContent: 'center',\n//     },\n//     searchInput: {\n//       paddingLeft: SIZES.small,\n//       color: colors.title,\n//     },\n//     searchBtn: {\n//       backgroundColor: COLORS.primary,\n//       padding: SIZES.small,\n//       borderRadius: SIZES.medium,\n//     },\n//     flatListContent: {\n//       paddingHorizontal: 16, // Adjust padding to make it even on both sides\n//     },\n//     row: {\n//       justifyContent: 'space-between', // Ensure items are evenly spaced between columns\n//     },\n//     container: {\n//       width: (width / 2) - 24, // Adjust container width to make items fit the grid properly\n//       height: 250,\n//       marginBottom: 16, // Space between rows\n//       backgroundColor: colors.cardBackground,\n//       borderRadius: 10,\n//       borderWidth: 1,\n//       borderColor: colors.border,\n//       overflow: 'hidden',\n//     },\n//     gridLayout: {\n//       marginBottom: 16,\n//     },\n//     imageContainer: {\n//       flex: 1,\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       borderRadius: 10,\n//       overflow: 'hidden',\n//       marginTop: 10,\n//     },\n//     image: {\n//       width: 140,\n//       height: 140,\n//       borderRadius: 10,\n//       resizeMode: 'cover',\n//     },\n//     details: {\n//       padding: 10,\n//     },\n//     title: {\n//       fontFamily: 'bold',\n//       fontSize: 14,\n//       marginBottom: 2,\n//       height: 35,\n//       color: colors.title,\n//     },\n//     supplier: {\n//       fontFamily: 'regular',\n//       fontSize: 12,\n//       color: colors.title,\n//     },\n//     price: {\n//       fontFamily: 'bold',\n//       fontSize: 16,\n//       color: colors.title,\n//     },\n//     addBtn: {\n//       position: 'absolute',\n//       bottom: 10,\n//       right: 10,\n//     },\n//   });\n\n//   return (\n//     <View>\n//       <View style={styles.searchContainer}>\n//         <TouchableOpacity>\n//           <Ionicons name=\"search\" size={SIZES.xLarge} style={styles.searchIcon} />\n//         </TouchableOpacity>\n\n//         <View style={styles.searchWrapper}>\n//           <TextInput\n//             style={styles.searchInput}\n//             value={searchTerm}\n//             onChangeText={handleSearch}\n//             placeholder=\"What are you looking for 2\"\n//             placeholderTextColor={colors.subtitle}\n//           />\n//         </View>\n\n//         <View>\n//           <TouchableOpacity style={styles.searchBtn} onPress={() => handleSearch(searchTerm)}>\n//             <Feather name=\"search\" size={24} color={COLORS.offwhite} />\n//           </TouchableOpacity>\n//         </View>\n//       </View>\n\n//       {/* Search result */}\n//       <FlatList\n//         keyExtractor={(item: ProductModelProps) => item.id}\n//         data={searchTerm === '' ? products : (searchResults.length === 0 ? products : searchResults)}\n//         renderItem={({ item }) => (\n//           // <View style={styles.gridLayout}>\n//             <ProductGridCardVOne product={item} viewTypeGrid={true} />\n//           // </View>\n//         )}\n//         numColumns={2}\n//         columnWrapperStyle={styles.row} // Ensure even spacing between columns\n//         contentContainerStyle={styles.flatListContent} // Padding for both sides of the list\n//       />\n//     </View>\n//   );\n// };\n\n// export default ProductSearchScreen;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { SafeAreaView, View, TextInput, TouchableOpacity, FlatList, StyleSheet, Dimensions } from 'react-native';\n// import { Feather, Ionicons } from '@expo/vector-icons';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { COLORS, SIZES } from '@/utils/theme';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n// import ProductGridCardVOne from '@/components/card/product/ProductGridCardVOne';\n// import { useTheme } from '@/contexts/ThemeContext';\n\n// const { width } = Dimensions.get('window');\n\n// const ProductSearchScreen = () => {\n//   const { authState } = useAuth();\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [searchResults, setSearchResults] = useState<ProductModelProps[]>([]);\n\n//   const storeID = authState?.user ? authState.user.store_owner_id : '';\n//   const email = authState?.user ? authState.user.email : '';\n\n//   const { products } = useClientProduct();\n//   const { colors } = useTheme();\n\n//   const handleSearch = (text: string) => {\n//     try {\n//       setSearchTerm(text);\n//       const results = products.filter((product: ProductModelProps) =>\n//         product.name.toLowerCase().includes(text.toLowerCase())\n//       );\n//       setSearchResults(results);\n//     } catch (error) {\n//       console.log('Failed to get products', error);\n//     }\n//   };\n\n//   const styles = StyleSheet.create({\n//     searchContainer: {\n//       flexDirection: 'row',\n//       alignItems: 'center',\n//       padding: SIZES.medium,\n//       backgroundColor: colors.background,\n//     },\n//     searchIcon: {\n//       marginRight: SIZES.small,\n//       color: colors.text,\n//     },\n//     searchWrapper: {\n//       flex: 1,\n//       backgroundColor: colors.cardBackground,\n//       borderRadius: SIZES.medium,\n//       marginRight: SIZES.small,\n//       height: 40,\n//       justifyContent: 'center',\n//     },\n//     searchInput: {\n//       paddingLeft: SIZES.small,\n//       color: colors.text,\n//     },\n//     searchBtn: {\n//       backgroundColor: COLORS.primary,\n//       padding: SIZES.small,\n//       borderRadius: SIZES.medium,\n//     },\n//     flatListContent: {\n//       paddingHorizontal: 16, // Adjust padding to make it even on both sides\n//     },\n//     row: {\n//       justifyContent: 'space-between', // Ensure items are evenly spaced between columns\n//     },\n//     container: {\n//       width: (width / 2) - 24, // Adjust container width to make items fit the grid properly\n//       height: 250,\n//       marginBottom: 16, // Space between rows\n//       backgroundColor: colors.cardBackground,\n//       borderRadius: 10,\n//       borderWidth: 1,\n//       borderColor: colors.border,\n//       overflow: 'hidden',\n//     },\n//     gridLayout: {\n//       marginBottom: 16,\n//     },\n//     imageContainer: {\n//       flex: 1,\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       borderRadius: 10,\n//       overflow: 'hidden',\n//       marginTop: 10,\n//     },\n//     image: {\n//       width: 140,\n//       height: 140,\n//       borderRadius: 10,\n//       resizeMode: 'cover',\n//     },\n//     details: {\n//       padding: 10,\n//     },\n//     title: {\n//       fontFamily: 'bold',\n//       fontSize: 14,\n//       marginBottom: 2,\n//       height: 35,\n//       color: colors.title,\n//     },\n//     supplier: {\n//       fontFamily: 'regular',\n//       fontSize: 12,\n//       color: colors.title,\n//     },\n//     price: {\n//       fontFamily: 'bold',\n//       fontSize: 16,\n//       color: colors.title,\n//     },\n//     addBtn: {\n//       position: 'absolute',\n//       bottom: 10,\n//       right: 10,\n//     },\n//   });\n\n//   return (\n//     <SafeAreaView style={{ flex: 1 }}>\n//       <View style={styles.searchContainer}>\n//         <TouchableOpacity>\n//           <Ionicons name=\"camera-outline\" size={SIZES.xLarge} style={styles.searchIcon} />\n//         </TouchableOpacity>\n\n//         <View style={styles.searchWrapper}>\n//           <TextInput\n//             style={styles.searchInput}\n//             value={searchTerm}\n//             onChangeText={handleSearch}\n//             placeholder=\"What are you looking for\"\n//             placeholderTextColor={colors.placeholder}\n//           />\n//         </View>\n\n//         <View>\n//           <TouchableOpacity style={styles.searchBtn} onPress={() => handleSearch(searchTerm)}>\n//             <Feather name=\"search\" size={24} color={COLORS.offwhite} />\n//           </TouchableOpacity>\n//         </View>\n//       </View>\n\n//       {/* Search result */}\n//       <FlatList\n//         keyExtractor={(item: ProductModelProps) => item.id}\n//         data={searchTerm === '' ? products : (searchResults.length === 0 ? products : searchResults)}\n//         renderItem={({ item }) => (\n//           <View style={styles.gridLayout}>\n//             <ProductGridCardVOne product={item} viewTypeGrid={true} />\n//           </View>\n//         )}\n//         numColumns={2}\n//         columnWrapperStyle={styles.row} // Ensure even spacing between columns\n//         contentContainerStyle={styles.flatListContent} // Padding for both sides of the list\n//       />\n//     </SafeAreaView>\n//   );\n// };\n\n// export default ProductSearchScreen;\n\n\n\n// export const styles = StyleSheet.create({\n//   gridLayout: {\n//     flex: 1,\n//     margin: 8, // Adjust the margin to space items evenly\n//   },\n//   row: {\n//     justifyContent: 'space-between', // Ensure even spacing between items\n//   },\n//   searchContainer: {\n//     flexDirection: \"row\",\n//     justifyContent: \"center\",\n//     alignContent: \"center\",\n//     marginHorizontal: SIZES.small,\n//     backgroundColor: COLORS.secondary,\n//     borderRadius: SIZES.medium,\n//     marginVertical: SIZES.medium,\n//     height: 50\n//   },\n//   searchIcon: {\n//     marginHorizontal: 10,\n//     color: COLORS.gray,\n//     marginTop: SIZES.small\n//   },\n//   searchWrapper:{ \n//     flex: 1,\n//     backgroundColor: COLORS.secondary,\n//     marginRight: SIZES.small,\n//     borderRadius: SIZES.small\n//   },\n//   searchInput: {\n//     fontFamily: \"regular\",\n//     width: \"100%\",\n//     height: \"100%\",\n//     paddingHorizontal: SIZES.small\n//   },\n//   searchBtn: {\n//     width: 50,\n//     height: \"100%\",\n//     borderRadius: SIZES.medium,\n//     justifyContent: \"center\",\n//     alignItems: \"center\",\n//     backgroundColor: COLORS.primary\n//   }\n// })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { SafeAreaView, View, TextInput, TouchableOpacity, Text, FlatList, StyleSheet, Dimensions } from 'react-native';\n// import { Feather, Ionicons } from '@expo/vector-icons';\n// import { getProducts } from '../../../api/productsApi';\n// import { useAuth } from '@/contexts/AuthContext';\n// import { COLORS, SIZES } from '@/utils/theme';\n// // import ProductListItem from './ProductListItem';\n// import { CONSTANTS } from '@/utils/constants';\n// import { ProductModelProps } from '@/models/ProductModelProps';\n// // import { useClientProduct } from '@/contexts/ClientProductContext';\n// import ProductListItem from './ProductSearchTile';\n// import ProductCardV2 from '../../library/card/ProductCardV2';\n// import { useClientProduct } from '@/contexts/ClientProductContext';\n\n// const { width } = Dimensions.get('window');\n\n\n// const ProductSearchScreen = () => {\n//   const { authState } = useAuth();\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [searchResults, setSearchResults] = useState<ProductModelProps[]>([]);\n\n//   const storeID = authState?.user ? authState.user.store_owner_id : '';\n//   const email = authState?.user ? authState.user.email : '';\n\n//   const { products } = useClientProduct();\n\n//   const handleSearch = (text: string) => {\n//     try {\n//       setSearchTerm(text);\n//       const results = products.filter((product: ProductModelProps) =>\n//         product.name.toLowerCase().includes(text.toLowerCase())\n//       );\n//       setSearchResults(results);\n//     } catch (error) {\n//       console.log(\"Failed to get products\", error);\n//     }\n//   };\n\n//   return (\n//     <SafeAreaView style={{ flex: 1 }}>\n//       <View style={styles.searchContainer}>\n//         <TouchableOpacity>\n//           <Ionicons \n//             name='camera-outline' \n//             size={SIZES.xLarge} \n//             style={styles.searchIcon}\n//           />\n//         </TouchableOpacity>\n\n//         <View style={styles.searchWrapper}>\n//           <TextInput \n//             style={styles.searchInput} \n//             value={searchTerm}\n//             onChangeText={handleSearch}\n//             placeholder='What are you looking for'\n//           />\n//         </View>\n\n//         <View>\n//           <TouchableOpacity style={styles.searchBtn} onPress={() => handleSearch(searchTerm)}>\n//             <Feather name='search' size={24} color={COLORS.offwhite}/>\n//           </TouchableOpacity>\n//         </View>\n//       </View>\n\n//       {/* Search result */}\n//       {searchTerm === '' ? (\n//         <FlatList\n//           keyExtractor={(item: ProductModelProps) => item.id}\n//           data={products}\n//           // renderItem={({ item }) => <ProductListItem {...item} />}\n//           renderItem={({ item }) => (\n          \n//             <View style={styles.gridLayout}>\n//           <ProductCardV2 {...item} />\n//           </View>\n\n//           )}\n//           contentContainerStyle={{ marginHorizontal: 12 }}\n//         />\n//       ) : (\n//         <FlatList\n//           keyExtractor={(item: ProductModelProps) => item.id}\n//           data={searchResults.length === 0 ? products : searchResults}\n//           // renderItem={({ item }) => <ProductListItem {...item} />}\n//           renderItem={({ item }) => (\n          \n//             <View style={styles.gridLayout}>\n//           <ProductCardV2 {...item} />\n//           </View>\n\n//           )}\n//           contentContainerStyle={{ marginHorizontal: 12 }}\n//         />\n//       )}\n//     </SafeAreaView>\n//   );\n// };\n\n// export default ProductSearchScreen;\n\n// export const styles = StyleSheet.create({\n//   gridLayout: {\n//     width: (width / 2) - 18, // Adjust the width to leave space for margins\n//     marginBottom: 12,\n//   },\n//     searchContainer: {\n//         flexDirection: \"row\",\n//         justifyContent: \"center\",\n//         alignContent: \"center\",\n//         marginHorizontal: SIZES.small,\n//         backgroundColor: COLORS.secondary,\n//         borderRadius: SIZES.medium,\n//         marginVertical: SIZES.medium,\n//         height: 50\n\n//     },\n//     searchIcon: {\n//         marginHorizontal: 10,\n//         color: COLORS.gray,\n//         marginTop: SIZES.small\n//     },\n//     searchWrapper:{ \n//         flex: 1,\n//         backgroundColor: COLORS.secondary,\n//         marginRight: SIZES.small,\n//         borderRadius: SIZES.small\n//     },\n//     searchInput: {\n//         fontFamily: \"regular\",\n//         width: \"100%\",\n//         height: \"100%\",\n//         paddingHorizontal: SIZES.small\n//     },\n//     searchBtn: {\n//         width: 50,\n//         height: \"100%\",\n//         borderRadius: SIZES.medium,\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//         backgroundColor: COLORS.primary\n//     }\n// })\n","import { useClientStore } from '@/contexts/ClientStoreContext'\nimport { COLORS, SIZES } from '@/utils/theme'\nimport { StyleSheet, Text, View } from 'react-native'\n\nconst TopSectionHeaderV1 = () => {\n  const { store } = useClientStore()\n  // const { data: store } = useFetchObject<StoreModelProps>(() => getStore(CONSTANTS.store_id));\n  // const { data: store } = useFetchObject<StoreProps>(() => getStore(authState?.user?.id));\n\n  return (\n    <View style={styles.container}>\n        <Text style={styles.line1}>{store?.store_name}</Text>\n        <Text style={[styles.line2, { marginTop: 0, color: COLORS.black }]}>We Build Apps</Text>\n    </View>\n  )\n}\n\n\nconst TopSectionHeaderV2 = () => {\n    return (\n      <View style={styles.container}>\n          <Text style={[styles.welcomeTxtStyle, { marginTop: 0, color: COLORS.black }]}>Apps For</Text>\n          <Text style={[styles.welcomeTxtStyle, { marginTop: 0, color: COLORS.primary }]}>Mankind</Text>\n      </View>\n    )\n  }\n\n  \n  const TopSectionHeaderV3 = () => {\n    return (\n      <View style={styles.container}>\n          <Text style={[styles.welcomeTxtStyle, { marginTop: 0, color: COLORS.black }]}>Apps For</Text>\n          <Text style={[styles.welcomeTxtStyle, { marginTop: 0, color: COLORS.primary }]}>Mankind</Text>\n      </View>\n    )\n  }\n\n  \n\n  export { TopSectionHeaderV1, TopSectionHeaderV2, TopSectionHeaderV3 };\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"100%\",\n        marginLeft: 15\n      },\n      line1: {\n        marginTop: 0, \n        color: COLORS.gray , \n        fontSize: 14\n      }, \n      line2: {\n        marginTop: 0, \n        color: COLORS.black , \n        fontSize: 33,\n        fontWeight: 700\n      },\n      line3: {\n        marginTop: 0, \n        color: COLORS.black , \n        fontSize: 14\n      },\n      welcomeTxtStyle: {\n        fontFamily: \"bold\",\n        fontSize: SIZES.xxLarge -7, // Example value, replace with your own\n        marginTop: 0, // Example value, replace with your own\n        color:  '#000', // Use provided color or fallback to black if not provided\n          marginHorizontal: 12\n      },\n})","import React, { FC, FunctionComponent, useRef } from 'react';\nimport { Animated, Dimensions, FlatList, Image, StyleSheet, View } from 'react-native';\nimport { CONSTANTS } from '@/utils/constants';\n\nimport { useClientStore } from '@/contexts/ClientStoreContext';\n\n// const images: string[] = [\n//   'https://appsformankind-assets.s3.amazonaws.com/Collections/Furniture/Furniture_1.jpg',\n//   'https://appsformankind-assets.s3.amazonaws.com/Collections/Furniture/Furniture_3.jpg',\n//   'https://appsformankind-assets.s3.amazonaws.com/Collections/Furniture/Furniture_4.jpg',\n// ];\n\nconst { width } = Dimensions.get('screen');\n\nconst Carousel: FunctionComponent = () => {\n  const animatedValue = useRef(new Animated.Value(0)).current;\n  // const { data: mankindStore } = useFetchObject<StoreModelProps>(() => getStore(CONSTANTS.store_id));\n  // const { data: store } = useFetchObject<StoreProps>(() => getStore(authState?.user?.id));\n\n  const { store : mankindStore } = useClientStore()\n  const storeImages: string[] = [\n    mankindStore?.images.about_object_image ?? CONSTANTS.holderCarouselImageOne,\n    mankindStore?.images.doubleImageHero_left_image ?? CONSTANTS.holderCarouselImageTwo,\n    mankindStore?.images.profile_image ?? CONSTANTS.holderCarouselImageThree\n  ]\n\n  return (\n    <View style={style.container}>\n      <View style={style.topContainer}>  \n        <Animated.FlatList\n          data={storeImages}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          onScroll={Animated.event(\n            [{ nativeEvent: { contentOffset: { x: animatedValue } } }],\n            { useNativeDriver: false },\n          )}\n          pagingEnabled={true}\n          keyExtractor={(_, index : any) => index}\n          renderItem={({ item }) => {\n            return (\n              <View style={style.imageContainer}>\n                <Image style={style.image} source={{ uri: item ? item : CONSTANTS.holderImage }} />\n              </View>\n            );\n          }}\n        />\n      </View>\n      <View style={style.bottomContainer}>\n        <FlatList\n          horizontal\n          data={storeImages}\n          keyExtractor={(_, index: any) => index}\n          renderItem={({ index }) => {\n            const inputRange = [\n              (index - 1) * width,\n              index * width,\n              (index + 1) * width,\n            ];\n            //  [ middle none selected color , selected color, none selected color  ]\n            const colorOutputRange = ['#000', '#fff', '#000'];\n            const scaleOutputRange = [1, 2, 1];\n            const dotScale = animatedValue.interpolate({\n              inputRange,\n              outputRange: scaleOutputRange,\n              extrapolate: 'clamp',\n            });\n            const color = animatedValue.interpolate({\n              inputRange,\n              outputRange: colorOutputRange,\n              extrapolate: 'clamp',\n            });\n            return (\n              <View  style={[style.dotContainer, { borderStartColor:  'clear'}]}>\n\n                <PagingDot color={color} scale={dotScale} />\n               \n\n              </View>\n            );\n          }}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst PagingDot: FC<{ scale: any, color: any }> = ({ scale, color }) => {\n  return (\n    <Animated.View\n      style={[style.pagingDot, { backgroundColor: color, transform: [{ scale }] }]}\n    />\n  );\n};\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 3,\n  },\n  topContainer: {\n    flex: 2,\n  },\n  bottomContainer: {\n    flex: 1,\n    width,\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    position: 'absolute', \n   bottom: 10\n  },\n  imageContainer: {\n    justifyContent: 'flex-end',\n    // paddingBottom: 40,\n    alignItems: 'center',\n    width,\n  },\n  image: {\n    width: '92%',\n    height: 220,\n    borderRadius: 15,\n  },\n  pagingDot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7,\n    borderWidth: 2,\n    // borderColor: \"#000\",\n  },\n  dotContainer: {\n   width: 30,\n   padding: 10,\n  \n  },\n});\n\nexport default Carousel;\n\n\n","// import register from \"@/app/(auth)/register\";\n\nexport const ROUTES = {\n    onboarding_Page: \"/onboarding\",\n    login: \"/login\",\n    register: \"/register\",\n    products: \"/products\"\n\n\n}","import { Pressable, StyleSheet, Text, TouchableOpacity, View } from 'react-native'\nimport { COLORS, SIZES } from '@/utils/theme'\nimport { Ionicons } from \"@expo/vector-icons\"\nimport { Link } from 'expo-router'\nimport { useClientStore } from '@/contexts/ClientStoreContext'\nimport { ROUTES } from '@/utils/Routes'\nimport { useTheme } from '@/contexts/ThemeContext'\n\nconst SectionHeader = () => {\n    const { store } = useClientStore()\n    const { colors } = useTheme()\n\n    const styles = StyleSheet.create({\n        container: {\n            marginTop: SIZES.medium,\n            // marginBottom: SIZES.xSmall,\n            marginHorizontal: 12,\n        },\n        header: {\n            flexDirection: \"row\",\n            justifyContent: \"space-between\"\n    \n        },\n        headerTitle: {\n           fontWeight: 'bold',\n            fontSize: SIZES.xLarge -2,\n            color: colors.cardText\n        }\n    })\n    \n    \n    \n  return (\n    <View style={styles.container}>\n        <View style={styles.header}>\n            <Text style={styles.headerTitle}>{store?.store_type ?? \"\"}</Text>\n            <Link href={ROUTES.products as never} asChild>\n            <TouchableOpacity>\n            {/* <TouchableOpacity onPress={() => navigation.navigate(\"ProductDetails\", { item })}> */}\n                    <Ionicons name='grid' size={SIZES.xLarge} color={COLORS.primary}/>\n            </TouchableOpacity>\n            </Link>\n        </View>\n   \n    </View>\n  )\n}\n\nexport default SectionHeader\n\n","import React from \"react\";\nimport {\n  View,\n  Text,\n  Image,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  StyleSheet,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { AWS_HOLDER_IMAGE } from \"@/utils/api\";\n// import Colors from \"@/constants/Colors\";\n// import { COLORS } from \"@/utils/theme\";\n// import { useAuth } from \"@/contexts/AuthContext\";\n\nconst SearchBarVOne = () => {\n  return (\n    <View>\n    <View style={styles.container}>\n      <View style={styles.searchSection}>\n        <TextInput\n          style={styles.searchInput}\n          placeholder=\"Search keywords\"\n          placeholderTextColor=\"#A0A0A0\"\n        />\n      </View>\n\n      <View style={styles.filterSection}>\n        <TouchableOpacity>\n          <Ionicons\n            name=\"options-outline\"\n            size={24}\n            color=\"black\"\n            style={styles.filterIcon}\n          />\n        </TouchableOpacity>\n      </View>\n\n      </View>\n    </View>\n  );\n};\n\nexport default SearchBarVOne;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n  },\n\n  talentCount: {\n    fontSize: 14,\n    color: \"#A0A0A0\",\n    marginBottom: 20,\n  },\n  searchSection: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 20,\n    // backgroundColor: \"#transparent\",\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12,\n    width: \"80%\",\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: \"#000\",\n  },\n  filterSection: {\n    // marginLeft: 10,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 20,\n    marginLeft: 15,\n    // backgroundColor: \"#FFFFFF\",\n    // backgroundColor: \"#transparent\",\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12,\n  },\n  filterIcon: {\n    paddingLeft: 3,\n    paddingRight: 3,\n    // marginLeft: 10,\n    // flexDirection: \"row\",\n    // alignItems: \"center\",\n    // marginBottom: 20,\n    // backgroundColor: \"#FFFFFF\",\n    // borderRadius: 10,\n    // paddingHorizontal: 10,\n    // paddingVertical: 12,\n  },\n\n  arrow: {\n    marginLeft: 10,\n    marginTop: 3,\n  },\n});\n","import {\n  ActivityIndicator,\n  FlatList,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n} from \"react-native\";\nimport React from \"react\";\nimport { useAuth } from \"../../../contexts/AuthContext\";\nimport { COLORS, SIZES } from \"@/utils/theme\";\nimport { ProductModelProps } from \"@/models/ProductModelProps\";\nimport { useClientProduct } from \"@/contexts/ClientProductContext\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\n\nexport interface ClientStateProps {\n  client: boolean;\n  card: React.FC<{ product: ProductModelProps }> // Type to dynamically accept a card component with product prop\n}\n\nconst ProductRow: React.FC<ClientStateProps> = (props) => {\n  const { authState } = useAuth();\n  const { colors } = useTheme();\n  const email = authState?.user?.email || '';\n  const { products, selectProduct, isLoading, error } = useClientProduct();\n\n  const handleProductSelect = (product: ProductModelProps) => {\n    selectProduct(product);\n  };\n\n  const styles = createStyles(colors); // Dynamically generate styles based on theme colors\n\n  return (\n    <View style={styles.container}>\n      {isLoading ? (\n        <ActivityIndicator size=\"large\" color={COLORS.primary} />\n      ) : error ? (\n        <View style={styles.errorContainer}>\n          <Text style={styles.errorText}>Error Loading Data: {error}</Text>\n        </View>\n      ) : (\n        <>\n          <FlatList\n            keyExtractor={(item: ProductModelProps) => item.id}\n            data={products}\n            renderItem={({ item }) => (\n              <TouchableOpacity onPress={() => handleProductSelect(item)}>\n                {/* Use the dynamic card component passed via props */}\n                <props.card product={item} />\n              </TouchableOpacity>\n            )}\n            horizontal\n            contentContainerStyle={{ columnGap: SIZES.medium }}\n          />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default ProductRow;\n\nconst createStyles = (colors: any) =>\n  StyleSheet.create({\n    container: {\n      marginTop: SIZES.medium,\n      marginLeft: 12,\n    },\n    errorContainer: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    errorText: {\n      color: COLORS.red,\n      fontSize: SIZES.medium,\n    },\n  });\n\n\n\n\n\n\n\n\n\n\n\n// import {\n//   ActivityIndicator,\n//   FlatList,\n//   StyleSheet,\n//   Text,\n//   View,\n//   TouchableOpacity,\n// } from \"react-native\";\n// import React from \"react\";\n// import { useAuth } from \"../../../contexts/AuthContext\";\n// import { COLORS, SIZES } from \"@/utils/theme\";\n// import ProductGridCardVOne from \"@/components/card/product/ProductGridCardVOne\";\n// import { ProductModelProps } from \"@/models/ProductModelProps\";\n// // import { useClientProduct } from \"@/contexts/ClientProductContext\";\n// import { CONSTANTS } from \"@/utils/constants\";\n// import { useClientProduct } from \"@/contexts/ClientProductContext\";\n// import { useTheme } from \"@/contexts/ThemeContext\";\n// import ProductGridCardVOneVTwo from \"./ProductGridCardVOneVTwo\";\n\n// export interface ClientStateProps {\n//   client: boolean;\n//   card: ProductModelProps\n//   // storeID: string\n// }\n\n// const ProductRow: React.FC<ClientStateProps> = (props) => {\n//   const { authState } = useAuth();\n//   const { colors } = useTheme();\n//   //const storeID = props.storeID // client ? authState?.user?.store_owner_id || '' : CONSTANTS.store_id;\n//   const email = authState?.user?.email || '';\n//   const { products, selectedProduct, selectProduct, isLoading, error } = useClientProduct();\n\n//   const handleProductSelect = (product: ProductModelProps) => {\n//     selectProduct(product);\n//   };\n\n//   const styles = createStyles(colors); // Dynamically generate styles based on theme colors\n\n//   return (\n//     <View style={styles.container}>\n//       {isLoading ? (\n//         <ActivityIndicator size=\"large\" color={COLORS.primary} />\n//       ) : error ? (\n//         <View style={styles.errorContainer}>\n//           <Text style={styles.errorText}>Error Loading Data: {error}</Text>\n//         </View>\n//       ) : (\n//         <>\n//           <FlatList\n//             keyExtractor={(item: ProductModelProps) => item.id}\n//             data={products}\n//             renderItem={({ item }) => (\n//               // <TouchableOpacity onPress={() => handleProductSelect(item)}>\n//               // <ProductGridCardVOne product={item} viewTypeGrid={false} /> // true is false - fix\n//               <ProductGridCardVOneVTwo product={item}  /> // true is false - fix\n//               // </TouchableOpacity>\n//             )}\n//             horizontal\n//             contentContainerStyle={{ columnGap: SIZES.medium }}\n//           />\n//           {/* {selectedProduct && (\n//             <View style={styles.selectedProductContainer}>\n//               <Text style={styles.selectedProductText}>\n//                 Selected Product: {selectedProduct.name}\n//               </Text>\n//             </View>\n//           )} */}\n//         </>\n//       )}\n//     </View>\n//   );\n// };\n\n// export default ProductRow;\n\n// const createStyles = (colors: any) => StyleSheet.create({\n//   container: {\n//     marginTop: SIZES.medium,\n//     marginLeft: 12,\n//   },\n//   errorContainer: {\n//     justifyContent: 'center',\n//     alignItems: 'center',\n//   },\n//   errorText: {\n//     color: COLORS.red,\n//     fontSize: SIZES.medium,\n//   },\n//   selectedProductContainer: {\n//     marginTop: SIZES.medium,\n//     padding: SIZES.medium,\n//     backgroundColor: COLORS.gray2,\n//     borderRadius: SIZES.small,\n//   },\n//   selectedProductText: {\n//     fontSize: SIZES.large,\n//     fontWeight: 'bold',\n//   },\n// });\n","import React, { FC } from 'react'\nimport { TouchableOpacity, Text, View , ScrollView } from 'react-native'\n// import { SafeAreaView } from 'react-native-safe-area-context'\nimport { StyleSheet } from \"react-native\";\n// import { COLORS, SIZES } from \"../utils/theme\";\n\n\nimport { COLORS, SIZES } from '@/utils/theme';\nimport { TopSectionHeaderV1 } from '@/pages/tabs/home/TopSectionHeader';\nimport Carousel from '@/pages/tabs/home/Carousel';\nimport SectionHeader from '@/pages/tabs/home/Headings';\n// import { useClientStore } from '@/contexts/ClientStoreContext';\n// import SearchBar from '../search/SearchBar';\nimport SearchBarVOne from '../search/SearchBarVOne';\nimport ProductRow from '../card/product/ProductRow';\nimport ProductGridCardVOneVTwo, { ProductHScrollCardVOne } from '../card/product/ProductHScrollCardVOne';\n// import ProductGridCardVOneVTwo from '../card/product/ProductGridCardVOneVTwo';\n\n\nconst HomeDesignOne = () => {\n    // const { store } = useClientStore()\n\n    return (\n \n        <ScrollView \n          showsVerticalScrollIndicator={false} \n          style={{\n            backgroundColor: 'white',\n            paddingTop: 10\n\n            \n          }}>\n            <TopSectionHeaderV1 />\n            <SearchBarVOne />\n            <Carousel />\n            <SectionHeader /> \n           <ProductRow client={false} card={ProductHScrollCardVOne} />\n           <View style={{paddingBottom: 200}}></View>\n\n        </ScrollView>\n  \n\n  )\n}\n\n\nexport default HomeDesignOne \n\n\n\nconst styles = StyleSheet.create({\n  textStyle: {\n      fontFamily: \"bold\",\n      fontSize: 40\n  },\n  appBarWrapper: {\n      marginHorizontal: 22,\n      marginTop: SIZES.small\n  },\n  appBar: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n  },\n  location: {\n      fontFamily: \"semibold\",\n      fontSize: SIZES.medium,\n      color: COLORS.gray\n  },\n  cartCount: {\n      position: \"absolute\",\n      bottom: 16,\n      width: 16,\n      height: 16,\n      borderRadius: 8,\n      alignItems: \"center\",\n      backgroundColor: \"green\",\n      justifyContent: \"center\",\n      zIndex: 999\n  },\n  cartNumber: {\n      fontFamily: \"regular\",\n      fontWeight: \"600\",\n      fontSize: 10,\n      color: COLORS.lightWhite\n  }\n\n})\n// function useClientStore(): { store: any; } {\n//     throw new Error('Function not implemented.');\n// }\n\n","import React, { FC } from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n} from \"react-native\";\nimport { Feather } from \"@expo/vector-icons\";\nimport { COLORS } from \"@/utils/theme\";\nimport { useRouter, Href } from \"expo-router\";\n\ninterface SearchBarVOneButtonProps {\n  path: Href;  // Update the type to Href\n}\n\nconst SearchBarVOneButton: FC<SearchBarVOneButtonProps> = ({ path }) => {\n  const router = useRouter();\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity\n        onPress={() => { router.push(path); }}  // Use the correctly typed path\n        style={styles.searchSection}\n      >\n        <View style={styles.searchInput}>\n          <Text style={{ color: COLORS.gray }}>Search keywords</Text>\n        </View>\n      </TouchableOpacity>\n\n      <View style={styles.filterSection}>\n        <TouchableOpacity onPress={() => { router.push(\"/search\" as never); }}>\n          <Feather name=\"search\" size={24} style={styles.searchIcon} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default SearchBarVOneButton;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n  },\n  searchIcon: {\n    marginHorizontal: 10,\n    color: COLORS.gray,\n  },\n  searchSection: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12,\n    width: \"80%\",\n  },\n  searchInput: {\n    flex: 1,\n    fontSize: 16,\n    color: \"#000\",\n  },\n  filterSection: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginLeft: 15,\n    borderColor: \"gray\",\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 12,\n  },\n});\n","import React, { FC, useState } from \"react\";\nimport { View, Text, StyleSheet, TouchableOpacity, Pressable, Dimensions, Image } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useClientStore } from \"@/contexts/ClientStoreContext\";\nimport { View as MotiView } from \"moti\";\nimport { router } from \"expo-router\";\nimport { COLORS } from \"@/utils/theme\";\nimport { useClientProduct } from \"@/contexts/ClientProductContext\";\nimport { ProductModelProps } from \"@/models/ProductModelProps\";\nimport SearchBarVOneButton from \"../search/SearchBarVOneButton\";\nimport { ROUTES } from \"@/utils/Routes\";\nimport { useTheme } from \"@/contexts/ThemeContext\"\n\nconst { width } = Dimensions.get(\"window\");\n\ninterface TopHomeSeactionProps {\n  product_1_Id: string;\n  product_2_Id: string;\n  product_3_Id: string;\n  product_4_Id: string;\n  product_1_Name: string;\n  product_2_Name: string;\n  product_3_Name: string;\n  product_4_Name: string;\n}\n\nconst TopHomeSeaction: FC<TopHomeSeactionProps> = (props) => {\n  const { store } = useClientStore();\n  const { colors } = useTheme();\n  const { selectProduct, products } = useClientProduct(); // Get `selectProduct` from context\n\n  const [isMenuVisible, setIsMenuVisible] = useState(true);\n\n  // Toggle menu visibility\n  const handleMenuPress = () => {\n    setIsMenuVisible((prev) => !prev);\n  };\n\n\n\n// Handle selecting a product and navigate\nconst handleProductSelect = (productId: string) => {\n  const selected = products.find((product) => product.id === productId); // Find the product by its ID\n  if (selected) {\n    selectProduct(selected); // Select the product\n    // Navigate to product details using the correct string format\n    router.push(`/products/${productId}` as never); // Navigate to product details\n  }\n};\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.cardBackground,\n    padding: 20,\n  },\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  headerText: {\n    fontSize: 14,\n    color: colors.cardText,\n  },\n  menuIcon: {\n    paddingVertical: 10,\n  },\n  titleContainer: {\n    marginTop: 20,\n  },\n  mainTitle: {\n    fontSize: 48,\n    fontWeight: \"bold\",\n    color: colors.cardText,\n    lineHeight: 50,\n  },\n  subTitle: {\n    fontSize: 48,\n    fontWeight: \"300\",\n    color: colors.cardText,\n    lineHeight: 50,\n  },\n  productList: {\n    position: \"absolute\",\n    top: 60,\n    right: 20,\n    alignItems: \"flex-end\",\n  },\n  productItem: {\n    fontSize: 16,\n    color: colors.cardText,\n    marginBottom: 5,\n  },\n  image: {\n    width: width - 40,\n    height: 300,\n    borderRadius: 10,\n    marginTop: 20,\n  },\n  description: {\n    fontSize: 16,\n    color: colors.cardText,\n    textAlign: \"left\",\n    marginTop: 20,\n  },\n  shopNowButton: {\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    backgroundColor: colors.buttonBackground,\n    borderRadius: 25,\n    shadowColor: colors.buttonShadow,\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 5,\n    elevation: 8,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"40%\",\n  },\n  shopNowButtonText: {\n    color: colors.buttonText, // \"white\", // text\n    fontWeight: \"bold\",\n    fontSize: 18,\n    letterSpacing: 1,\n    textTransform: \"uppercase\",\n  },\n});\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <MotiView\n          from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n          animate={{ opacity: 1, translateY: 0, scale: 1 }}\n          transition={{ type: \"timing\", duration: 600, delay: 1200 }}\n        >\n          <Text style={styles.headerText}>Welcome to</Text>\n        </MotiView>\n        <MotiView\n          from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n          animate={{ opacity: 1, translateY: 0, scale: 1 }}\n          transition={{ type: \"timing\", duration: 600, delay: 1300 }}\n        >\n          <TouchableOpacity style={styles.menuIcon} onPress={handleMenuPress}>\n            <Ionicons name=\"menu-outline\" size={24} color={colors.tint}/>\n          </TouchableOpacity>\n        </MotiView>\n      </View>\n\n      {/* Title */}\n      <View style={styles.titleContainer}>\n        <Text style={styles.mainTitle}>Jays</Text>\n        <MotiView\n          from={{ opacity: 0, translateY: -10 }}\n          animate={{ opacity: 1, translateY: 0 }}\n          transition={{ type: \"timing\", duration: 600, delay: 1400 }}\n        >\n          <Text style={styles.subTitle}>Sea Moss</Text>\n        </MotiView>\n      </View>\n\n      {/* Product List */}\n      <View style={styles.productList}>\n        {isMenuVisible && (\n          <>\n            <MotiView\n              from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n              animate={{ opacity: 1, translateY: 0, scale: 1 }}\n              transition={{ type: \"timing\", duration: 600, delay: 600 }}\n            >\n              <Pressable onPress={() => router.push(\"/products\" as never)}>\n                <Text style={styles.productItem}>All Products</Text>\n              </Pressable>\n            </MotiView>\n            <MotiView\n              from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n              animate={{ opacity: 1, translateY: 0, scale: 1 }}\n              transition={{ type: \"timing\", duration: 600, delay: 700 }}\n            >\n              <Pressable onPress={() => handleProductSelect(props.product_1_Id)}>\n                <Text style={styles.productItem}>{props.product_1_Name}</Text>\n              </Pressable>\n            </MotiView>\n            <MotiView\n              from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n              animate={{ opacity: 1, translateY: 0, scale: 1 }}\n              transition={{ type: \"timing\", duration: 600, delay: 800 }}\n            >\n              <Pressable onPress={() => handleProductSelect(props.product_2_Id)}>\n                <Text style={styles.productItem}>{props.product_2_Name}</Text>\n              </Pressable>\n            </MotiView>\n            <MotiView\n              from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n              animate={{ opacity: 1, translateY: 0, scale: 1 }}\n              transition={{ type: \"timing\", duration: 600, delay: 900 }}\n            >\n              <Pressable onPress={() => handleProductSelect(props.product_3_Id)}>\n                <Text style={styles.productItem}>{props.product_3_Name}</Text>\n              </Pressable>\n            </MotiView>\n            <MotiView\n              from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n              animate={{ opacity: 1, translateY: 0, scale: 1 }}\n              transition={{ type: \"timing\", duration: 600, delay: 1000 }}\n            >\n              <Pressable onPress={() => handleProductSelect(props.product_4_Id)}>\n                <Text style={styles.productItem}>{props.product_4_Name}</Text>\n              </Pressable>\n            </MotiView>\n          </>\n        )}\n      </View>\n\n      {/* Image */}\n      <MotiView\n        from={{ opacity: 0, translateY: -10, scale: 0.85 }}\n        animate={{ opacity: 1, translateY: 0, scale: 1 }}\n        transition={{ type: \"timing\", duration: 600, delay: 1500 }}\n      >\n        <Image\n          source={{ uri: store?.images.welcome_image }} // Replace with your image URL\n          style={styles.image}\n          resizeMode=\"cover\"\n        />\n      </MotiView>\n\n\n   {/* Description */}\n   <MotiView\n        from={{ opacity: 0, translateX: -90, scale: 0.85 }}\n        animate={{ opacity: 1, translateX: 0, scale: 1 }}\n        transition={{ type: \"timing\", duration: 600, delay: 1500 }}\n      >\n        <Text style={styles.description}>\n          Discover the natural benefits of Sea Moss, rich in essential minerals\n          and nutrients to support your health and well-being.\n        </Text>\n      </MotiView>\n\n      {/* Shop Button */}\n      <MotiView\n        from={{ opacity: 0, translateX: -90, scale: 0.85 }}\n        animate={{ opacity: 1, translateX: 0, scale: 1 }}\n        transition={{ type: \"timing\", duration: 600, delay: 1600 }}\n      >\n        <View style={{ paddingTop: 20 }}>\n          <TouchableOpacity style={styles.shopNowButton} onPress={() => router.push(ROUTES.products as never)}>\n            <Text style={styles.shopNowButtonText}>Shop</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={{ paddingTop: 20 }}>\n          <SearchBarVOneButton path={ROUTES.products as never} />\n        </View>\n      </MotiView>\n\n\n    </View>\n  );\n};\n\nexport default TopHomeSeaction;\n\n\n// // import React, { FC, useState } from \"react\";\n// // import {\n// //   View,\n// //   Text,\n// //   StyleSheet,\n// //   Image,\n// //   TouchableOpacity,\n// //   Dimensions,\n// //   Pressable,\n// // } from \"react-native\";\n// // import { Ionicons } from \"@expo/vector-icons\";\n// // import { useClientStore } from \"@/contexts/ClientStoreContext\";\n// // import { View as MotiView } from \"moti\";\n// // import { COLORS } from \"@/utils/theme\";\n// // import { router } from \"expo-router\";\n// // import SearchBarVOneButton from \"../search/SearchBarVOneButton\";\n// // import { ROUTES } from \"@/utils/Routes\";\n\n// // const { width } = Dimensions.get(\"window\");\n\n// // interface TopHomeSeactionProps {\n// //   product_1_Id: string;\n// //   product_2_Id: string;\n// //   product_3_Id: string;\n// //   product_4_Id: string;\n// //   product_1_Name: string;\n// //   product_2_Name: string;\n// //   product_3_Name: string;\n// //   product_4_Name: string;\n// // }\n\n// // const TopHomeSeaction: FC<TopHomeSeactionProps> = (props) => {\n// //   const { store } = useClientStore();\n// //   const [isMenuVisible, setIsMenuVisible] = useState(true);\n\n// //   const handleMenuPress = () => {\n// //     setIsMenuVisible((prev) => !prev); // Toggle menu visibility\n// //   };\n\n// //   return (\n// //     <View style={styles.container}>\n// //       {/* Header */}\n// //       <View style={styles.header}>\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n// //           animate={{ opacity: 1, translateY: 0, scale: 1 }}\n// //           transition={{ type: \"timing\", duration: 600, delay: 1200 }}\n// //         >\n// //           <Text style={styles.headerText}>Welcome to</Text>\n// //         </MotiView>\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n// //           animate={{ opacity: 1, translateY: 0, scale: 1 }}\n// //           transition={{ type: \"timing\", duration: 600, delay: 1300 }}\n// //         >\n// //           <TouchableOpacity style={styles.menuIcon} onPress={handleMenuPress}>\n// //             <Ionicons name=\"menu-outline\" size={24} color=\"black\" />\n// //           </TouchableOpacity>\n// //         </MotiView>\n// //       </View>\n\n// //       {/* Title */}\n// //       <View style={styles.titleContainer}>\n// //         <Text style={styles.mainTitle}>Jays</Text>\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: -10 }}\n// //           animate={{ opacity: 1, translateY: 0 }}\n// //           transition={{ type: \"timing\", duration: 600, delay: 1400 }}\n// //         >\n// //           <Text style={styles.subTitle}>Sea Moss</Text>\n// //         </MotiView>\n// //       </View>\n\n// //       {/* Product List */}\n// //       <View style={styles.productList}>\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n// //           animate={{ opacity: isMenuVisible ? 1 : 0, translateY: isMenuVisible ? 0 : -50, scale: 1 }}\n// //           transition={{\n// //             type: \"timing\",\n// //             duration: isMenuVisible ? 600 : 0,\n// //             delay: isMenuVisible ? 600 : 0,\n// //           }}\n// //         >\n// //           <Pressable onPress={() => router.push(\"/products\" as never)}>\n// //             <Text style={styles.productItem}>All Products</Text>\n// //           </Pressable>\n// //         </MotiView>\n\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n// //           animate={{ opacity: isMenuVisible ? 1 : 0, translateY: isMenuVisible ? 0 : -50, scale: 1 }}\n// //           transition={{\n// //             type: \"timing\",\n// //             duration: isMenuVisible ? 600 : 0,\n// //             delay: isMenuVisible ? 700 : 0,\n// //           }}\n// //         >\n// //           <Pressable onPress={() => router.push(`/products/${props.product_1_Id}` as never)}>\n// //             <Text style={styles.productItem}>{props.product_1_Name}</Text>\n// //           </Pressable>\n// //         </MotiView>\n\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n// //           animate={{ opacity: isMenuVisible ? 1 : 0, translateY: isMenuVisible ? 0 : -50, scale: 1 }}\n// //           transition={{\n// //             type: \"timing\",\n// //             duration: isMenuVisible ? 600 : 0,\n// //             delay: isMenuVisible ? 800 : 0,\n// //           }}\n// //         >\n// //           <Pressable onPress={() => router.push(`/products/${props.product_2_Id}` as never)}>\n// //             <Text style={styles.productItem}>{props.product_2_Name}</Text>\n// //           </Pressable>\n// //         </MotiView>\n\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n// //           animate={{ opacity: isMenuVisible ? 1 : 0, translateY: isMenuVisible ? 0 : -50, scale: 1 }}\n// //           transition={{\n// //             type: \"timing\",\n// //             duration: isMenuVisible ? 600 : 0,\n// //             delay: isMenuVisible ? 900 : 0,\n// //           }}\n// //         >\n// //           <Pressable onPress={() => router.push(`/products/${props.product_3_Id}` as never)}>\n// //             <Text style={styles.productItem}>{props.product_3_Name}</Text>\n// //           </Pressable>\n// //         </MotiView>\n\n// //         <MotiView\n// //           from={{ opacity: 0, translateY: 50, scale: 0.85 }}\n// //           animate={{ opacity: isMenuVisible ? 1 : 0, translateY: isMenuVisible ? 0 : -50, scale: 1 }}\n// //           transition={{\n// //             type: \"timing\",\n// //             duration: isMenuVisible ? 600 : 0,\n// //             delay: isMenuVisible ? 1000 : 0,\n// //           }}\n// //         >\n// //           <Pressable onPress={() => router.push(`/products/${props.product_4_Id}` as never)}>\n// //             <Text style={styles.productItem}>{props.product_4_Name}</Text>\n// //           </Pressable>\n// //         </MotiView>\n// //       </View>\n\n// //       {/* Image */}\n// //       <MotiView\n// //         from={{ opacity: 0, translateY: -10, scale: 0.85 }}\n// //         animate={{ opacity: 1, translateY: 0, scale: 1 }}\n// //         transition={{ type: \"timing\", duration: 600, delay: 1500 }}\n// //       >\n// //         <Image\n// //           source={{ uri: store?.images.welcome_image }} // Replace with your image URL\n// //           style={styles.image}\n// //           resizeMode=\"cover\"\n// //         />\n// //       </MotiView>\n\n      // {/* Description */}\n      // <MotiView\n      //   from={{ opacity: 0, translateX: -90, scale: 0.85 }}\n      //   animate={{ opacity: 1, translateX: 0, scale: 1 }}\n      //   transition={{ type: \"timing\", duration: 600, delay: 1500 }}\n      // >\n      //   <Text style={styles.description}>\n      //     Discover the natural benefits of Sea Moss, rich in essential minerals\n      //     and nutrients to support your health and well-being.\n      //   </Text>\n      // </MotiView>\n\n      // {/* Shop Button */}\n      // <MotiView\n      //   from={{ opacity: 0, translateX: -90, scale: 0.85 }}\n      //   animate={{ opacity: 1, translateX: 0, scale: 1 }}\n      //   transition={{ type: \"timing\", duration: 600, delay: 1600 }}\n      // >\n      //   <View style={{ paddingTop: 20 }}>\n      //     <TouchableOpacity style={styles.shopNowButton} onPress={() => router.push(\"/products\" as never)}>\n      //       <Text style={styles.shopNowButtonText}>Shop</Text>\n      //     </TouchableOpacity>\n      //   </View>\n\n      //   <View style={{ paddingTop: 20 }}>\n      //     <SearchBarVOneButton path={ROUTES.products as never} />\n      //   </View>\n      // </MotiView>\n// //     </View>\n// //   );\n// // };\n\n// // const styles = StyleSheet.create({\n// //   container: {\n// //     flex: 1,\n// //     backgroundColor: \"white\",\n// //     padding: 20,\n// //   },\n// //   header: {\n// //     flexDirection: \"row\",\n// //     justifyContent: \"space-between\",\n// //     alignItems: \"center\",\n// //   },\n// //   headerText: {\n// //     fontSize: 14,\n// //     color: \"black\",\n// //   },\n// //   menuIcon: {\n// //     paddingVertical: 10,\n// //   },\n// //   titleContainer: {\n// //     marginTop: 20,\n// //   },\n// //   mainTitle: {\n// //     fontSize: 48,\n// //     fontWeight: \"bold\",\n// //     color: \"black\",\n// //     lineHeight: 50,\n// //   },\n// //   subTitle: {\n// //     fontSize: 48,\n// //     fontWeight: \"300\",\n// //     color: \"black\",\n// //     lineHeight: 50,\n// //   },\n// //   productList: {\n// //     position: \"absolute\",\n// //     top: 60,\n// //     right: 20,\n// //     alignItems: \"flex-end\",\n// //   },\n// //   productItem: {\n// //     fontSize: 16,\n// //     color: \"black\",\n// //     marginBottom: 5,\n// //   },\n// //   image: {\n// //     width: width - 40,\n// //     height: 300,\n// //     borderRadius: 10,\n// //     marginTop: 20,\n// //   },\n  // description: {\n  //   fontSize: 16,\n  //   color: \"black\",\n  //   textAlign: \"left\",\n  //   marginTop: 20,\n  // },\n  // shopNowButton: {\n  //   paddingVertical: 15,\n  //   paddingHorizontal: 30,\n  //   backgroundColor: COLORS.primary,\n  //   borderRadius: 25,\n  //   shadowColor: \"#000\",\n  //   shadowOffset: { width: 0, height: 4 },\n  //   shadowOpacity: 0.3,\n  //   shadowRadius: 5,\n  //   elevation: 8,\n  //   alignItems: \"center\",\n  //   justifyContent: \"center\",\n  //   width: \"40%\",\n  // },\n  // shopNowButtonText: {\n  //   color: \"white\",\n  //   fontWeight: \"bold\",\n  //   fontSize: 18,\n  //   letterSpacing: 1,\n  //   textTransform: \"uppercase\",\n  // },\n// // });\n\n// // export default TopHomeSeaction;\n\n\n\n","\n\n\nimport React from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Image,\n  TouchableOpacity,\n  Dimensions,\n  ScrollView,\n} from \"react-native\";\nimport { useClientStore } from \"@/contexts/ClientStoreContext\";\nimport TopHomeSeaction from \"./TopHomeSeaction\";\nimport Carousel from \"@/pages/tabs/home/Carousel\";\nimport SectionHeader from \"@/pages/tabs/home/Headings\";\nimport { AWS_HOLDER_IMAGE } from \"@/utils/api\";\nimport { router } from \"expo-router\";\nimport { ROUTES } from \"@/utils/Routes\";\nimport ProductRow from \"../card/product/ProductRow\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport { useClientProduct } from \"@/contexts/ClientProductContext\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport ProductGridCardVOneVTwo, { ProductHScrollCardVOne } from \"../card/product/ProductHScrollCardVOne\";\n// import ProductGridCardVOneVTwo from \"../card/product/ProductGridCardVOneVTwo\";\n\nconst { width } = Dimensions.get(\"window\");\n\nconst HomeDesignTwo = () => {\n  const { store } = useClientStore();\n  const { colors } = useTheme();\n  const {products} = useClientProduct()\n\n  if (products.length < 4 ){\n    return(\n      <SafeAreaView>\n      <Text>\n        Need More products to use\n      </Text>\n      </SafeAreaView>\n    )\n  }\n\n\n// card\nconst styles = StyleSheet.create({\n  card: {\n    // width: width * 0.9,\n    backgroundColor: 'transparent',\n    borderRadius: 10,\n    padding: 20,\n    alignItems: 'center',\n    shadowColor: '#000',\n    elevation: 3,\n    marginVertical: 10,\n  },\n  profileImage: {\n    width: width - 40,\n    height: 500,\n    borderRadius: 10,\n    marginBottom: 20,\n\n  },\n  healthTip: {\n    marginTop: 10,\n    fontSize: 14,\n    color: 'green',\n    fontStyle: 'italic',\n  },  \n  name: {\n    fontSize: 24,\n    fontWeight: '900',\n    textAlign: 'center',\n    marginBottom: 10,\n    color: colors.cardText\n  },\n  title: {\n    fontSize: 16,\n    color: '#6e6e6e',\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  button: {\n    // fontWeight: '900',\n    backgroundColor: '#000',\n    paddingVertical: 15,\n    paddingHorizontal: 30,\n    borderRadius: 15,\n    marginBottom: 20,\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n    color: '#6e6e6e',\n    textAlign: 'center',\n  },\n});\n\n\n  return (\n    <ScrollView\n      showsVerticalScrollIndicator={false}\n      style={{\n        backgroundColor: colors.background,\n        paddingTop: 30,\n        paddingBottom: 200,\n      }}\n    >\n      <TopHomeSeaction product_1_Id={products[0].id} product_2_Id={products[1].id} product_3_Id={products[2].id} product_4_Id={products[3].id} product_1_Name={products[0].name} product_2_Name={products[1].name} product_3_Name={products[2].name} product_4_Name={products[3].name} />\n      <SectionHeader />\n      <ProductRow client={true} card={ProductHScrollCardVOne} />\n      <View style={styles.card}>\n        <Image\n          source={{ uri: store?.images.welcome_image ?? AWS_HOLDER_IMAGE }} \n          style={styles.profileImage}\n        />\n        {/* <Text style={styles.name}>JACOB JAMES</Text> */}\n        <Text style={styles.name}>YOUR NAME HERE</Text>\n        <Text style={styles.title}>\n          Founder of {store?.store_name ?? \"\"} Co.\n        </Text>\n        <TouchableOpacity\n          style={styles.button}\n          onPress={() => router.push(ROUTES.products as never)}\n        >\n          <Text style={styles.buttonText}>EXPLORE PRODUCTS</Text>\n        </TouchableOpacity>\n        <Text style={{ padding: 10, fontSize: 40, paddingBottom: 30 }}> 🌿</Text>\n        <Text style={styles.description}>\n          Leading the way in natural wellness with a focus on the incredible\n          benefits of sea moss...\n        </Text>\n        {/* <Text style={styles.healthTip}>\n          🌿 Health Tip: Sea Moss is packed with 92 essential minerals that can support overall wellness, improve skin health, and boost your immune system. Add it to your smoothies or meals for a natural health boost!\n        </Text> */}\n      </View>\n\n      <Carousel />\n\n      <View style={{ paddingTop: 40 }} />\n    </ScrollView>\n  );\n};\n\nexport default HomeDesignTwo;\n","// import { MankindProductModelProps } from '../models/MankindProductModelProps';\nimport { ProductModelProps } from '@/models/ProductModelProps';\nimport { TOKEN_KEY } from '../contexts/AuthContext';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { BASE_URL } from '@/utils/api';\n\n// Setup the axios instance for product API\nconst productsApi = createFetchClient(\n  BASE_URL,\n  {\n    tableName: 'prof-website-product-table',\n    showFilteredItems: 'true',\n  },\n  {\n    'Content-Type': 'application/json',\n  }\n);\n\n\n// GET ALL \nexport async function getMankindProductsApi(storeID: string, email: string) {\n  try {\n    const response = await productsApi.get('/products', {\n      params: {\n        store_id: storeID,\n        email: email,\n      },\n      headers: {\n        Authentication: TOKEN_KEY,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching mankind products:', error);\n    throw error;\n  }\n}\n\n\n// GET SINGLE ITEM\nexport async function getMankindProductApi(id: any) {\n  try {\n    const response = await productsApi.get(`/product`, {\n      params: { id },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching product:', error);\n    throw error;\n  }\n}\n\n\n// POST - Create / easy update\nexport const postMankindProductApi = async (product: ProductModelProps, storeID: string, email: string, token: string) => {\n  return await productsApi.post(`/product`, product, {\n    params: { \n      store_id: storeID,\n      email: email,\n    },\n    headers: { \n      Authentication: token,\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\n\n// UPDATE\nexport const updateMankindProductApi = async (product: ProductModelProps) => {\n  return await productsApi.put(`/product?id=${product.id}`, product);\n};\n\n// DELETE\nexport const deleteMankindProductApi = async (id: any) => {\n  return await productsApi.delete(`/product`, {\n    params: { id },\n  });\n};\n\n\n\n\n\n\n\n\n// import axios, { AxiosError } from 'axios';\n// // import { BASE_URL } from '../utils/api';\n// // import { CONSTANTS } from '../utils/constants';\n// import { MankindProductModelProps } from '../models/MankindProductModelProps';\n// import { TOKEN_KEY } from '../contexts/AuthContext';\n// import { UserProps } from '../models/UserProps';\n// import { BASE_URL } from '../utils/api';\n// import { CONSTANTS } from '../utils/constants';\n// // import { BASE_URL } from '../utils/api';\n// // import { CONSTANTS } from '../utils/constants';\n// // import { MankindProductModelProps } from '../models/MankindProductModelProps';\n\n\n//   const mankindMankindProductsApi = axios.create({\n//     baseURL: BASE_URL,\n//     headers: {\n//         Authentication: TOKEN_KEY,\n//         'Content-Type': 'application/json',\n//     },\n//     params: {\n//       store_id: CONSTANTS.store_id,\n//       // email: \"\", // user?.email ?? \"\",\n//       tableName: 'prof-website-product-table', \n//       showFilteredItems: true\n//     },\n//   });\n\n\n\n//   export const getMankindMankindProductsApi = async (storeID: string, email: string) => {\n//     return await mankindMankindProductsApi.get(`/products`, {\n//       params: { \n//         store_id: storeID, // CONSTANTS.store_id,// storeID,\n//         email: email,\n//       },\n//       headers: { Authentication: TOKEN_KEY },\n//     });\n   \n//   };\n  \n\n// export const getMankindMankindProductApi = async (id: any) => {\n//   return await mankindMankindProductsApi.get(`/product?id=${id}`);\n// };\n\n\n\n// export const postMankindMankindProductApi = async (product: MankindProductModelProps) => {\n//   return await mankindMankindProductsApi.post(`/product`, product);\n// };\n\n// export const updateMankindMankindProductApi = async (product: MankindProductModelProps) => {\n//   return await mankindMankindProductsApi.patch(`/product?id=${product.id}`, product);\n// };\n\n// export const deleteMankindMankindProductApi = async ({ id }: { id: any }) => {\n//   console.log(id);\n//   return await mankindMankindProductsApi.delete(`/product?id=${id}`, id);\n// };\n\n\n// export default mankindMankindProductsApi;\n","import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\nimport { ProductModelProps } from \"../models/ProductModelProps\";\n// import { getMankindProducts as gmP } from \"../api/mankindProductApi\";\nimport { CONSTANTS } from \"../utils/constants\";\nimport { getMankindProductsApi } from \"@/api/mankindProductApi\";\nimport { useClientStore } from \"./ClientStoreContext\";\n\ninterface ProductContextProps {\n  products: ProductModelProps[];\n  addProduct: (product: ProductModelProps) => void;\n  removeProduct: (productId: string) => void;\n  getMankindProducts: () => void;\n  selectedProduct: ProductModelProps | null;\n  selectProduct: (product: ProductModelProps) => void;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const MankindProductContext = createContext<ProductContextProps | undefined>(undefined);\n\nexport const useMankindProduct = () => {\n  const context = useContext(MankindProductContext);\n  if (!context) {\n    throw new Error(\"useMankindProduct must be used within a MankindProductProvider\");\n  }\n  return context;\n};\n\nexport const MankindProductProvider = ({ children }: { children: ReactNode }) => {\n  const [products, setProducts] = useState<ProductModelProps[]>([]);\n  const [selectedProduct, setSelectedProduct] = useState<ProductModelProps | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const {store} = useClientStore()\n  // useEffect(() => {\n  //   console.log(\"getMankindProducts()....\")\n  //   getMankindProducts(); // Initial load of products\n  // }, []);\n\n  const addProduct = (product: ProductModelProps) => {\n    setProducts((prevProducts) => [...prevProducts, product]);\n  };\n\n  const removeProduct = (productId: string) => {\n    setProducts((prevProducts) => prevProducts.filter(product => product.id !== productId));\n  };\n\n  const getMankindProducts = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const email = \"\"; // Replace with logic to get the current user's email\n      const response = await getMankindProductsApi(store?.id ?? \"\", email);\n      const fetchedProducts = response.data; // Extract the data from the  response\n      setProducts(fetchedProducts);\n    } catch (error) {\n      console.error(\"Failed to fetch mankind products:\", error);\n      setError(\"Failed to fetch products. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectProduct = (product: ProductModelProps) => {\n    setSelectedProduct(product);\n  };\n\n  return (\n    <MankindProductContext.Provider \n      value={{ \n        products, \n        addProduct, \n        removeProduct, \n        getMankindProducts, \n        selectedProduct, \n        selectProduct, \n        isLoading, \n        error \n      }}\n    >\n      {children}\n    </MankindProductContext.Provider>\n  );\n};\n","// import { MankindStoreModelProps } from '../models/MankindStoreModelProps';\nimport { StoreModelProps } from '@/models/StoreModelProps';\nimport { TOKEN_KEY } from '../contexts/AuthContext';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { BASE_URL } from '@/utils/api';\n\n// Setup the axios instance for mankindStore API\nconst mankindStoresApi = createFetchClient(\n  BASE_URL,\n  {\n    tableName: 'prof-website-mankindStore-table',\n    showFilteredItems: 'true',\n  },\n  {\n    'Content-Type': 'application/json',\n  }\n);\n\n\n// GET ALL \nexport async function getMankindStoresApi(storeID: string, email: string) {\n  try {\n    const response = await mankindStoresApi.get('/mankindStores', {\n      params: {\n        store_id: storeID,\n        email: email,\n      },\n      headers: {\n        Authentication: TOKEN_KEY,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching mankindStores:', error);\n    throw error;\n  }\n}\n\n\n// GET SINGLE ITEM\nexport async function getMankindStoreApi(id: any) {\n  try {\n    const response = await mankindStoresApi.get(`/mankindStore`, {\n      params: { id },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching mankindStore:', error);\n    throw error;\n  }\n}\n\n\n// POST - Create / easy update\nexport const postMankindStoreApi = async (mankindStore: StoreModelProps, storeID: string, email: string, token: string) => {\n  return await mankindStoresApi.post(`/mankindStore`, mankindStore, {\n    params: { \n      store_id: storeID,\n      email: email,\n    },\n    headers: { \n      Authentication: token,\n      'Content-Type': 'application/json',\n    },\n  });\n};\n\n\n// UPDATE\nexport const updateMankindStoreApi = async (mankindStore: StoreModelProps) => {\n  return await mankindStoresApi.put(`/mankindStore?id=${mankindStore.id}`, mankindStore);\n};\n\n// DELETE\nexport const deleteMankindStoreApi = async (id: any) => {\n  return await mankindStoresApi.delete(`/mankindStore`, {\n    params: { id },\n  });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // import { getUserCookie, getUserToken } from '../config/cookieUtils';\n// // import { API_ID, AWS_BASE_URL, BASE_URL } from '../utils/api';\n// import axios from 'axios';\n// import { StoreModelProps } from '../models/StoreModelProps';\n// import { BASE_URL } from '../utils/api';\n// import { CONSTANTS } from '../utils/constants';\n\n// // import { CONSTANTS } from '../utils/constants';\n\n// // const user = getUserCookie();\n// // const token = getUserToken();\n// const mankindStoresApi = axios.create({\n//   baseURL: BASE_URL,\n//   headers: {\n//     Authentication: \"token\",\n//       'Content-Type': 'application/json',\n//   },\n//   params: {\n//     id: CONSTANTS.store_id,\n//     tableName: 'prof-website-store-table', \n//     showFilteredItems: true\n\n//     // store_id: CONSTANTS.store_id,\n//     // email: \"\", // user?.email ?? \"\",\n//     // tableName: 'prof-website-mankindStore-table', \n//     // showFilteredItems: true\n//   },\n// });\n\n// export const getMankindStoreAttributesApi = async () => {\n//   const response = await mankindStoresApi.get('/stores');\n\n//   // Get the name of attributes in the API response\n//   const attributeNames = Object.keys(response.data[0]);\n\n//   return attributeNames;\n// };\n\n// // // -----------------\n// // // GET SINGLE ITEM\n// // // -----------------\n// // export const getStore = async (store: StoreModelProps) => {\n// //   const response = await storesApi.get(`/store?id=${store.id}`, {\n// //     params: {\n// //      // id: STORE_ID,\n// //       ...store // spread the properties of `store` into the params object\n// //     }\n// //   });\n// //   console.log(response);\n// //   return response.data as StoreModelProps;\n// // };\n\n\n\n\n\n// // -----------------\n// // GET SINGLE ITEM\n// // -----------------\n// export const getMankindStoreApi = async (id: any) => {\n//   console.log('Fetching Mankind store...');\n//   const response = await mankindStoresApi.get(`/store?id=${id}`);\n  \n//   const store = response.data;\n//   // console.log('Store:', response.data);\n//   // console.log('Store:', store);\n\n//   if (store === 'undefined' || !store) {\n//     return null;\n//   } else {\n//     return store;\n//   }\n// };\n\n\n\n// // export const getStore = async (): Promise<StoreProps | null> => {\n// //   try {\n// //     console.log('Fetching store...');\n// //     //   const response = await storesApi.get(`/store?id=${id}`);\n\n// //     const response = await storesApi.get(`/store`);\n// //     console.log('Store:', response.data);\n\n// //     const store: StoreProps = response.data;\n\n// //     if (!store) {\n// //       return null;\n// //     }\n\n// //     return store;\n// //   } catch (error) {\n// //     console.error('Error fetching store:', error);\n// //     return null;\n// //   }\n// // };\n\n\n// // -------------\n// // GET ITEMS\n// // -------------\n// export const getMankindStoresApi = async () => {\n//     const response = await mankindStoresApi.get('');\n//     return response.data as StoreModelProps[]; \n//   };\n  \n// // -------------\n// // POST\n// // -------------\n// export const postMankindStoreApi = async (store: StoreModelProps) => {\n//   return await mankindStoresApi.post('/store', store);\n// };\n\n// // -------------\n// // PATCH\n// // -------------\n// export const updateMankindStoreApi = async (store: any) => {\n//   return await mankindStoresApi.patch(`/store?id=${store.id}`, store);\n// };\n\n// // -------------\n// // DELETE\n// // -------------\n// export const deleteMankindStoreApi = async ({ id }: { id: any }) => {\n//   console.log(id);\n//   return await mankindStoresApi.delete(`/store?id=${id}`, id);\n//   // return await storesApi.delete(`/store/${id}`);\n//   // D_a_r_r_i_e_n H_u_n_t_l_e_y - o_w_n_e_r\n// };\n\n// export default mankindStoresApi;\n","import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { StoreModelProps } from \"../models/StoreModelProps\";\nimport { getMankindStoreApi } from \"@/api/mankindStoreApi\";\n\ninterface MankindStoreContextProps {\n  store: StoreModelProps | null;\n  addStore: (store: StoreModelProps) => void;\n  removeStore: (storeId: string) => void;\n  getMankindStore: () => void;\n  selectedStore: StoreModelProps | null;\n  selectStore: (store: StoreModelProps) => void;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst MankindStoreContext = createContext<MankindStoreContextProps | undefined>(undefined);\n\nexport const useMankindStore = () => {\n  const context = useContext(MankindStoreContext);\n  if (!context) {\n    throw new Error(\"useMankindStore must be used within a MankindStoreProvider\");\n  }\n  return context;\n};\n\nexport const MankindStoreProvider = ({ children }: { children: ReactNode }) => {\n  const { authState } = useAuth();\n  const [store, setStore] = useState<StoreModelProps | null>(null);\n  const [selectedStore, setSelectedStore] = useState<StoreModelProps | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // useEffect(() => {\n  //   if (authState?.token) {\n  //     getMankindStore(); // Initial load of the store\n  //   }\n  // }, [authState?.token]);\n\n  const addStore = (newStore: StoreModelProps) => {\n    setStore(newStore);\n  };\n\n  const removeStore = () => {\n    setStore(null);\n  };\n\n  const getMankindStore = async () => {\n   // if (!authState) return;\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const store_owner_id = authState?.user?.store_owner_id || '';\n      const response = await getMankindStoreApi(store_owner_id);\n     // const fetchedStore = response?.data ; // Assuming the API returns a single store object\n      setStore(response);\n    } catch (error: any) {\n      console.error(\"Failed to fetch mankind store:\", error.response?.data?.message || error.message);\n      setError(error.response?.data?.message || \"Failed to fetch store. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const selectStore = (store: StoreModelProps) => {\n    setSelectedStore(store);\n  };\n\n  return (\n    <MankindStoreContext.Provider \n      value={{ \n        store, \n        addStore, \n        removeStore, \n        getMankindStore, \n        selectedStore, \n        selectStore, \n        isLoading, \n        error \n      }}\n    >\n      {children}\n    </MankindStoreContext.Provider>\n  );\n};\n","import { CouponModelProps } from '../models/CouponModelProps';\nimport { TOKEN_KEY } from '../contexts/AuthContext';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { BASE_URL } from '@/utils/api';\nimport { CONSTANTS } from '@/utils/constants';\n\nconst couponTableName =  'prof-website-coupon-table'\n\n// Initialize the fetch client with the base URL and headers\nconst clientCouponsApi = createFetchClient(\n  BASE_URL, // Base URL includes the `/prod` part\n  {}, // No default parameters for now\n  { 'Content-Type': 'application/json' } // Default headers\n);\n\n// GET ALL STORES\nexport async function getClientCouponsApi(couponID: string, email: string) {\n  try {\n    const response = await clientCouponsApi.get('/coupons', {\n      params: {\n        coupon_id: couponID,\n        email: email,\n      },\n      headers: {\n        Authentication: TOKEN_KEY,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching coupons:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// GET SINGLE STORE\nexport async function getClientCouponApi(id: string) {\n  try {\n    const response = await clientCouponsApi.get('/coupon', {\n      params: {\n        id,\n        tableName: couponTableName,\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching coupon:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// POST - CREATE OR UPDATE STORE\nexport const postClientCouponApi = async (coupon: CouponModelProps, couponID: string, email: string, token: string) => {\n  try {\n    const response = await clientCouponsApi.post('/coupon', coupon, {\n      params: {\n        coupon_id: couponID,\n        email: email,\n      },\n      headers: {\n        Authentication: token,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error posting coupon:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// PUT - UPDATE STORE\nexport const updateClientCouponApi = async (coupon: CouponModelProps) => {\n  try {\n    const response = await clientCouponsApi.put(`/coupon?id=${coupon.id}`, coupon);\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error updating coupon:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// DELETE STORE\nexport const deleteClientCouponApi = async (id: string) => {\n  try {\n    const response = await clientCouponsApi.delete('/coupon', {\n      params: { id },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error deleting coupon:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n","import { InboxModelProps } from '../models/InboxModelProps';\nimport { TOKEN_KEY } from '../contexts/AuthContext';\nimport { createFetchClient } from '../utils/createFetchClient';\nimport { BASE_URL } from '@/utils/api';\nimport { CONSTANTS } from '@/utils/constants';\n\nconst inboxTableName =  'prof-website-inbox-table'\n\n// Initialize the fetch client with the base URL and headers\nconst clientInboxsApi = createFetchClient(\n  BASE_URL, // Base URL includes the `/prod` part\n  {}, // No default parameters for now\n  { 'Content-Type': 'application/json' } // Default headers\n);\n\n// GET ALL STORES\nexport async function getClientInboxsApi(inboxID: string, email: string) {\n  try {\n    const response = await clientInboxsApi.get('/inboxs', {\n      params: {\n        inbox_id: inboxID,\n        email: email,\n      },\n      headers: {\n        Authentication: TOKEN_KEY,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching inboxs:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// GET SINGLE STORE\nexport async function getClientInboxApi(id: string) {\n  try {\n    const response = await clientInboxsApi.get('/inbox', {\n      params: {\n        id,\n        tableName: inboxTableName,\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error fetching inbox:', error);\n    throw error; // Re-throw error for handling\n  }\n}\n\n// POST - CREATE OR UPDATE STORE\nexport const postClientInboxApi = async (inbox: InboxModelProps, inboxID: string, email: string, token: string) => {\n  try {\n    const response = await clientInboxsApi.post('/inbox', inbox, {\n      params: {\n        inbox_id: inboxID,\n        email: email,\n      },\n      headers: {\n        Authentication: token,\n        'Content-Type': 'application/json',\n      },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error posting inbox:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// PUT - UPDATE STORE\nexport const updateClientInboxApi = async (inbox: InboxModelProps) => {\n  try {\n    const response = await clientInboxsApi.put(`/inbox?id=${inbox.id}`, inbox);\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error updating inbox:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n\n// DELETE STORE\nexport const deleteClientInboxApi = async (id: string) => {\n  try {\n    const response = await clientInboxsApi.delete('/inbox', {\n      params: { id },\n    });\n    return response; // Return the server response\n  } catch (error) {\n    console.error('Error deleting inbox:', error);\n    throw error; // Re-throw error for handling\n  }\n};\n","import { FullAddress, OrderHistory, OrderItem, OrderModelProps, Parcel } from \"@/models/OrderModelProps\";\nimport { ProductModelProps } from \"@/models/ProductModelProps\";\n\n\nexport const SAMPLE_ORDER_ITEMS: OrderItem[] = [\n  {\n    id: \"item123\",\n    quantity: 2,\n    sku: \"SKU12345\",\n    title: \"Sample Product 1\",\n    color: \"Red\",\n    productId: \"prod123\",\n    size: \"Medium\",\n    image: \"https://example.com/sample-product-1.jpg\",\n    total_price: 399.98,\n    length: \"10\",\n    width: \"5\",\n    height: \"3\",\n    weight: \"1.2\",\n    weight_unit: \"kg\",\n    distance_unit: \"cm\",\n    description: \"This is a sample product item for a larger order.\",\n    net_weight: \"1.1\",\n    value_amount: 200.00,\n    value_currency: \"USD\",\n    origin_country: \"USA\",\n    eccn_ear99: \"EAR99\",\n  },\n  {\n    id: \"item124\",\n    quantity: 1,\n    sku: \"SKU54321\",\n    title: \"Advanced Gadget\",\n    color: \"Silver\",\n    productId: \"prod124\",\n    size: \"Large\",\n    image: \"https://example.com/advanced-gadget.jpg\",\n    total_price: 299.99,\n    length: \"15\",\n    width: \"8\",\n    height: \"5\",\n    weight: \"2.0\",\n    weight_unit: \"kg\",\n    distance_unit: \"cm\",\n    description: \"An advanced gadget with cutting-edge technology.\",\n    net_weight: \"1.9\",\n    value_amount: 299.99,\n    value_currency: \"USD\",\n    origin_country: \"China\",\n    eccn_ear99: \"EAR99\",\n  },\n  {\n    id: \"item125\",\n    quantity: 3,\n    sku: \"SKU67890\",\n    title: \"Basic Accessory\",\n    color: \"Black\",\n    productId: \"prod125\",\n    size: \"One Size\",\n    image: \"https://example.com/basic-accessory.jpg\",\n    total_price: 89.97,\n    length: \"7\",\n    width: \"4\",\n    height: \"2\",\n    weight: \"0.5\",\n    weight_unit: \"kg\",\n    distance_unit: \"cm\",\n    description: \"A basic accessory to complement your gadgets.\",\n    net_weight: \"0.45\",\n    value_amount: 29.99,\n    value_currency: \"USD\",\n    origin_country: \"Germany\",\n    eccn_ear99: \"EAR99\",\n  },\n];\n\n\nexport const SAMPLE_ORDER_HISTORY: OrderHistory = {\n  id: \"history_12345\",\n  title: \"Order History for Order #12345\",\n  orderPlaced: true,\n  orderEmailSent: true,\n  orderPaymentReceived: true,\n  inventoryCheck: \"Inventory checked and verified\",\n  orderProcessed: true,\n  orderPackaged: true,\n  orderShippingLabelGenerated: true,\n  orderShipped: true,\n  shippedDate: \"2024-08-18T10:00:00Z\",\n  trackingNumber: \"TRACK123456789\",\n  deliveryConfirmed: false,\n  orderDeliveryDate: \"\",\n  orderReturned: false,\n  orderReturnLabelGenerated: false,\n  status: \"Shipped\",\n  note: \"Shipment is on its way to the customer.\",\n};\n\nexport const SAMPLE_FULL_ADDRESS: FullAddress = {\n  name: \"John Doe\",\n  streetOne: \"123 Main St\",\n  streetTwo: \"Apt 4B\",\n  city: \"New York\",\n  state: \"NY\",\n  zip: \"10001\",\n  country: \"USA\",\n  phone: \"+1 555-555-5555\",\n  email: \"johndoe@example.com\",\n  is_residential: true,\n};\n\nexport const SAMPLE_PARCEL: Parcel = {\n  length: \"10\",\n  width: \"5\",\n  height: \"8\",\n  distance_unit: \"in\", // Assuming inches for the distance unit\n  weight: \"2.5\",\n  mass_unit: \"lb\", // Assuming pounds for the mass unit\n  value_amount: 100, // Assuming a value of 100 currency units\n  metadata: \"Sample parcel metadata\",\n  test: false,\n};\n\nexport const SAMPLE_ORDER: OrderModelProps = {\n  id: \"order_12345\",\n  stripe_id: \"stripe_12345\",\n  store_id: \"store_123\",\n  index: 1,\n  order_status: \"Processing\",\n  items: SAMPLE_ORDER_ITEMS,\n  userId: \"user_123\",\n  order_history: [SAMPLE_ORDER_HISTORY],\n  total: 50.0,\n  net_total: 45.0,\n  courier: \"UPS\",\n  shipping_label: \"http://example.com/shipping-label.pdf\",\n  return_label: \"http://example.com/return-label.pdf\",\n  from_address: SAMPLE_FULL_ADDRESS,\n  to_address: SAMPLE_FULL_ADDRESS,\n  parcel: SAMPLE_PARCEL,\n  title: \"Order #12345\",\n  type: \"Standard\",\n  coupon_code: \"DISCOUNT10\",\n  referred_by: \"user_456\",\n  statement_descriptor: \"Sample Order\",\n  note: \"Please handle with care.\",\n  budget: \"50.0\",\n  order_placed_date: \"2024-08-17T08:00:00Z\",\n  order_started_date: \"2024-08-18T08:00:00Z\",\n  order_created_date: \"2024-08-17T08:00:00Z\",\n  order_completed_date: \"2024-08-19T08:00:00Z\",\n  tax: 5.0,\n  stripe_fee: 2.5,\n  afm_fee: 1.5,\n  shipping_cost: 10.0,\n  discount_amount: 5.0,\n};","import React, { useContext, useState } from \"react\";\nimport {\n  Image,\n  StyleSheet,\n  FlatList,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport CartHeader from \"@/components/other/headers/CartHeader\";\nimport { generalStyles } from \"@/components/other/general/Styles\";\n// import CartCard from '@/components/cart/CartCard';\nimport convertToCurrency from \"@/hooks/convertToCurrency\";\nimport { CONSTANTS } from \"@/utils/constants\";\nimport PaymentPayScreen from \"./PaymentPayScreen\";\nimport CartCard from \"@/components/card/cart/CartCard\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\n\n// Define the CartPageVOne component\nconst CartPageVOne: React.FC = () => {\n  const {\n    carts,\n    totalSum,\n    totalShipping,\n    totalTax,\n    grandTotal,\n    deleteItemFromCart,\n  } = useCart();\n  const [triggerValueChange, setTriggerValueChange] = useState(false);\n\n  const { colors } = useTheme();\n  // Stylesheet for the component\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      padding: 15,\n      color: colors.title\n    },\n    priceContainer: {\n      marginTop: 40,\n    },\n    priceAndTitle: {\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      marginHorizontal: 20,\n      marginVertical: 10,\n      color: colors.title, // '#757575',\n\n    },\n    text: {\n      color: colors.title, // '#757575',\n      fontSize: 14,\n    },\n    divider: {\n      borderWidth: 1,\n      borderColor: colors.cardBorder, // '#C0C0C0',\n      borderRadius: 15,\n      marginVertical: 10,\n    },\n  });\n\n  return (\n    <View style={styles.container}>\n      {carts.length <= 0 ? (\n        <View style={generalStyles.center}>\n          <Text>Please add items to the cart</Text>\n        </View>\n      ) : (\n        <>\n          <FlatList\n            data={carts}\n            showsVerticalScrollIndicator={false}\n            keyExtractor={(item) => String(item.id)} // Convert item.id to string to ensure it's a valid key\n            contentContainerStyle={{ paddingBottom: 100 }}\n            renderItem={({ item }) => (\n              <CartCard\n                item={item}\n                deleteItemFromCart={deleteItemFromCart}\n                triggerValueChange={triggerValueChange}\n              />\n            )}\n          />\n\n          <View>\n            <View style={styles.priceContainer}>\n              <View style={styles.priceAndTitle}>\n                <Text style={styles.text}>Total:</Text>\n                <Text style={styles.text}>{convertToCurrency(totalSum)}</Text>\n              </View>\n\n              <View style={styles.priceAndTitle}>\n                <Text style={styles.text}>Shipping:</Text>\n                <Text style={styles.text}>\n                  {convertToCurrency(totalShipping)}\n                </Text>\n              </View>\n\n              <View style={styles.priceAndTitle}>\n                <Text style={styles.text}>Tax:</Text>\n                <Text style={styles.text}>{convertToCurrency(totalTax)}</Text>\n              </View>\n            </View>\n\n            <View style={styles.divider} />\n\n            <View style={styles.priceAndTitle}>\n              <Text style={styles.text}>Grand Total:</Text>\n              <Text\n                // style={[styles.text, { color: \"black\", fontWeight: \"700\" }]}\n                style={[styles.text, {  fontWeight: \"700\" }]}\n                >\n                {convertToCurrency(grandTotal)}\n              </Text>\n            </View>\n          </View>\n\n          <View style={{ paddingTop: 30 }}>\n            <PaymentPayScreen\n              publishableKey={CONSTANTS.publishableKeyTest}\n              amount={totalSum}\n              shippingAmount={totalShipping}\n            />\n          </View>\n\n          <View style={{ paddingBottom: 10 }} />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default CartPageVOne;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { Image, StyleSheet, FlatList, Text, TouchableOpacity, View } from 'react-native'\n// import React, { useContext, useState } from 'react'\n// import { SafeAreaView } from 'react-native-safe-area-context'\n// import { CartContext } from '@/contexts/CartContext'\n// import CartHeader from '@/components/other/headers/CartHeader'\n// import { generalStyles } from '@/components/other/general/Styles'\n// import CartCard from '@/components/other/cart/CartCard'\n// // import convertToCurrency from '@/hooks/convertToCurrency'\n// import { CONSTANTS } from '@/utils/constants'\n// import PaymentPayScreen from './PaymentPayScreen'\n// import convertToCurrency from '@/hooks/convertToCurrency'\n// // import CartHeader from '../components/headers/CartHeader'\n// // import { Avatar, Divider } from 'react-native-paper'\n// // import LinearGradient from 'react-native-linear-gradient' // cause error\n// // import CartCard from '../components/cart/CartCard'\n// // import { Ionicons , Fontisto} from '@expo/vector-icons'\n// // import { COLORS } from '../utils/theme'\n// // import { CartContext } from '../contexts/CartContext'\n// // import convertToCurrency from '../hook/convertToCurrency'\n// // import { Item } from 'react-native-paper/lib/typescript/components/Drawer/Drawer'\n// // import PaymentButton from '../components/buttons/CheckoutButton'\n// // import PaymentPayScreen from './PaymentPayScreen'\n// // import { CONSTANTS } from '../utils/constants'\n// // import CheckoutButton from '../components/buttons/CheckoutButton'\n// // import { generalStyles } from '../components/general/Styles'\n// // import { useFocusEffect } from '@react-navigation/native'\n\n// // export interface CartProps {\n// //   carts: []\n// // }\n\n// const CartPageVOne = () => {\n\n//   const { carts, totalSum, totalShipping, totalTax, grandTotal, quantity, deleteItemFromCart, clearData, decreaseFromCart} = useContext(CartContext)\n\n//   const [triggerValueChange, setTriggerValueChange] = useState(false)\n//   // useFocusEffect(\n//   //   React.useCallback(() => {\n//   //     // Run this function every time the screen comes into focus\n\n//   //     if (quantity <= 0    ){ // || carts.length <= 0\n//   //       setQuantity(0)\n//   //     }\n//   //   }, [])\n//   // );\n\n//   return (\n//     <View style={styles.container}>\n//       {/* <CartHeader/> */}\n\n//       {carts.length <= 0 ? (\n\n//           <>\n//           <View style={generalStyles.center}>\n//             <Text>\n//               Please add items to the cart\n//             </Text>\n//           </View>\n//           </>\n//       ): (\n// <>\n//         <FlatList\n//         data={carts}\n//         showsVerticalScrollIndicator={false}\n//         keyExtractor={(_, index) => index}\n//         ListHeaderComponent={\n//           <></>\n//         }\n//         contentContainerStyle={{\n//           paddingBottom: 100\n//         }}\n//         renderItem={({item}) => (\n//           // <CartCard item={item} delteItemFromCart={deleteItemFromCart} />\n//           <CartCard item={item} delteItemFromCart={deleteItemFromCart} triggerValueChange={triggerValueChange} />\n//         )}\n//         ListFooterComponent={\n//          <></>\n//         }\n//     />\n\n// <View>\n// <>\n//           <View style={styles.priceContainer}>\n\n//           <View  style={styles.priceAndTitle}>\n//             <Text style={styles.text}>Total:</Text>\n//             <Text style={styles.text}>{convertToCurrency(totalSum)}</Text>\n//           </View>\n\n//           <View  style={styles.priceAndTitle}>\n//             <Text style={styles.text}>Shipping:</Text>\n//             <Text style={styles.text}>{convertToCurrency(totalShipping)}</Text>\n//           </View>\n//           <View  style={styles.priceAndTitle}>\n//             <Text style={styles.text}>Tax:</Text>\n//             <Text style={styles.text}>{convertToCurrency(totalTax)}</Text>\n//           </View>\n//           {/* <View  style={styles.priceAndTitle}>\n//             <Text style={styles.text}>Shipping:</Text>\n//             <Text style={styles.text}>$0.0</Text>\n//           </View> */}\n\n//         </View>\n\n//         <View style={styles.divider}/>\n\n//           <View  style={styles.priceAndTitle}>\n//             <Text style={styles.text}>Grand Total:</Text>\n//             <Text style={[styles.text , {color: \"black\", fontWeight: \"700\"} ]}>{convertToCurrency(grandTotal)}</Text>\n//           </View>\n\n//         </>\n//       </View>\n//       <View style={{paddingTop: 30}}>\n//         <PaymentPayScreen\n//            publishableKey={CONSTANTS.publishableKeyTest}\n//           // publishableKey={CONSTANTS.publishableKeyLive}\n//           amount={totalSum}\n//           shippingAmount={totalShipping}\n//         />\n//     </View>\n\n//       <View style={{paddingBottom: 50}}></View>\n\n// </>\n//       )}\n\n//     </View>\n\n//   )\n// }\n\n// export default CartPageVOne\n\n// const styles = StyleSheet.create({\n\n//   headerContainer: {\n//     marginBottom: 20\n//   },\n//   container: {\n//     flex  : 1,\n//     padding: 15\n//   },\n//   priceContainer :{\n//     marginTop: 40\n//   },\n//   priceAndTitle: {\n//     flexDirection: 'row',\n//     justifyContent: \"space-between\",\n//     marginHorizontal: 20,\n//     marginVertical: 10\n//   },\n//   text: {\n//     color: \"#757575\",\n//     fontSize: 14\n//   },\n//   divider: {\n//     borderWidth: 1,\n//     borderColor: \"#C0C0C0\",\n//     borderRadius: 15,\n//     marginVertical: 10\n//   },\n//   checkoutContainer: {\n//     backgroundColor: \"black\",//  \"#E96E6E\",\n//     width: \"100%\",\n//     marginVertical: 30,\n//     borderRadius: 10\n//   },\n//   buttonText: {\n//     fontSize: 20,\n//     color: \"white\",\n//     textAlign: \"center\",\n//     padding: 10,\n//     fontWeight: \"700\"\n\n//   }\n\n// })\n\n// // rnef\n","import { Link } from 'expo-router';\nimport * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { Platform } from 'react-native';\n\nexport function ExternalLink(\n  props: Omit<React.ComponentProps<typeof Link>, 'href'> & { href: string }\n) {\n  return (\n    <Link\n      target=\"_blank\"\n      {...props}\n      href={props.href as never}\n      onPress={(e) => {\n        if (Platform.OS !== 'web') {\n          // Prevent the default behavior of linking to the default browser on native.\n          e.preventDefault();\n          // Open the link in an in-app browser.\n          WebBrowser.openBrowserAsync(props.href as string);\n        }\n      }}\n    />\n  );\n}\n","import { StyleSheet, Text, TouchableOpacity, useColorScheme, View } from \"react-native\";\nimport React, { useContext } from \"react\";\nimport { router, Stack } from \"expo-router\";\nimport { Fontisto, Feather, Ionicons } from \"@expo/vector-icons\";\nimport { useCart } from \"@/contexts/CartContext\";\nimport { useTheme } from \"@/contexts/ThemeContext\"\n// import { COLORS } from \"@/utils/theme\";\n// import {COLORS, useCart } from \"@dhuntleypro/afm-library\"\n\n\nconst HomeLayoutContent = () => {\n  const { quantity} = useCart()\n  const colorScheme = useColorScheme();\n\n  const { colors } = useTheme()\n  const styles = StyleSheet.create({\n    backButton: {\n      marginLeft: 8, // Adjust margin to position the back button\n    },\n    cartButton: {\n      alignItems: \"flex-end\",\n      marginRight: 10,\n    },\n    cartCount: {\n      position: \"absolute\",\n      bottom: 16,\n      width: 16,\n      height: 16,\n      borderRadius: 8,\n      alignItems: \"center\",\n      backgroundColor: \"blue\",\n      justifyContent: \"center\",\n      zIndex: 999,\n    },\n    cartNumber: {\n      fontFamily: \"regular\",\n      fontWeight: \"600\",\n      fontSize: 10,\n      color: colors.title\n    },\n  });\n\n  \n  return (\n    <Stack>\n      <Stack.Screen\n        name=\"index\"\n        options={{\n          title: \"Home\",\n          headerShown: false,\n         \n        }}\n      />\n\n      <Stack.Screen\n        name=\"(drawer)\"\n        options={{\n          title: \"Home\",\n          headerShown: false,\n        }}\n      />\n\n      <Stack.Screen\n        name=\"search\"\n        options={{\n          title: \"Search\",\n          // headerLeft: () => (\n          //   <TouchableOpacity style={styles.backButton}>\n          //     <Ionicons name=\"arrow-back\" size={24} color=\"black\" />\n          //   </TouchableOpacity>\n          // ),\n        }}\n      />\n\n      <Stack.Screen\n        name=\"products\"\n        options={{\n          title: \"Products\",\n          headerRight: () => ( // Need\n            <TouchableOpacity\n              style={styles.cartButton}\n              onPress={() => router.push(\"/cart\" as never)}\n              \n            >\n              <Fontisto name=\"shopping-bag\" size={24} />\n              <View style={styles.cartCount}>\n                <Text style={styles.cartNumber}>{quantity}</Text>\n              </View>\n            </TouchableOpacity>\n          ),\n        }}\n      />\n    </Stack>\n  );\n};\n\nexport default HomeLayoutContent;\n\n","import {ProductCardV2} from \"@/components/card/product/ProductCardV2\";\nimport ProductDetailsPageVTwo from \"@/pages/tabs/product-details/ProductDetailsPageVTwo\";\n// prof-website-slice-table\n\n\n// Pages are made up a combination of slices\nexport const PAGES  = {\n    onboarding_Page: [ \"ProductDetailsPageVTwo\" ],\n    login_Page: [ \"ProductDetailsPageVTwo\" ],\n    register_Page: [ \"ProductDetailsPageVTwo\" ],\n    products_Page:[ \"ProductDetailsPageVTwo\" ],\n    product_details_page: [ \"ProductDetailsPageVTwo\" ]\n\n\n}","import { ProductModelProps } from \"@/models/ProductModelProps\";\n\n\nexport  const SAMPLE_PRODUCT: ProductModelProps[] = [\n    {\n      id: \"prod123\",\n      name: \"Sample Product\",\n      price: 199.99,\n      store_id: \"store456\",\n      index: 1,\n      createdOn: \"2024-08-16T12:00:00.000Z\",\n      active: true,\n      image: \"https://example.com/sample-product.jpg\",\n      on_sale: true,\n      sale_price: 149.99,\n      slug: \"sample-product\",\n      quantity: 100,\n      description: \"This is a sample product description that highlights key features and benefits of the product.\",\n      icon_name: \"sample-icon\",\n      category: \"Electronics\",\n      images: [\n        \"https://example.com/sample-product-1.jpg\",\n        \"https://example.com/sample-product-2.jpg\",\n      ],\n      included: [\"Charging cable\", \"User manual\"],\n      materials: [\"Plastic\", \"Metal\"],\n      tags: [\"electronics\", \"gadget\", \"sale\"],\n      brand: \"SampleBrand\",\n      views: 1234,\n      likes: 150,\n      isLiked: true,\n      gender: \"Unisex\",\n      color: \"Black\",\n      color_code: \"#000000\",\n      condition: \"New\",\n      features: [\"Feature 1\", \"Feature 2\", \"Feature 3\"],\n      sku: \"SKU12345\",\n      variant_type: true,\n      variant_selected: {},\n      variants: [\n        {\n          id: \"variant1\",\n          title: \"Sample Variant 1\",\n          image: \"https://example.com/sample-variant1.jpg\",\n          color_code: \"#FF0000\",\n          price: 199.99,\n          sale_price: 149.99,\n          description: \"This is a description for the first variant.\",\n          features: [\"Feature A\", \"Feature B\"],\n          inventory: 50,\n          value_price: 149.99,\n          product_id: \"prod123\",\n          variantInfo: [\n            {\n              title: \"Size\",\n              description: \"Size description\",\n              price: 149.99,\n              sale_price: 129.99,\n              inventory: 20,\n            },\n          ],\n        },\n        {\n          id: \"variant2\",\n          title: \"Sample Variant 2\",\n          image: \"https://example.com/sample-variant2.jpg\",\n          color_code: \"#00FF00\",\n          price: 209.99,\n          sale_price: 169.99,\n          description: \"This is a description for the second variant.\",\n          features: [\"Feature X\", \"Feature Y\"],\n          inventory: 30,\n          value_price: 169.99,\n          product_id: \"prod123\",\n          variantInfo: [\n            {\n              title: \"Color\",\n              description: \"Color description\",\n              price: 169.99,\n              sale_price: 149.99,\n              inventory: 15,\n            },\n          ],\n        },\n      ],\n      last_updated: \"2024-08-16T15:00:00.000Z\",\n      item_type: \"physical\",\n      ingredients: [],\n      inventory: 100,\n      reviews: [\n        {\n          userName: \"John Doe\",\n          title: \"Great product!\",\n          comment: \"I really enjoyed using this product. Highly recommend it!\",\n        },\n        {\n          userName: \"Jane Smith\",\n          title: \"Good value for money\",\n          comment: \"This product offers great value for the price.\",\n        },\n      ],\n      rating: [5, 4, 4, 5],\n      size: \"Medium\",\n      sizes: [\"Small\", \"Medium\", \"Large\"],\n      weight: 1.5,\n      year_made: 2023,\n    }\n  \n  ]\n    \n ","import React, { useState } from 'react';\nimport { StyleSheet, Text, TextInput, View, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\ninterface TextFieldVOneProps {\n  label: string;\n  value: string;\n  secureTextEntry?: boolean;\n  editable?: boolean;\n}\n\nconst TextFieldVOne: React.FC<TextFieldVOneProps> = ({\n  label,\n  value,\n  secureTextEntry = false,\n  editable = false,\n}) => {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(!secureTextEntry);\n\n  const togglePasswordVisibility = () => {\n    setIsPasswordVisible((prev) => !prev);\n  };\n\n\nconst styles = StyleSheet.create({\n    content: {\n      // padding: 20,\n    },\n    label: {\n      fontSize: 16,\n      marginBottom: 10,\n    },\n    passwordContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n    input: {\n      width: '80%', // Restricting the TextInput to 80% of the container's width\n      borderWidth: 1,\n      borderColor: '#ddd',\n      padding: 10,\n      marginBottom: 20,\n      borderRadius: 5,\n      backgroundColor: editable ? '#fff' : '#f5f5f5',\n    },\n    iconContainer: {\n      paddingLeft: 10, // Adding space between the TextInput and the icon\n    },\n  });\n  return (\n    <View style={styles.content}>\n      <Text style={styles.label}>{label}</Text>\n      <View style={styles.passwordContainer}>\n        <TextInput\n          value={isPasswordVisible ? value : '*********'}\n          secureTextEntry={!isPasswordVisible}\n          style={styles.input}\n          editable={editable}\n        />\n        {secureTextEntry && (\n          <TouchableOpacity onPress={togglePasswordVisibility} style={styles.iconContainer}>\n            <Ionicons\n              name={isPasswordVisible ? 'eye-outline' : 'eye-off-outline'}\n              size={20}\n              color=\"#A0A0A0\"\n            />\n          </TouchableOpacity>\n        )}\n      </View>\n    </View>\n  );\n};\n\nexport default TextFieldVOne;\n\n","export const formatPhoneNumber = (phoneNumberString: string) => {\n    // Remove all non-digit characters from the phone number string\n    const cleanedPhoneNumber = phoneNumberString.replace(/\\D/g, '');\n    \n    // Check if the phone number has 11 digits (including the country code)\n    const isElevenDigits = cleanedPhoneNumber.length === 11;\n\n    // Format the phone number based on the number of digits\n    let formattedPhoneNumber;\n    if (isElevenDigits) {\n        // For 11-digit phone numbers, include the country code\n        formattedPhoneNumber = cleanedPhoneNumber.replace(/(\\d{1})(\\d{3})(\\d{3})(\\d{4})/, '+$1 ($2) $3-$4');\n    } else {\n        // For other phone numbers, format into groups of 3 digits separated by hyphens\n        formattedPhoneNumber = cleanedPhoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3');\n    }\n    \n    return formattedPhoneNumber;\n};","import * as SecureStore from \"expo-secure-store\";\n\n// Securely save a value with a specified key\nexport const saveToSecureStore = async (key: string, value: string) => {\n  try {\n    await SecureStore.setItemAsync(key, value);\n  } catch (error) {\n    console.error('Error saving to SecureStore', error);\n  }\n};\n\nexport const getFromSecureStore = async (key: string) => {\n  try {\n    const value = await SecureStore.getItemAsync(key);\n    if (value) {\n      console.log('Retrieved value:', value);\n    }\n  } catch (error) {\n    console.error('Error getting from SecureStore', error);\n  }\n};\n","// This function is web-only as native doesn't currently support server (or build-time) rendering.\nexport function useClientOnlyValue<S, C>(server: S, client: C): S | C {\n  return client;\n}\n"],"names":["CartContext","createContext","undefined","useCart","context","useContext","Error","ThemeContext","useTheme","StyleSheet","create","BannerVOne","colors","useEffect","console","log","styles","createStyles","_jsx","View","style","container","children","_jsxs","bannerSection","jsx","Text","bannerTitle","bannerSubtitle","TouchableOpacity","flexDirection","onPress","router","push","editPreferences","Ionicons","name","size","color","primary","arrow","padding","backgroundColor","background","borderRadius","marginBottom","fontSize","fontWeight","title","subtitle","marginLeft","marginTop","MyButton","buttonStyle","textStyle","button","text","alignItems","justifyContent","height","width","Dimensions","get","COLORS","light","tint","tabIconDefault","tabIconSelected","cardBackground","cardText","cardSecondaryText","cardPrice","cardBorder","dark","secondary","tertiary","darkGray","green","forestGreen","lightGray","gray","gray2","gray3","offwhite","white","black","blue","red","orange","lightWhite","backgroundLight","backgroundMedium","backgroundDark","SIZES","xSmall","small","medium","large","xLarge","xxLarge","SHADOWS","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","CURRENCY_FORMATTER","Intl","NumberFormat","currency","convertToCurrency","number","format","CONSTANTS","appName","holderImageWelcome","holderImageProductCard","holderImageCollectionCard","holderImageOrderCard","holderUserImage","holderCarouselImageOne","holderCarouselImageTwo","holderCarouselImageThree","holderImage","merchant_id","publishableKeyLive","publishableKeyTest","flex","image","alignContent","orderImg","resizeMode","textContainer","marginHorizontal","orderTitle","fontFamily","supplier","API_ID","BASE_URL","AWS_BASE_IMAGE","process","env","VITE_S3_ASSET_BUCKET_NAME","AWS_HOLDER_IMAGE","AWS_BASE_URL_2","VITE_API_ID_2","VITE_REGION","AWS_VERIFY","VITE_API_ID","AWS_LOGIN_URL","AWS_ORDERS_URL","AWS_SUBSCRIBER_URL","createFetchClient","baseURL","defaultParams","defaultHeaders","fetchClient","async","endpoint","options","normalizedBaseURL","includes","normalizedEndpoint","startsWith","url","URL","params","URLSearchParams","Object","entries","forEach","key","value","append","String","search","toString","headers","Headers","body","response","fetch","ok","errorData","json","catch","status","JSON","stringify","method","post","patch","put","delete","getAuthToken","token","SecureStore","getItemAsync","TOKEN_KEY","error","authApi","tableName","showFilteredItems","USER_KEY","AUTHENTICATED_KEY","AuthContext","useAuth","clientOrdersApi","getClientOrdersApi","orderID","email","order_id","Authentication","postClientOrderApi","order","deleteClientOrderApi","id","ClientOrderContext","useClientOrder","getStatusStyle","fulfillOrderStatus","markAsShippedStatus","shippedStatus","defaultStatus","card","icon","paddingRight","details","price","date","statusContainer","paddingVertical","paddingHorizontal","createFetchClientForItems","fetchClientForItems","fromEntries","data","Array","isArray","productTableName","clientProductApi","clientProductsApi","getClientProductsApi","storeID","store_id","getClientProductApi","ClientProductContext","useClientProduct","ProductCardV2","item","addToCart","authState","selectProduct","Link","href","asChild","imageContainer","Image","source","uri","numberOfLines","color_code","addBtn","user","marginEnd","overflow","aspectRatio","position","bottom","right","ProductGridCardVOne","product","viewTypeGrid","margin","borderWidth","borderColor","border","jsxs","images","item_type","ProductHScrollCardVOne","useNavigation","productImg","productTitle","header","textAlign","deleteContainer","deleteLabel","deleteDescription","deleteButton","deleteButtonText","divider","ExternalLink","props","target","e","Platform","OS","preventDefault","WebBrowser","openBrowserAsync","useThemeColor","colorName","theme","useColorScheme","colorFromProps","lightColor","darkColor","otherProps","DefaultText","DefaultView","MonoText","getStartedContainer","homeScreenFilename","marginVertical","codeHighlightContainer","getStartedText","lineHeight","helpContainer","helpLink","helpLinkText","generalStyles","center","stripeConverter","amountInCents","paymentApi","stripe_id","createPaymentIntent","paymentJsonProps","clientStoresApi","getClientStoreApi","ClientStoreContext","useClientStore","PaymentPayScreen","ready","setReady","useState","clientSecret","setClientSecret","isPlatformPaySupported","confirmPlatformPayPayment","usePlatformPay","carts","totalSum","totalShipping","totalTax","grandTotal","deleteItemFromCart","clearData","decreaseFromCart","store","setup","Alert","alert","paymentData","amount","shipping_fee","shippingAmount","app_name","store_name","StripeProvider","publishableKey","merchantIdentifier","PlatformPayButton","applePay","cartItems","map","label","paymentType","PlatformPay","PaymentType","Immediate","merchantCountryCode","currencyCode","googlePay","testEnv","merchantName","billingAddressConfig","BillingAddressFormat","Full","isPhoneNumberRequired","isRequired","message","disabled","payButton","type","tintColor","buttons","CartCard","quantity","img","cardContent","circleSizeContainer","circle","sizeCircle","sizeText","rating","top","ratingText","SimpleLineIcons","collectionTableName","clientCollectionApi","clientCollectionsApi","getClientCollectionsApi","getClientCollectionApi","ClientCollectionContext","useClientCollection","generateUUID","idLength","result","characters","i","charAt","Math","floor","random","UserLoginTextFields","setEmail","password","setPassword","showPassword","setShowPassword","onLogin","onRegister","onLogout","showAlert","inputContainer","TextInput","placeholder","onChangeText","input","keyboardType","autoCapitalize","autoComplete","secureTextEntry","forgotPasswordText","loginButton","msg","replace","navError","loginButtonText","paddingTop","logo","welcomeText","descriptionText","tabContainer","tab","paddingBottom","activeTab","borderBottomWidth","borderBottomColor","tabText","activeTabText","alignSelf","signupButton","termsText","marginRight","checkboxContainer","passwordCriteria","UserRegisterTextFields","setName","confirmedpassword","setConfirmedPassword","showConfirmPassword","setShowConfirmPassword","prevState","store_ids","store_owner_id","onboardingQ1","onboardingQ2","onboardingQ3","onboardingQ4","orders","favoriteItems","cart","affiliate_link","active","role","birthday","todo_completed","username","phone_number","gender","profile_image","address_city","address_state","location_history","current_notification","notifications","payment_due","payment_due_date","payment_due_day","payment_monthly_amount","device_id","device_os_version","device_model","device_ip_address","device_battery_level","device_battery_statue","device_network_connectio_type","loyalty_date","payment_history_total","subscription_id","paid_subscriber","newsletter_subscriber","notification_subscriber","left_review","review_stars","reviews","testimonials","notify_arn","owner_notify_arn","loginAction","FavoriteContext","useFavorite","zIndex","imageCarousel","productImage","modalContent","borderTopLeftRadius","borderTopRightRadius","productInfo","productName","productColor","priceDescription","description","sizeLabel","sizeSelector","sizeOption","selectedSizeOption","selectedSizeText","addToCartButton","addToCartButtonText","upperSection","content","section","sectionTitle","option","optionText","logoutButton","logoutText","LoginComponentOne","Stack","Screen","imgContainer","form","Button","gap","loadingContainer","backgroundImage","overlay","logoText","tagline","buttonContainer","buttonPrimary","buttonPrimaryText","buttonSecondary","buttonSecondaryText","noImageContainer","noImageText","modalContainer","closeButton","heading","subheading","paragraph","list","paddingLeft","listItem","mode","optionsContainer","selectedOption","optionContent","preview","selectedPreview","previewText","optionLabel","checkIcon","FavoriteCard","deleteItemFromFavorite","addToFavorite","decreaseFromFavorite","FavoritesPageVOne","favorites","triggerValueChange","setTriggerValueChange","priceContainer","priceAndTitle","length","_Fragment","Fragment","FlatList","showsVerticalScrollIndicator","keyExtractor","contentContainerStyle","renderItem","gridLayout","row","searchContainer","searchIcon","searchWrapper","searchInput","searchBtn","TopSectionHeaderV1","line1","line2","line3","welcomeTxtStyle","Carousel","animatedValue","useRef","Animated","Value","current","mankindStore","storeImages","about_object_image","doubleImageHero_left_image","topContainer","horizontal","showsHorizontalScrollIndicator","onScroll","event","nativeEvent","contentOffset","x","useNativeDriver","pagingEnabled","_","index","bottomContainer","inputRange","dotScale","interpolate","outputRange","extrapolate","dotContainer","borderStartColor","PagingDot","scale","pagingDot","transform","ROUTES","onboarding_Page","login","register","products","SectionHeader","headerTitle","store_type","SearchBarVOne","searchSection","placeholderTextColor","filterSection","filterIcon","talentCount","ProductRow","isLoading","ActivityIndicator","errorContainer","errorText","columnGap","appBarWrapper","appBar","location","cartCount","cartNumber","SearchBarVOneButton","path","useRouter","Feather","TopHomeSeaction","isMenuVisible","setIsMenuVisible","handleProductSelect","productId","selected","find","headerText","menuIcon","titleContainer","mainTitle","subTitle","productList","productItem","shopNowButton","buttonBackground","buttonShadow","shopNowButtonText","buttonText","letterSpacing","textTransform","MotiView","from","opacity","translateY","animate","transition","duration","delay","prev","Pressable","product_1_Id","product_1_Name","product_2_Id","product_2_Name","product_3_Id","product_3_Name","product_4_Id","product_4_Name","welcome_image","translateX","productsApi","getMankindProductsApi","MankindProductContext","mankindStoresApi","getMankindStoreApi","MankindStoreContext","clientCouponsApi","clientInboxsApi","SAMPLE_ORDER_ITEMS","sku","total_price","weight","weight_unit","distance_unit","net_weight","value_amount","value_currency","origin_country","eccn_ear99","SAMPLE_ORDER_HISTORY","orderPlaced","orderEmailSent","orderPaymentReceived","inventoryCheck","orderProcessed","orderPackaged","orderShippingLabelGenerated","orderShipped","shippedDate","trackingNumber","deliveryConfirmed","orderDeliveryDate","orderReturned","orderReturnLabelGenerated","note","SAMPLE_FULL_ADDRESS","streetOne","streetTwo","city","state","zip","country","phone","is_residential","SAMPLE_PARCEL","mass_unit","metadata","test","SAMPLE_ORDER","order_status","items","userId","order_history","total","net_total","courier","shipping_label","return_label","from_address","to_address","parcel","coupon_code","referred_by","statement_descriptor","budget","order_placed_date","order_started_date","order_created_date","order_completed_date","tax","stripe_fee","afm_fee","shipping_cost","discount_amount","setTheme","handleSelection","screenOptions","headerShown","presentation","setAuthState","authenticated","loading","setLoading","userString","parse","loadUserData","useCallback","userData","setItemAsync","deleteItemAsync","AsyncStorage","removeItem","updateSingleUserItem","updateKey","updateValue","Authorization","updatedUser","addToFavorites","itemId","updatedFavorites","removeFromFavorites","filter","fav","isFavorite","Provider","storage","storageKey","setCarts","setTotalSum","setTotalShipping","setQuantity","storedCarts","getItem","parsedCarts","calculateTotalSum","reduce","sum","loadCarts","setItem","saveCarts","updatedCarts","itemExistIndex","findIndex","splice","collection","setCollection","collections","setCollections","selectedCollection","setSelectedCollection","setError","setIsLoading","addCollection","newCollection","removeCollection","selectCollection","getClientCollection","collection_owner_id","getClientCollections","validCollections","selectOrder","setStatus","setOrders","selectedOrder","setSelectedOrder","updateOrder","prevOrders","o","addOrder","removeOrder","orderId","getClientOrders","fetchedOrders","setProduct","setProducts","selectedProduct","setSelectedProduct","addProduct","newProduct","removeProduct","getClientProduct","product_owner_id","getClientProducts","validProducts","setStore","selectedStore","setSelectedStore","getClientStore","addStore","newStore","removeStore","selectStore","allCollection","user_id","timestamp","Date","toISOString","caption","likes","isliked","onSale","relatedProductIds","tags","collectionsWithAll","filteredProducts","pageBackground","categoryList","maxHeight","categoryContainer","categoryButton","selectedCollectionButton","categoryText","selectedCollectionText","promoContainer","promoImage","promoTextContainer","left","promoTitle","promoSubtitle","promoDiscount","productListContainer","productContainer","productCard","productPrice","emptyMessage","numColumns","ListEmptyComponent","searchTerm","setSearchTerm","searchResults","setSearchResults","handleSearch","results","toLowerCase","SafeAreaView","columnWrapperStyle","setFavorites","storedFavorites","parsedFavorites","loadFavorites","saveFavorites","favorite","ScrollView","client","profileImage","healthTip","fontStyle","backButton","cartButton","headerRight","Fontisto","activeTabIsLogin","setActiveTabIsLogin","prevProducts","getMankindProducts","fetchedProducts","getMankindStore","navigation","navigate","login_Page","register_Page","products_Page","product_details_page","storeName","selectedSize","setSelectedSize","setIsFavorite","imageUri","some","scrollContainer","heartIconWrapper","pageText","fixedBottomButtonContainer","currentFavorites","showSize","partialProduct","flatListContent","createdOn","on_sale","sale_price","slug","icon_name","category","included","materials","brand","views","isLiked","condition","features","variant_type","variant_selected","variants","inventory","value_price","product_id","variantInfo","last_updated","ingredients","userName","comment","sizes","year_made","ecom","blog","subscription","appointment","FontAwesome5","editable","isPasswordVisible","setIsPasswordVisible","passwordContainer","iconContainer","storeTheme","systemColorScheme","setThemeState","isDarkMode","setIsDarkMode","storedTheme","loadStoredTheme","newTheme","saveTheme","currentTheme","DarkTheme","DefaultTheme","NavigationThemeProvider","modalVisible","setModalVisible","StatusBar","barStyle","translucent","ImageBackground","Modal","animationType","transparent","visible","onRequestClose","phoneNumberString","cleanedPhoneNumber","formattedPhoneNumber","couponID","coupon_id","inboxID","inbox_id","collectionID","collection_id","coupon","inbox","productID","priceID","userEmail","server"],"mappings":"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"}