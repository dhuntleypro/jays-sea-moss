/// <reference types="react" />
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import React__default, { ReactNode, FC, FunctionComponent } from 'react';
import * as axios from 'axios';
import { Link } from 'expo-router';
import { PressableProps, StyleProp, ViewStyle, TextStyle } from 'react-native';
export { useColorScheme } from 'react-native';
import { ProductModelProps as ProductModelProps$1 } from '@/models/ProductModelProps';
import { OrderModelProps as OrderModelProps$1 } from '@/models/OrderModelProps';

interface VariantInfoProps {
    title: string;
    description: string;
    price: number;
    sale_price: number;
    inventory: number;
}
interface ProductVariantProps {
    id: string;
    title: string;
    image: string;
    color_code: string;
    price: number;
    sale_price: number;
    description: string;
    features: string[];
    inventory: number;
    value_price: number;
    product_id: string;
    variantInfo: VariantInfoProps[];
}
interface ItemReviewsProps {
    userName: string;
    title: string;
    comment: string;
}
interface ProductModelProps {
    id: string;
    store_id: string;
    index: number;
    createdOn: string;
    active: boolean;
    name: string;
    image: string;
    price: number;
    on_sale: boolean;
    sale_price: number;
    slug: string;
    quantity: number;
    description: string;
    icon_name: string;
    category: string;
    images: string[];
    included: string[];
    materials: string[];
    tags: string[];
    brand: string;
    views: number;
    likes: number;
    isLiked: boolean;
    gender: string;
    color: string;
    color_code: string;
    condition: string;
    features: string[];
    sku: string;
    variant_type: boolean;
    variant_selected: Record<string, any>;
    variants: ProductVariantProps[];
    last_updated: string;
    item_type: string;
    ingredients: string[];
    inventory: number;
    reviews: ItemReviewsProps[];
    rating: number[];
    size: string;
    sizes: string[];
    weight: number;
    year_made: number;
}

interface ProductContextProps$1 {
    products: ProductModelProps[];
    addClientProduct: (product: ProductModelProps) => Promise<void>;
    removeClientProduct: (productId: string) => Promise<void>;
    updateClientProduct: (product: ProductModelProps) => Promise<void>;
    getClientProducts: () => void;
    selectedProduct: ProductModelProps | null;
    selectProduct: (product: ProductModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const ClientProductContext: React__default.Context<ProductContextProps$1 | undefined>;
declare const useClientProduct: () => ProductContextProps$1;
declare const ClientProductProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface UserProps {
    id: string;
    store_ids: string[];
    store_owner_id: string;
    onboardingQ1: string;
    onboardingQ2: string;
    onboardingQ3: string;
    onboardingQ4: string;
    orders: string[];
    favoriteItems: string[];
    cart: string[];
    abandonedCart?: boolean;
    affiliate_link: string;
    active: boolean;
    role: string;
    birthday: string;
    todo_completed: boolean;
    tableName: string;
    name: string;
    username: string;
    email: string;
    password: string;
    phone_number: string;
    gender: string;
    profile_image: string;
    isAdmin?: boolean;
    address?: string;
    address_city: string;
    address_state: string;
    address_zip?: string;
    location?: string;
    location_history: string[];
    current_notification: string;
    notifications: string[];
    payment_due: number;
    payment_due_date: string;
    payment_due_day: string;
    payment_monthly_amount: number;
    device_id: string;
    device_os_version: string;
    device_model: string;
    device_ip_address: string;
    device_battery_level: string;
    device_battery_statue: string;
    device_network_connectio_type: string;
    loyalty_date: string;
    payment_history_total: number;
    subscription_id: string;
    paid_subscriber: boolean;
    newsletter_subscriber: boolean;
    notification_subscriber: boolean;
    left_review: boolean;
    review_stars: number[];
    reviews: string[];
    testimonials: string[];
    notify_arn: string;
    owner_notify_arn: string;
}

interface AuthState {
    user: UserProps | null;
    token: string | null;
    authenticated: boolean;
}
interface AuthContextType {
    authState: AuthState;
    onRegister: (user: UserProps) => Promise<any>;
    onLogin: (email: string, password: string) => Promise<any>;
    onLogout: () => Promise<void>;
    updateUserProfile: (updatedUser: Partial<UserProps>) => Promise<void>;
    addToFavorites: (itemId: string) => Promise<void>;
    removeFromFavorites: (itemId: string) => Promise<void>;
    isFavorite: (itemId: string) => boolean;
}
declare const AuthContext: React__default.Context<AuthContextType | undefined>;
declare const AuthProvider: ({ children }: {
    children: React__default.ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface CartItem {
    id: string;
    price: number;
    quantity: number;
}
interface CartContextType {
    carts: CartItem[];
    addToCart: (item: CartItem) => void;
    decreaseFromCart: (item: CartItem) => void;
    totalSum: number;
    totalTax: number;
    totalShipping: number;
    grandTotal: number;
    quantity: number;
    deleteItemFromCart: (item: CartItem) => void;
    clearData: (item: CartItem) => void;
}
declare const CartContext: React__default.Context<CartContextType>;
declare const CartProvider: React__default.FC<{
    children: React__default.ReactNode;
}>;

interface OrderHistory {
    id: string;
    title: string;
    orderPlaced: boolean;
    orderEmailSent: boolean;
    orderPaymentReceived: boolean;
    inventoryCheck: string;
    orderProcessed: boolean;
    orderPackaged: boolean;
    orderShippingLabelGenerated: boolean;
    orderShipped: boolean;
    shippedDate: string;
    trackingNumber: string;
    deliveryConfirmed: boolean;
    orderDeliveryDate: string;
    orderReturned: boolean;
    orderReturnLabelGenerated: boolean;
    status: string;
    note: string;
}
interface Parcel {
    length: string;
    width: string;
    height: string;
    distance_unit: string;
    weight: string;
    mass_unit: string;
    value_amount: number;
    metadata: string;
    test: boolean;
}
interface FullAddress {
    name: string;
    streetOne: string;
    streetTwo: string;
    city: string;
    state: string;
    zip: string;
    country: string;
    phone: string;
    email: string;
    is_residential: boolean;
}
interface OrderItem {
    id: string;
    quantity: number;
    sku: string;
    title: string;
    color: string;
    productId: string;
    size: string;
    image: string;
    total_price: number;
    length: string;
    width: string;
    height: string;
    weight: string;
    weight_unit: string;
    distance_unit: string;
    description: string;
    net_weight: string;
    value_amount: number;
    value_currency: string;
    origin_country: string;
    eccn_ear99: string;
}
interface OrderModelProps {
    id: string;
    stripe_id: string;
    store_id: string;
    index: number;
    order_status: string;
    items: OrderItem[];
    userId: string;
    order_history: OrderHistory[];
    total: number;
    net_total: number;
    courier: string;
    shipping_label: string;
    return_label: string;
    from_address: FullAddress;
    to_address: FullAddress;
    parcel: Parcel;
    title: string;
    type: string;
    coupon_code: string;
    referred_by: string;
    statement_descriptor: string;
    note: string;
    budget: string;
    order_placed_date: string;
    order_started_date: string;
    order_created_date: string;
    order_completed_date: string;
    tax: number;
    stripe_fee: number;
    afm_fee: number;
    shipping_cost: number;
    discount_amount: number;
}

interface OrderContextProps {
    orders: OrderModelProps[];
    addOrder: (order: OrderModelProps) => Promise<void>;
    removeOrder: (orderId: string) => Promise<void>;
    updateOrder: (order: OrderModelProps) => Promise<void>;
    getClientOrders: () => void;
    selectedOrder: OrderModelProps | null;
    selectOrder: (order: OrderModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const OrderContext: React__default.Context<OrderContextProps | undefined>;
declare const OrderProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface ProductContextProps {
    products: ProductModelProps[];
    addProduct: (product: ProductModelProps) => void;
    removeProduct: (productId: string) => void;
    getMankindProducts: () => void;
    selectedProduct: ProductModelProps | null;
    selectProduct: (product: ProductModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const MankindProductContext: React__default.Context<ProductContextProps | undefined>;
declare const MankindProductProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface CollectionModelProps {
    id: string;
    store_id: string;
    user_id: string;
    index: number;
    timestamp: string;
    title: string;
    description: string;
    caption: string;
    amount: number;
    likes: number;
    isliked: boolean;
    onSale: boolean;
    relatedProductIds: string[];
    image: string;
    images: string[];
    tags: string[];
    active: boolean;
}

interface CollectionContextProps {
    collections: CollectionModelProps[];
    addCollection: (collection: CollectionModelProps) => Promise<void>;
    removeCollection: (collectionId: string) => Promise<void>;
    updateCollection: (collection: CollectionModelProps) => Promise<void>;
    getClientCollections: () => void;
    selectedCollection: CollectionModelProps | null;
    selectCollection: (collection: CollectionModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const CollectionContext: React__default.Context<CollectionContextProps | undefined>;
declare const CollectionProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface StoreModelProps {
    id: string;
    owner_id: string;
    store_users: string[];
    stripe_id: string;
    timestamp: string;
    live: boolean;
    status: string;
    store_name: string;
    store_type: string;
    year_founded: string;
    store_primary_category: string;
    store_url: string;
    store_name_alt: string;
    business_type: string;
    store_founder: string;
    business_email: string;
    email: string;
    logo: string;
    zelle_qr_code: string;
    cash_app_qr_code: string;
    phone_number: string;
    store_address: string;
    store_address_state: string;
    store_address_city: string;
    store_address_zip: string;
    socialLinks: StoreSocialLinks;
    storeSettings: StoreSettings;
    seo_helmet: StoreSEO;
    images: StoreImages;
    daysOfOperation?: DaysOfOperation[];
    sliceItems?: SliceItem[];
    legal_doc_cookies_policy: string;
    legal_doc_terms_of_use: string;
    legal_doc_privacy_policy: string;
    legal_doc_contract: string;
    media: string[];
    colors: ColorItem[];
    slice_order: string[];
    slice_header: string;
    slice_footer: string;
    paypal_client_live_id: string;
    paypal_secret_live_key: string;
}
interface ColorItem {
    id: string;
    name: string;
    color_code: string;
}
interface StoreSettings {
    id: string;
    add_to_cart_force_register: boolean;
    font: string;
    popup_timer: number;
    free_shipping_amount: number;
    tax_total: number;
    abandoned_cart_users: string[];
    currency: string;
    default_language: string;
    newsletter_subscription_prompt: string;
    display_welcome_message: boolean;
    default_discount_percentage: number;
}
interface SliceItem {
    id: string;
    name: string;
    page: string;
    type: string;
    position: number;
}
interface StoreImages {
    image_holder: string;
    welcome_image: string;
    about_object_image: string;
    initial_popup_image: string;
    profile_image: string;
    doubleImageHero_left_image: string;
    login_popup_image: string;
    doubleImageHero_right_image: string;
    register_popup_image: string;
    newsletter_popup_image: string;
}
interface DaysOfOperation {
    day: number;
    open: number;
    close: number;
}
interface StoreSocialLinks {
    id: string;
    instagram_url: string;
    facebook_url: string;
    twitter_url: string;
    discord_url: string;
    youTube_url: string;
    tikTok_url: string;
    linkedin_url: string;
    pinterest_url: string;
}
interface StoreSEO {
    id: string;
    helmet_home_page_title: string;
    helmet_home_page_description: string;
    helmet_cancel_payment_page_title: string;
    helmet_cancel_payment_page_description: string;
    helmet_profile_page_title: string;
    helmet_profile_page_description: string;
    helmet_shop_page_title: string;
    helmet_shop_page_description: string;
    helmet_subscribe_page_title: string;
    helmet_subscribe_page_description: string;
    helmet_success_page_title: string;
    helmet_success_page_description: string;
}

interface ClientStoreContextProps {
    store: StoreModelProps | null;
    addStore: (store: StoreModelProps) => void;
    removeStore: (storeId: string) => void;
    getClientStore: () => void;
    selectedStore: StoreModelProps | null;
    selectStore: (store: StoreModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const ClientStoreContext: React__default.Context<ClientStoreContextProps | undefined>;
declare const ClientStoreProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

declare const authApi: axios.AxiosInstance;

interface UserContextType {
}
declare const AppUserContext: React.Context<UserContextType | undefined>;

type ThemeMode = 'light' | 'dark' | 'system';
interface ThemeContextProps {
    theme: ThemeMode;
    setTheme: (mode: ThemeMode) => void;
    isDarkMode: boolean;
}
declare const ThemeContext: React__default.Context<ThemeContextProps | undefined>;

declare enum AccountType {
    Admin = "admin",
    Guest = "guest",
    Owner = "owner",
    Customer = "customer",
    Client = "client",
    BronzeCustomer = "bronze_customer",
    SilverCustomer = "silver_customer",
    GoldCustomer = "gold_customer"
}

declare enum StoreType {
    ECommerce = "E-commerce App",
    Subscription = "Subscription App",
    Appointment = "Appointments App",
    SocialMedia = "Social Media App",
    Mankind = "Mankind"
}

declare function convertToCurrency(number: number): string;

declare const formatPhoneNumber: (phoneNumberString: string) => string;

declare function ExternalLink(props: Omit<React__default.ComponentProps<typeof Link>, 'href'> & {
    href: string;
}): react_jsx_runtime.JSX.Element;

declare const generateUUID: (idLength: number) => string;

declare const stripeConverter: (amountInCents: number) => number;

declare function useClientOnlyValue<S, C>(server: S, client: C): S | C;

interface CouponModelProps {
    id: string;
    store_id: string;
    user_id: string;
    index: number;
    timestamp: string;
    title: string;
    description: string;
    active: boolean;
    couponCode: string;
    coupontype: CouponType;
    discountPercentage: number;
    validUntil: string;
    minPurchaseAmount: number;
    isActive: boolean;
    productsAppliedTo: string[];
    applyToAll: boolean;
}
declare enum CouponType {
    All = "all",
    Product = "product",
    Products = "products",
    Shipping = "shipping"
}

interface InboxModelProps {
    id: string;
    store_id: string;
    user_id: string;
}

declare const CONSTANTS: {
    appName: string;
    holderImageWelcome: string;
    holderImageProductCard: string;
    holderImageCollectionCard: string;
    holderImageOrderCard: string;
    holderUserImage: string;
    holderCarouselImageOne: string;
    holderCarouselImageTwo: string;
    holderCarouselImageThree: string;
    holderImage: string;
    mankind_store_id: string;
    store_id: string;
    merchant_id: string;
    publishableKeyLive: string;
    publishableKeyTest: string;
};

declare const ROUTES: {
    onboarding_Page: string;
    login: string;
    register: string;
    products: string;
};

declare const COLORS: {
    light: {
        text: string;
        background: string;
        tint: string;
        tabIconDefault: string;
        tabIconSelected: string;
        cardBackground: string;
        cardText: string;
        cardSecondaryText: string;
        cardPrice: string;
        cardBorder: string;
    };
    dark: {
        text: string;
        background: string;
        tint: string;
        tabIconDefault: string;
        tabIconSelected: string;
        cardBackground: string;
        cardText: string;
        cardSecondaryText: string;
        cardPrice: string;
        cardBorder: string;
    };
    primary: string;
    secondary: string;
    tertiary: string;
    darkGray: string;
    green: string;
    forestGreen: string;
    lightGray: string;
    gray: string;
    gray2: string;
    gray3: string;
    offwhite: string;
    white: string;
    black: string;
    blue: string;
    red: string;
    orange: string;
    lightWhite: string;
    backgroundLight: string;
    backgroundMedium: string;
    backgroundDark: string;
};
declare const SIZES: {
    xSmall: number;
    small: number;
    medium: number;
    large: number;
    xLarge: number;
    xxLarge: number;
    height: number;
    width: number;
};
declare const SHADOWS: {
    small: {
        shadowColor: string;
        shadowOffset: {
            width: number;
            height: number;
        };
        shadowOpacity: number;
        shadowRadius: number;
        elevation: number;
    };
    medium: {
        shadowColor: string;
        shadowOffset: {
            width: number;
            height: number;
        };
        shadowOpacity: number;
        shadowRadius: number;
        elevation: number;
    };
};

declare const BannerVOne: () => react_jsx_runtime.JSX.Element;

declare const PromoBannerCard: () => react_jsx_runtime.JSX.Element;

interface Props extends PressableProps {
    style?: StyleProp<ViewStyle>;
    touchOpacity?: number;
}
declare const MyPressable: React__default.FC<Props>;

interface MyButtonProps {
    onPress: () => void;
    title: string;
    buttonStyle?: ViewStyle;
    textStyle?: TextStyle;
}

declare const MyButton: React__default.FC<MyButtonProps>;

declare const ProductCardV2: FC<ProductModelProps$1>;

declare const ProductCardView: FC<{
    product: ProductModelProps$1;
}>;

declare const TalentCard: () => react_jsx_runtime.JSX.Element;

declare const DeleteSectionView: () => react_jsx_runtime.JSX.Element;

declare const Divider: () => react_jsx_runtime.JSX.Element;

declare const ExtractSettings: () => react_jsx_runtime.JSX.Element;

declare const HomeDesignOne: FC;

declare const HomeDesignTwo: React__default.FC;

declare const TopHomeSeaction: React__default.FC;

interface AlertComponentProps {
    title: string;
    message: string;
    cancelText?: string;
    updateText?: string;
    onCancelPress?: () => void;
    onUpdatePress?: () => void;
    cancelable?: boolean;
}
declare const MyAlert: React__default.FC<AlertComponentProps>;

declare const AuthLayout: () => react_jsx_runtime.JSX.Element;

declare const CoreLayout: () => react_jsx_runtime.JSX.Element;

declare function RootLayout(): react_jsx_runtime.JSX.Element;

declare function TabLayout(): react_jsx_runtime.JSX.Element;

interface SettingsItemLink {
    href: string;
    iconName: string;
    label: string;
}
declare const SettingsItemLink: FC<SettingsItemLink>;

declare const CartScreen: () => react_jsx_runtime.JSX.Element;

interface PaymentPayScreenProps {
    goBack?: () => void;
    publishableKey: string;
    amount: number;
    shippingAmount: number;
}
declare const PaymentPayScreen: FC<PaymentPayScreenProps>;

declare const NoOrdersView: () => react_jsx_runtime.JSX.Element;

declare const ClientOrderCard: React__default.FC<{
    order: OrderModelProps$1;
}>;

declare const OrderDetailsPage: () => react_jsx_runtime.JSX.Element;

declare const ClientOrdersView: () => react_jsx_runtime.JSX.Element;

declare const CreateClientOrderView: () => react_jsx_runtime.JSX.Element;

declare const ClientProductCard: React__default.FC<{
    product: ProductModelProps$1;
}>;

declare const ClientProductDetailsPage: () => react_jsx_runtime.JSX.Element;

declare const ClientProductsView: () => react_jsx_runtime.JSX.Element;

declare const CreateClientProductView: () => react_jsx_runtime.JSX.Element;

declare const CollectionPageVOne: React__default.FC;

declare const CollectionPageVTwo: () => react_jsx_runtime.JSX.Element;

declare const Carousel: FunctionComponent;

declare const SectionHeader: () => react_jsx_runtime.JSX.Element;

declare const LoginComponentOne: () => react_jsx_runtime.JSX.Element;

declare const LoginComponentTwo: () => react_jsx_runtime.JSX.Element;

declare const OnboardingPageThree: () => react_jsx_runtime.JSX.Element;

declare const OnboardingPageTwo: () => react_jsx_runtime.JSX.Element;

declare const OnboardingScreen: React__default.FC;

declare const ProductDetailsPageVOne: () => react_jsx_runtime.JSX.Element;

declare const ProductDetailsPageVThree: FC<ProductModelProps$1>;

declare const ProductDetailsPageVTwo: FC<ProductModelProps$1>;

declare const RegisterComponentTwo: () => react_jsx_runtime.JSX.Element;

declare const SettingsPage: () => react_jsx_runtime.JSX.Element;

declare const SettingsPageWeb: () => react_jsx_runtime.JSX.Element;

declare function WelcomePageOne(): react_jsx_runtime.JSX.Element;

declare function WelcomePageTwo(): react_jsx_runtime.JSX.Element;

export { AccountType, AppUserContext, AuthContext, AuthLayout, AuthProvider, BannerVOne, COLORS, CONSTANTS, Carousel, CartContext, CartScreen as CartPageVOne, CartProvider, NoOrdersView as ClientNoOrdersView, ClientOrderCard, OrderDetailsPage as ClientOrderDetails, ClientOrdersView, ClientProductCard, ClientProductContext, ClientProductDetailsPage as ClientProductDetails, ClientProductProvider, ClientProductsView, ClientStoreContext, ClientStoreProvider, CollectionContext, type CollectionModelProps, CollectionPageVOne, CollectionPageVTwo, CollectionProvider, CoreLayout, type CouponModelProps, CreateClientOrderView, CreateClientProductView, DeleteSectionView, Divider, ExternalLink, ExtractSettings as ExtractSetting, SectionHeader as Headings, HomeDesignOne, HomeDesignTwo, type InboxModelProps, LoginComponentOne, LoginComponentTwo, MankindProductContext, MankindProductProvider, MyAlert, MyPressable, OnboardingPageThree, OnboardingPageTwo, OnboardingScreen, OrderContext, type OrderModelProps, OrderProvider, PaymentPayScreen, ProductCardV2, ProductCardView, ProductDetailsPageVOne, ProductDetailsPageVThree, ProductDetailsPageVTwo, type ProductModelProps, PromoBannerCard, ROUTES, RegisterComponentTwo, RootLayout, SHADOWS, SIZES, SettingsItemLink, SettingsPage, SettingsPageWeb, type StoreModelProps, StoreType, TabLayout, TalentCard, ThemeContext, TopHomeSeaction, type UserProps, WelcomePageOne, WelcomePageTwo, MyButton as WhiteButton, authApi, convertToCurrency, formatPhoneNumber, generateUUID, stripeConverter, useClientOnlyValue, useClientProduct };
